import { ConsoleCommand } from "../Models/ConsoleCommand.js";
import { Parameter } from "../Models/Parameter.js";
var commands = [
    new ConsoleCommand(`Add-BCDataCacheExtension`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-BitLockerKeyProtector`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-DnsClientNrptRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-DtcClusterTMMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-EtwTraceProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-InitiatorIdToMaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-MpPreference`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-MpPreference`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetEventNetworkAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetEventPacketCaptureProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetEventProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetEventVFPProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetEventVmNetworkAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetEventVmSwitch`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetEventVmSwitchProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetEventWFPCaptureProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetIPHttpsCertBinding`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetLbfoTeamMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetLbfoTeamNic`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetNatExternalAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetNatStaticMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-NetSwitchTeamMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-OdbcDsn`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-PartitionAccessPath`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-PhysicalDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-Printer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-PrinterDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-PrinterPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-StorageFaultDomain`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-TargetPortToMaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-VirtualDiskToMaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-VpnConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-VpnConnectionRoute`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-VpnConnectionTriggerApplication`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-VpnConnectionTriggerDnsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-VpnConnectionTriggerTrustedNetwork`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`AfterAll`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`AfterEach`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Assert-MockCalled`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Assert-VerifiableMocks`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Backup-BitLockerKeyProtector`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`BackupToAAD-BitLockerKeyProtector`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`BeforeAll`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`BeforeEach`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Block-FileShareAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Block-SmbShareAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-AssignedAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-BCCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-BitLockerAutoUnlock`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-Disk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-DnsClientCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-FileStorageTier`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-PcsvDeviceLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-StorageBusDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-StorageDiagnosticInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Close-SmbOpenFile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Close-SmbSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Compress-Archive`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Configuration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Connect-IscsiTarget`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Connect-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Context`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertFrom-SddlString`, [
        new Parameter(`Sddl`, `See help file for details.`, `System.String`),
        new Parameter(`Type`, `See help file for details.`, `System.Object`),
        new Parameter(`Verbose`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Debug`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`ErrorAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`WarningAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`InformationAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`ErrorVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WarningVariable`, `See help file for details.`, `System.String`),
        new Parameter(`InformationVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutBuffer`, `See help file for details.`, `System.Int32`),
        new Parameter(`PipelineVariable`, `See help file for details.`, `System.String`),
    ], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Copy-NetFirewallRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Copy-NetIPsecMainModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Copy-NetIPsecMainModeRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Copy-NetIPsecPhase1AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Copy-NetIPsecPhase2AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Copy-NetIPsecQuickModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Copy-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Debug-FileShare`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Debug-MMAppPrelaunch`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Debug-StorageSubSystem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Debug-Volume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Describe`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-BC`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-BCDowngrading`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-BCServeOnBattery`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-BitLocker`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-BitLockerAutoUnlock`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-DAManualEntryPointSelection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-DscDebug`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-MMAgent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterBinding`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterChecksumOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterEncapsulatedPacketTaskOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterIPsecOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterLso`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterPacketDirect`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterPowerManagement`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterQos`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterRdma`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterRsc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterRss`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterSriov`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterUso`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetAdapterVmq`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetDnsTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetFirewallRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetIPHttpsProfile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetIPsecMainModeRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetNatTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetworkSwitchEthernetPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetworkSwitchFeature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-NetworkSwitchVlan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-OdbcPerfCounter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-PhysicalDiskIdentification`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-PnpDevice`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-PSTrace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-PSWSManCombinedTrace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-SmbDelegation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-StorageBusCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-StorageBusDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-StorageEnclosureIdentification`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-StorageEnclosurePower`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-StorageHighAvailability`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-StorageMaintenanceMode`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-WdacBidTrace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-WSManTrace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disconnect-IscsiTarget`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disconnect-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Dismount-DiskImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-BCDistributed`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-BCDowngrading`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-BCHostedClient`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-BCHostedServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-BCLocal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-BCServeOnBattery`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-BitLocker`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-BitLockerAutoUnlock`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-DAManualEntryPointSelection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-DscDebug`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-MMAgent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterBinding`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterChecksumOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterEncapsulatedPacketTaskOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterIPsecOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterLso`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterPacketDirect`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterPowerManagement`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterQos`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterRdma`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterRsc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterRss`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterSriov`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterUso`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetAdapterVmq`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetDnsTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetFirewallRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetIPHttpsProfile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetIPsecMainModeRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetNatTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetworkSwitchEthernetPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetworkSwitchFeature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-NetworkSwitchVlan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-OdbcPerfCounter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-PhysicalDiskIdentification`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-PnpDevice`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-PSTrace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-PSWSManCombinedTrace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-SmbDelegation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-StorageBusCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-StorageBusDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-StorageEnclosureIdentification`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-StorageEnclosurePower`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-StorageHighAvailability`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-StorageMaintenanceMode`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-WdacBidTrace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-WSManTrace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Expand-Archive`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-BCCachePackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-BCSecretKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-ODataEndpointProxy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Find-Command`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Find-DscResource`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Find-Module`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Find-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Find-NetRoute`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Find-RoleCapability`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Find-Script`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Flush-EtwTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Format-Hex`, [
        new Parameter(`Path`, `See help file for details.`, `System.String[]`),
        new Parameter(`LiteralPath`, `See help file for details.`, `System.String[]`),
        new Parameter(`InputObject`, `See help file for details.`, `System.Object`),
        new Parameter(`Encoding`, `See help file for details.`, `System.String`),
        new Parameter(`Raw`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Verbose`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Debug`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`ErrorAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`WarningAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`InformationAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`ErrorVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WarningVariable`, `See help file for details.`, `System.String`),
        new Parameter(`InformationVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutBuffer`, `See help file for details.`, `System.Int32`),
        new Parameter(`PipelineVariable`, `See help file for details.`, `System.String`),
    ], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Format-Volume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppBackgroundTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppvVirtualProcess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppxLastError`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppxLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AssignedAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AutologgerConfig`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BCClientConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BCContentServerConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BCDataCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BCDataCacheExtension`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BCHashCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BCHostedCacheServerConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BCNetworkConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BCStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BitLockerVolume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ClusteredScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DAClientExperienceConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DAConnectionStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DAEntryPointTableItem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DedupProperties`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Disk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DiskImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DiskStorageNodeView`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DnsClient`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DnsClientCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DnsClientGlobalSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DnsClientNrptGlobal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DnsClientNrptPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DnsClientNrptRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DnsClientServerAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DscConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DscConfigurationStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DscLocalConfigurationManager`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DscResource`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Dtc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcAdvancedHostSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcAdvancedSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcClusterDefault`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcClusterTMMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcDefault`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcNetworkSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcTransaction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcTransactionsStatistics`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcTransactionsTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DtcTransactionsTraceSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-EtwTraceProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-EtwTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-FileHash`, [
        new Parameter(`Path`, `See help file for details.`, `System.String[]`),
        new Parameter(`LiteralPath`, `See help file for details.`, `System.String[]`),
        new Parameter(`InputStream`, `See help file for details.`, `System.IO.Stream`),
        new Parameter(`Algorithm`, `See help file for details.`, `System.String`),
        new Parameter(`Verbose`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Debug`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`ErrorAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`WarningAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`InformationAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`ErrorVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WarningVariable`, `See help file for details.`, `System.String`),
        new Parameter(`InformationVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutBuffer`, `See help file for details.`, `System.Int32`),
        new Parameter(`PipelineVariable`, `See help file for details.`, `System.String`),
    ], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-FileIntegrity`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-FileShare`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-FileShareAccessControlEntry`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-FileStorageTier`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-InitiatorId`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-InitiatorPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-InstalledModule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-InstalledScript`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-IscsiConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-IscsiSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-IscsiTarget`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-IscsiTargetPortal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-IseSnippet`, [
        new Parameter(`Verbose`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Debug`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`ErrorAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`WarningAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`InformationAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`ErrorVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WarningVariable`, `See help file for details.`, `System.String`),
        new Parameter(`InformationVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutBuffer`, `See help file for details.`, `System.Int32`),
        new Parameter(`PipelineVariable`, `See help file for details.`, `System.String`),
    ], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-LogProperties`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MMAgent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MockDynamicParameters`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpComputerStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpComputerStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpPreference`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpPreference`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpThreat`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpThreat`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpThreatCatalog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpThreatCatalog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpThreatDetection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-MpThreatDetection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NCSIPolicyConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Net6to4Configuration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterAdvancedProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterBinding`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterChecksumOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterEncapsulatedPacketTaskOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterHardwareInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterIPsecOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterLso`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterPacketDirect`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterPowerManagement`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterQos`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterRdma`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterRsc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterRss`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterSriov`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterSriovVf`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterStatistics`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterUso`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterVmq`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterVMQQueue`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetAdapterVPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetCompartment`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetConnectionProfile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetDnsTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetDnsTransitionMonitoring`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetEventNetworkAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetEventPacketCaptureProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetEventProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetEventSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetEventVFPProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetEventVmNetworkAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetEventVmSwitch`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetEventVmSwitchProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetEventWFPCaptureProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallAddressFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallApplicationFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallInterfaceFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallInterfaceTypeFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallPortFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallProfile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallSecurityFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallServiceFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetFirewallSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPHttpsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPHttpsState`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPInterface`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPsecDospSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPsecMainModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPsecMainModeRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPsecMainModeSA`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPsecPhase1AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPsecPhase2AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPsecQuickModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPsecQuickModeSA`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPv4Protocol`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIPv6Protocol`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetIsatapConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetLbfoTeam`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetLbfoTeamMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetLbfoTeamNic`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetNat`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetNatExternalAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetNatGlobal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetNatSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetNatStaticMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetNatTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetNatTransitionMonitoring`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetNeighbor`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetOffloadGlobalSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetPrefixPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetQosPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetRoute`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetSwitchTeam`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetSwitchTeamMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetTCPConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetTCPSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetTeredoConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetTeredoState`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetTransportFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetUDPEndpoint`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetUDPSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetView`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetworkSwitchEthernetPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetworkSwitchFeature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetworkSwitchGlobalData`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NetworkSwitchVlan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-OdbcDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-OdbcDsn`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-OdbcPerfCounter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-OffloadDataTransferSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-OperationValidation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Partition`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PartitionSupportedSize`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PcsvDevice`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PcsvDeviceLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PhysicalDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PhysicalDiskStorageNodeView`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PhysicalExtent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PhysicalExtentAssociation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PnpDevice`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PnpDeviceProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PrintConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Printer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PrinterDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PrinterPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PrinterProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PrintJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSRepository`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ResiliencySetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ScheduledTaskInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbBandWidthLimit`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbClientConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbClientNetworkInterface`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbDelegation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbGlobalMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbMultichannelConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbMultichannelConstraint`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbOpenFile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbServerConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbServerNetworkInterface`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbShare`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbShareAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SmbWitnessClient`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StartApps`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageAdvancedProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageBusBinding`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageBusDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageChassis`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageDiagnosticInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageEnclosure`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageEnclosureStorageNodeView`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageEnclosureVendorData`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageExtendedStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageFaultDomain`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageFileServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageFirmwareInformation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageHealthAction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageHealthReport`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageHealthSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageHistory`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageNode`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StoragePool`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageRack`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageReliabilityCounter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageScaleUnit`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageSite`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageSubSystem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageTier`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-StorageTierSupportedSize`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SupportedClusterSizes`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SupportedFileSystems`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TargetPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TargetPortal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TestDriveItem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-VirtualDiskSupportedSize`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Volume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-VolumeCorruptionCount`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-VolumeScrubPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-VpnConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-VpnConnectionTrigger`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WdacBidTrace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsUpdateLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WUAVersion`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WUIsPendingReboot`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WULastInstallationDate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WULastScanSuccessDate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Grant-FileShareAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Grant-SmbShareAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Hide-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-BCCachePackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-BCSecretKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-IseSnippet`, [
        new Parameter(`Path`, `See help file for details.`, `System.String`),
        new Parameter(`Recurse`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Module`, `See help file for details.`, `System.String`),
        new Parameter(`ListAvailable`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Verbose`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Debug`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`ErrorAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`WarningAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`InformationAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`ErrorVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WarningVariable`, `See help file for details.`, `System.String`),
        new Parameter(`InformationVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutBuffer`, `See help file for details.`, `System.Int32`),
        new Parameter(`PipelineVariable`, `See help file for details.`, `System.String`),
    ], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-PowerShellDataFile`, [
        new Parameter(`Path`, `See help file for details.`, `System.String[]`),
        new Parameter(`LiteralPath`, `See help file for details.`, `System.String[]`),
        new Parameter(`Verbose`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Debug`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`ErrorAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`WarningAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`InformationAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`ErrorVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WarningVariable`, `See help file for details.`, `System.String`),
        new Parameter(`InformationVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutBuffer`, `See help file for details.`, `System.Int32`),
        new Parameter(`PipelineVariable`, `See help file for details.`, `System.String`),
    ], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`In`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Initialize-Disk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`InModuleScope`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Install-Dtc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Install-Module`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Install-Script`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Install-WUUpdates`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-AsWorkflow`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-Mock`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-OperationValidation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-Pester`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`It`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Lock-BitLocker`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Mock`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Mount-DiskImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Move-SmbWitnessClient`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-AutologgerConfig`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-DAEntryPointTableItem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-DscChecksum`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-EapConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-EtwTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-FileShare`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Fixture`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Guid`, [
        new Parameter(`Verbose`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Debug`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`ErrorAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`WarningAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`InformationAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`ErrorVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WarningVariable`, `See help file for details.`, `System.String`),
        new Parameter(`InformationVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutBuffer`, `See help file for details.`, `System.Int32`),
        new Parameter(`PipelineVariable`, `See help file for details.`, `System.String`),
    ], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-IscsiTargetPortal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-IseSnippet`, [
        new Parameter(`Title`, `See help file for details.`, `System.String`),
        new Parameter(`Description`, `See help file for details.`, `System.String`),
        new Parameter(`Text`, `See help file for details.`, `System.String`),
        new Parameter(`Author`, `See help file for details.`, `System.String`),
        new Parameter(`CaretOffset`, `See help file for details.`, `System.Int32`),
        new Parameter(`Force`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Verbose`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Debug`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`ErrorAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`WarningAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`InformationAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`ErrorVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WarningVariable`, `See help file for details.`, `System.String`),
        new Parameter(`InformationVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutBuffer`, `See help file for details.`, `System.Int32`),
        new Parameter(`PipelineVariable`, `See help file for details.`, `System.String`),
    ], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-MaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetAdapterAdvancedProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetEventSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetFirewallRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPHttpsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecDospSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecMainModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecMainModeRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecPhase1AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecPhase2AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecQuickModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetLbfoTeam`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetNat`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetNatTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetNeighbor`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetQosPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetRoute`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetSwitchTeam`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetTransportFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetworkSwitchVlan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Partition`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PesterOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PSWorkflowSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ScheduledTaskAction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ScheduledTaskPrincipal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ScheduledTaskSettingsSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ScheduledTaskTrigger`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ScriptFileInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-SmbGlobalMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-SmbMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-SmbMultichannelConstraint`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-SmbShare`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-StorageBusBinding`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-StorageBusCacheStore`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-StorageFileServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-StoragePool`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-StorageSubsystemVirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-StorageTier`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-TemporaryFile`, [
        new Parameter(`Verbose`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Debug`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`ErrorAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`WarningAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`InformationAction`, `See help file for details.`, `System.Management.Automation.ActionPreference`),
        new Parameter(`ErrorVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WarningVariable`, `See help file for details.`, `System.String`),
        new Parameter(`InformationVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutVariable`, `See help file for details.`, `System.String`),
        new Parameter(`OutBuffer`, `See help file for details.`, `System.Int32`),
        new Parameter(`PipelineVariable`, `See help file for details.`, `System.String`),
        new Parameter(`WhatIf`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
        new Parameter(`Confirm`, `See help file for details.`, `System.Management.Automation.SwitchParameter`),
    ], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-VirtualDiskClone`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-VirtualDiskSnapshot`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Volume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-VpnServerAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Open-NetGPO`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Optimize-StoragePool`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Optimize-Volume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`PSConsoleHostReadLine`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Publish-BCFileContent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Publish-BCWebContent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Publish-Module`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Publish-Script`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Read-PrinterNfcTag`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-ClusteredScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-DnsClient`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-IscsiSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-PSRepository`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-StorageSubsystem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-AutologgerConfig`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-BCDataCacheExtension`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-BitLockerKeyProtector`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-DAEntryPointTableItem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-DnsClientNrptRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-DscConfigurationDocument`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-DtcClusterTMMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-EtwTraceProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-FileShare`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-InitiatorId`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-InitiatorIdFromMaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-IscsiTargetPortal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-MaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-MpPreference`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-MpPreference`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-MpThreat`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-MpThreat`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetAdapterAdvancedProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetEventNetworkAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetEventPacketCaptureProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetEventProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetEventSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetEventVFPProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetEventVmNetworkAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetEventVmSwitch`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetEventVmSwitchProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetEventWFPCaptureProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetFirewallRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPHttpsCertBinding`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPHttpsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPsecDospSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPsecMainModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPsecMainModeRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPsecMainModeSA`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPsecPhase1AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPsecPhase2AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPsecQuickModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPsecQuickModeSA`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetLbfoTeam`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetLbfoTeamMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetLbfoTeamNic`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetNat`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetNatExternalAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetNatStaticMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetNatTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetNeighbor`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetQosPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetRoute`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetSwitchTeam`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetSwitchTeamMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetTransportFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetworkSwitchEthernetPortIPAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-NetworkSwitchVlan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-OdbcDsn`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-Partition`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PartitionAccessPath`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PhysicalDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-Printer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PrinterDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PrinterPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PrintJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-SmbBandwidthLimit`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-SmbGlobalMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-SmbMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-SmbMultichannelConstraint`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-SmbShare`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-StorageBusBinding`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-StorageFaultDomain`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-StorageFileServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-StorageHealthIntent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-StorageHealthSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-StoragePool`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-StorageTier`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-TargetPortFromMaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-VirtualDiskFromMaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-VpnConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-VpnConnectionRoute`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-VpnConnectionTriggerApplication`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-VpnConnectionTriggerDnsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-VpnConnectionTriggerTrustedNetwork`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-DAEntryPointTableItem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-MaskingSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetFirewallRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetIPHttpsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetIPsecMainModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetIPsecMainModeRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetIPsecPhase1AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetIPsecPhase2AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetIPsecQuickModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetLbfoTeam`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-NetSwitchTeam`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-Printer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Repair-FileIntegrity`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Repair-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Repair-Volume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-BC`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-DAClientExperienceConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-DAEntryPointTableItem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-DtcLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-NCSIPolicyConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-Net6to4Configuration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-NetAdapterAdvancedProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-NetDnsTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-NetIPHttpsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-NetIsatapConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-NetTeredoConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-PhysicalDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-StorageReliabilityCounter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resize-Partition`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resize-StorageTier`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resize-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restart-NetAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restart-PcsvDevice`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restart-PrintJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restore-DscConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restore-NetworkSwitchConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resume-BitLocker`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resume-PrintJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resume-StorageBusDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Revoke-FileShareAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Revoke-SmbShareAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`SafeGetCommand`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Save-EtwTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Save-Module`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Save-NetGPO`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Save-NetworkSwitchConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Save-Script`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Send-EtwTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AssignedAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-BCAuthentication`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-BCCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-BCDataCacheEntryMaxAge`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-BCMinSMBLatency`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-BCSecretKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-ClusteredScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DAClientExperienceConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DAEntryPointTableItem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Disk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DnsClient`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DnsClientGlobalSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DnsClientNrptGlobal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DnsClientNrptRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DnsClientServerAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcAdvancedHostSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcAdvancedSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcClusterDefault`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcClusterTMMapping`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcDefault`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcNetworkSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcTransaction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcTransactionsTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DtcTransactionsTraceSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DynamicParameterVariables`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-EtwTraceProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-FileIntegrity`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-FileShare`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-FileStorageTier`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-InitiatorPort`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-IscsiChapSecret`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-LogProperties`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-MMAgent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-MpPreference`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-MpPreference`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NCSIPolicyConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Net6to4Configuration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterAdvancedProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterBinding`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterChecksumOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterEncapsulatedPacketTaskOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterIPsecOffload`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterLso`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterPacketDirect`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterPowerManagement`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterQos`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterRdma`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterRsc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterRss`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterSriov`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterUso`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetAdapterVmq`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetConnectionProfile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetDnsTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetEventPacketCaptureProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetEventProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetEventSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetEventVFPProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetEventVmSwitchProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetEventWFPCaptureProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallAddressFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallApplicationFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallInterfaceFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallInterfaceTypeFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallPortFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallProfile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallSecurityFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallServiceFilter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetFirewallSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPHttpsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPInterface`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPsecDospSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPsecMainModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPsecMainModeRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPsecPhase1AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPsecPhase2AuthSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPsecQuickModeCryptoSet`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPv4Protocol`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIPv6Protocol`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetIsatapConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetLbfoTeam`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetLbfoTeamMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetLbfoTeamNic`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetNat`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetNatGlobal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetNatTransitionConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetNeighbor`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetOffloadGlobalSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetQosPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetRoute`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetTCPSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetTeredoConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetUDPSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetworkSwitchEthernetPortIPAddress`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetworkSwitchPortMode`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetworkSwitchPortProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NetworkSwitchVlanProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-OdbcDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-OdbcDsn`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Partition`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PcsvDeviceBootConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PcsvDeviceNetworkConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PcsvDeviceUserPassword`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PhysicalDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PrintConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Printer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PrinterProperty`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PSRepository`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-ResiliencySetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-SmbBandwidthLimit`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-SmbClientConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-SmbPathAcl`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-SmbServerConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-SmbShare`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-StorageBusProfile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-StorageFileServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-StorageHealthSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-StoragePool`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-StorageProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-StorageSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-StorageSubSystem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-StorageTier`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-TestInconclusive`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Setup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Volume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-VolumeScrubPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-VpnConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-VpnConnectionIPsecConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-VpnConnectionProxy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-VpnConnectionTriggerDnsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-VpnConnectionTriggerTrustedNetwork`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Should`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Show-NetFirewallRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Show-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Show-StorageHistory`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Show-VirtualDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-AppBackgroundTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-AppvVirtualProcess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-AutologgerConfig`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-Dtc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-DtcTransactionsTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-EtwTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-MpScan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-MpScan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-MpWDOScan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-MpWDOScan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-NetEventSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-PcsvDevice`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-StorageDiagnosticLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-Trace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-WUScan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-DscConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-Dtc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-DtcTransactionsTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-EtwTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-NetEventSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-PcsvDevice`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-StorageDiagnosticLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-StorageJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-Trace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Suspend-BitLocker`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Suspend-PrintJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Suspend-StorageBusDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Sync-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-Dtc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-NetConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-ScriptFileInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unblock-FileShareAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unblock-SmbShareAccess`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Uninstall-Dtc`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Uninstall-Module`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Uninstall-Script`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unlock-BitLocker`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-AppBackgroundTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-ClusteredScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-IscsiSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-PSRepository`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-ScheduledTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-StorageSubsystem`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-AutologgerConfig`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-Disk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-DscConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-EtwTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-HostStorageCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-IscsiTarget`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-IscsiTargetPortal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-Module`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-ModuleManifest`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-MpSignature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-MpSignature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-NetIPsecRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-Script`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-ScriptFileInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-SmbMultichannelConnection`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-StorageFirmware`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-StoragePool`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-StorageProviderCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-DtcTransactionsTraceSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-PrinterNfcTag`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-VolumeCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-AppvClientConnectionGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-AppvClientPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-AppvPublishingServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-AppxPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-AppxProvisionedPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-AppxVolume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-BitsFile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-CertificateEnrollmentPolicyServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-Computer`, [
        new Parameter(`ComputerName`, `Specifies the computers to add to a domain or workgroup. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name of each of the remote computers. To 
specify the local computer, type the computer name, a dot (.), or "localhost".


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Add-Computer even if your 
computer is not configured to run remote commands.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to join the computers to a new domain. The default is the current user.


Type a user name, such as "User01" or "Domain01\\User01", or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


To specify a user account that has permission to remove the computer from its current domain, use the UnjoinDomainCredential 
parameter. To specify a user account that has permission to connect to a remote computer, use the LocalCredential parameter.`, `PSCredential`),
        new Parameter(`DomainName`, `Specifies the domain to which the computers are added. This parameter is required when adding the computers to a domain.`, `String`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation. Without this parameter, Add-Computer requires you to confirm the 
addition of each computer.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`LocalCredential`, `Specifies a user account that has permission to connect to the computers that are specified by the ComputerName parameter. The 
default is the current user.


Type a user name, such as "User01" or "Domain01\\User01", or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


To specify a user account that has permission to add the computers to a new domain, use the Credential parameter. To specify a user 
account that has permission to remove the computers from their current domain, use the UnjoinDomainCredential parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
        new Parameter(`NewName`, `Specifies a new name for the computer in the new domain. This parameter is valid only when one computer is being added or moved.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`OUPath`, `Specifies an organizational unit (OU) for the domain account. Enter the full distinguished name of the OU in quotation marks.  The 
default value is the default OU for machine objects in the domain.`, `String`),
        new Parameter(`Options`, `Specifies advanced options for the Add-Computer join operation. Enter one or more values in a comma-separated string.


The acceptable values for this parameter are:


- AccountCreate : Creates a domain account. The Add-Computer cmdlet automatically creates a domain account when it adds a computer to 
a domain. This option is included for completeness.


- Win9XUpgrade : Indicates that the join operation is part of a Windows operating system upgrade.


- UnsecuredJoin : Performs an unsecured join. To request an unsecured join, use the Unsecure parameter or this option.


- PasswordPass : Sets the machine password to the value of the Credential (DomainCredential) parameter after performing an unsecured 
join. This option also indicates that the value of the Credential (DomainCredential) parameter is a machine password, not a user 
password. This option is valid only when the UnsecuredJoin option is specified.


-- JoinWithNewName : Renames the computer name in the new domain to the name specified by the NewName parameter. When you use the 
NewName parameter, this option is set automatically. This option is designed to be used with the Rename-Computer cmdlet. If you use 
the Rename-Computer cmdlet to rename the computer, but do not restart the computer to make the change effective, you can use this 
parameter to join the computer to a domain with its new name.


- JoinReadOnly : Uses an existing machine account to join the computer to a read-only domain controller. The machine account must be 
added to the allowed list for password replication policy and the account password must be replicated to the read-only domain 
controller prior to the join operation.


- InstallInvoke : Sets the create (0x2) and delete (0x4) flags of the FJoinOptions parameter of the JoinDomainOrWorkgroup method. For 
more information about the JoinDomainOrWorkgroup method, see "JoinDomainOrWorkgroup Method of the Win32_ComputerSystem Class" on 
MSDNhttp://msdn.microsoft.com/library/aa392154(VS.85).aspx at http://msdn.microsoft.com/library/aa392154(VS.85).aspx.


For more information about these options, see "NetJoinDomain" on MSDNhttp://msdn.microsoft.com/library/aa370433(VS.85).aspx at 
http://msdn.microsoft.com/library/aa370433(VS.85).aspx.


This parameter was introduced in Windows PowerShell 3.0.`, `JoinOptions`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Restart`, `Indicates that this cmdlet restarts the computers that were added to the domain or workgroup. A restart is often required to make the 
change effective.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Server`, `Specifies the name of a domain controller that adds the computer to the domain. Enter the name in DomainName\\ComputerName format. By 
default, no domain controller is specified.`, `String`),
        new Parameter(`UnjoinDomainCredential`, `Specifies a user account that has permission to remove the computers from their current domains. The default is the current user.


Type a user name, such as "User01" or "Domain01\\User01", or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


Use this parameter when you are moving computers to a different domain. To specify a user account that has permission to join the new 
domain, use the Credential parameter. To specify a user account that has permission to connect to a remote computer, use the 
LocalCredential parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
        new Parameter(`Unsecure`, `Indicates that this cmdlet performs an unsecured join to the specified domain.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        new Parameter(`WorkgroupName`, `Specifies the name of a workgroup to which the computers are added. The default value is "WORKGROUP".`, `String`),
    ], `Add the local computer to a domain or workgroup.`, `Add-Computer [-DomainName] <String> [-ComputerName <String[]>] [-Confirm] -Credential <PSCredential> [-Force] [-LocalCredential 
<PSCredential>] [-NewName <String>] [-OUPath <String>] [-Options {AccountCreate | Win9XUpgrade | UnsecuredJoin | PasswordPass | 
DeferSPNSet | JoinWithNewName | JoinReadOnly | InstallInvoke}] [-PassThru] [-Restart] [-Server <String>] [-UnjoinDomainCredential 
<PSCredential>] [-Unsecure] [-WhatIf] [<CommonParameters>]

Add-Computer [-WorkgroupName] <String> [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] [-Force] [-LocalCredential 
<PSCredential>] [-NewName <String>] [-PassThru] [-Restart] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-Content`, [
        new Parameter(`Encoding`, `Specifies the file encoding. The default is ASCII.

Valid values are:

-- ASCII:  Uses the encoding for the ASCII (7-bit) character set.
-- BigEndianUnicode:  Encodes in UTF-16 format using the big-endian byte order.
-- Byte:   Encodes a set of characters into a sequence of bytes.
-- String:  Uses the encoding type for a string.
-- Unicode:  Encodes in UTF-16 format using the little-endian byte order.
-- UTF7:   Encodes in UTF-7 format.
-- UTF8:  Encodes in UTF-8 format.
-- Unknown:  The encoding type is unknown or invalid. The data can be treated as binary.

Encoding is a dynamic parameter that the FileSystem provider adds to the Add-Content cmdlet. This parameter works only in file system 
drives.`, `FileSystemCmdletProviderEncoding`),
        new Parameter(`Force`, `Adds contents to files even if they are read-only. Without this parameter, read-only files are not affected.`, `SwitchParameter`),
        new Parameter(`Stream`, `Adds the content to the specified alternate data stream. If the stream does not yet, exist, Add-Content creates it. Enter the stream 
name. Wildcards are not supported.

Stream is a dynamic parameter that the FileSystem provider adds to the Add-Content cmdlet. This parameter works only in file system 
drives.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
        new Parameter(`Confirm`, `Prompts you for confirmation before executing the command.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Describes what would happen if you executed the command without actually executing the command.`, `SwitchParameter`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see about_Transactions.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as "User01" or "Domain01\\User01", or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies, as a string array, items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path 
element or pattern, such as "*.txt". Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.`, `String`),
        new Parameter(`Include`, `Specifies, as a string array, items that this cmdlet includes. The value of this parameter qualifies the Path parameter. Enter a path 
element or pattern, such as "*.txt". Wildcards are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the path to the items that receive the additional content. Unlike the Path parameter, the value of the LiteralPath 
parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose 
it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`NoNewline`, `Indicates that this cmdlet does not add a new line/carriage return to the content.


Type a user name, such as "User01" or "Domain01\\User01", or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `SwitchParameter`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to the items that receive the additional content. Wildcards are permitted. If you specify multiple paths, use 
commas to separate the paths.`, `String[]`),
        new Parameter(`Value`, `Specifies the content to be added. Type a quoted string, such as "This data is for internal use only", or specify an object that 
contains content, such as the DateTime object that Get-Date generates.


You cannot specify the contents of a file by typing its path, because the path is just a string, but you can use a Get-Content 
command to get the content and pass it to the Value parameter.`, `Object[]`),
    ], `Appends content, such as words or data, to a file.`, `Add-Content [-Value] <Object[]> [-Confirm] [-Credential <PSCredential>] [-Encoding {Unknown | String | Unicode | Byte | 
BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>] [-Filter <String>] [-Force] 
[-Include <String[]>] -LiteralPath <String[]> [-NoNewline] [-PassThru] [-Stream <String>] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]

Add-Content [-Path] <String[]> [-Value] <Object[]> [-Confirm] [-Credential <PSCredential>] [-Encoding {Unknown | String | Unicode | 
Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] [-NoNewline] [-PassThru] [-Stream <String>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Add-Content [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] 
[-Stream <string>] [-Confirm] [-WhatIf] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-History`, [
        new Parameter(`InputObject`, `Specifies an array of entries to add to the history as HistoryInfo object to the session history. You can use this parameter to 
submit a HistoryInfo object, such as the ones that are returned by the Get-History , Import-Clixml, or Import-Csv cmdlets, to 
Add-History .`, `PSObject[]`),
        new Parameter(`Passthru`, `Indicates that this cmdlet returns a history object for each history entry. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
    ], `Appends entries to the session history.`, `Add-History [[-InputObject] <PSObject[]>] [-Passthru] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-JobTrigger`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-KdsRootKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-LocalGroupMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-Member`, [
        new Parameter(`Force`, `Indicates that this cmdlet adds a new member even the object has a custom member with the same name. You cannot use the Force 
parameter to replace a standard member of a type.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the object to which the new member is added. Enter a variable that contains the objects, or type a command or expression 
that gets the objects.`, `PSObject`),
        new Parameter(`MemberType`, `Specifies the type of the member to add. This parameter is required. The acceptable values for this parameter are:


- NoteProperty


- AliasProperty


- ScriptProperty


- CodeProperty


- ScriptMethod


- CopyMethod




For information about these values, see PSMemberTypes 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.psmembertypes(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.psmembertypes(v=vs.85).aspx).

Not all objects have every type of member. If you specify a member type that the object does not have, Windows PowerShell returns an 
error.`, `PSMemberTypes`),
        new Parameter(`Name`, `Specifies the name of the member that this cmdlet adds.`, `String`),
        new Parameter(`NotePropertyMembers`, `Specifies a hash table or ordered dictionary of note property names and values. Type a hash table or dictionary in which the keys are 
note property names and the values are note property values.


For more information about hash tables and ordered dictionaries in Windows PowerShell, see about_Hash_Tables.


This parameter was introduced in Windows PowerShell 3.0.`, `IDictionary`),
        new Parameter(`NotePropertyName`, `Specifies the note property name.


Use this parameter with the NotePropertyValue parameter. This parameter is optional.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`NotePropertyValue`, `Specifies the note property value.


Use this parameter with the NotePropertyName parameter. This parameter is optional.


This parameter was introduced in Windows PowerShell 3.0.`, `Object`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.


For most objects, Add-Member adds the new members to the input object. However, when the input object is a string, Add-Member cannot 
add the member to the input object. For these objects, use the PassThru parameter to create an output object.


In Windows PowerShell 2.0, Add-Member added members only to the PSObject wrapper of objects, not to the object. Use the PassThru 
parameter to create an output object for any object that has a PSObject wrapper.`, `SwitchParameter`),
        new Parameter(`SecondValue`, `Specifies optional additional information about AliasProperty , ScriptProperty , CodeProperty , or CodeMethod members. If used when 
adding an AliasProperty, this parameter must be a data type. A conversion to the specified data type is added to the value of the 
AliasProperty. For example, if you add an AliasProperty that provides an alternate name for a string property, you can also specify a 
SecondValue parameter of System.Int32 to indicate that the value of that string property should be converted to an integer when 
accessed by using the corresponding AliasProperty.


You can use the SecondValue parameter to specify an additional ScriptBlock when adding a ScriptProperty member. In that case, the 
first ScriptBlock, specified in the Value parameter, is used to get the value of a variable. The second ScriptBlock, specified in the 
SecondValue parameter, is used to set the value of a variable.`, `Object`),
        new Parameter(`TypeName`, `Specifies a name for the type.


When the type is a class in the System namespace or a type that has a type accelerator, you can enter the short name of the type. 
Otherwise, the full type name is required.  This parameter is effective only when the input object is a PSObject .


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`Value`, `Specifies the initial value of the added member. If you add an AliasProperty , CodeProperty , ScriptProperty or CodeMethod member, 
you can supply optional, additional information by using the SecondValue parameter.`, `Object`),
    ], `Adds custom properties and methods to an instance of a Windows PowerShell object.`, `Add-Member [-MemberType] {AliasProperty | CodeProperty | Property | NoteProperty | ScriptProperty | Properties | PropertySet | Method 
| CodeMethod | ScriptMethod | Methods | ParameterizedProperty | MemberSet | Event | Dynamic | All} [-Name] <String> [[-Value] 
<Object>] [[-SecondValue] <Object>] [-Force] -InputObject <PSObject> [-PassThru] [-TypeName <String>] [<CommonParameters>]

Add-Member [-NotePropertyName] <String> [-NotePropertyValue] <Object> [-Force] -InputObject <PSObject> [-PassThru] [-TypeName 
<String>] [<CommonParameters>]

Add-Member [-NotePropertyMembers] <IDictionary> [-Force] -InputObject <PSObject> [-PassThru] [-TypeName <String>] [<CommonParameters>]

Add-Member -InputObject <PSObject> [-PassThru] -TypeName <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-PSSnapin`, [
        new Parameter(`Name`, `Specifies the name of the snap-in. This is the Name, not the AssemblyName or ModuleName. Wildcards are permitted.


To find the names of the registered snap-ins on your system, type "Get-PSSnapin -Registered".`, `String[]`),
        new Parameter(`PassThru`, `Indicates that this cmdlet returns an object that represents each added snap-in. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
    ], `Adds one or more Windows PowerShell snap-ins to the current session.`, `Add-PSSnapin [-Name] <String[]> [-PassThru] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-SignerRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-Type`, [
        new Parameter(`AssemblyName`, `Specifies the name of an assembly that includes the types. Add-Type takes the types from the specified assembly. This parameter is 
required when you are creating types based on an assembly name.


Enter the full or simple name (also known as the "partial name") of an assembly. Wildcard characters are permitted in the assembly 
name. If you enter a simple or partial name, Add-Type resolves it to the full name, and then uses the full name to load the assembly.


This parameter does not accept a path or file name. To enter the path to the assembly dynamic-link library (DLL) file, use the Path 
parameter.`, `String[]`),
        new Parameter(`CodeDomProvider`, `Specifies a code generator or compiler. Add-Type uses the specified compiler to compile the source code. The default is the C# 
compiler. Use this parameter if you are using a language that cannot be specified by using the Language parameter. The 
CodeDomProvider that you specify must be able to generate assemblies from source code.`, `CodeDomProvider`),
        new Parameter(`CompilerParameters`, `Specifies the options for the source code compiler. These options are sent to the compiler without revision.


This parameter allows you to direct the compiler to generate an executable file, embed resources, or set command-line options, such 
as the "/unsafe" option. This parameter implements the CompilerParameters class (System.CodeDom.Compiler.CompilerParameters).


You cannot use the CompilerParameters and ReferencedAssemblies parameters in the same command.`, `CompilerParameters`),
        new Parameter(`IgnoreWarnings`, `Ignores compiler warnings. Use this parameter to prevent Add-Type from handling compiler warnings as errors.`, `SwitchParameter`),
        new Parameter(`Language`, `Specifies the language that is used in the source code. The Add-Type cmdlet uses the value of this parameter to select the 
appropriate CodeDomProvider . The acceptable values for this parameter are:


- CSharp


- CSharpVersion3


- CSharpVersion2


- VisualBasic


- JScript




CSharp is the default value.`, `Language`),
        new Parameter(`LiteralPath`, `Specifies the path to source code files or assembly DLL files that contain the types. Unlike Path , the value of the LiteralPath 
parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose 
it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`MemberDefinition`, `Specifies new properties or methods for the class. Add-Type generates the template code that is required to support the properties or 
methods.


You can use this feature to make Platform Invoke (P/Invoke) calls to unmanaged functions in Windows PowerShell. For more information, 
see the examples.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the class to create. This parameter is required when generating a type from a member definition.


The type name and namespace must be unique within a session. You cannot unload a type or change it. If you need to change the code 
for a type, you must change the name or start a new Windows PowerShell session. Otherwise, the command fails.`, `String`),
        new Parameter(`Namespace`, `Specifies a namespace for the type.


If this parameter is not included in the command, the type is created in the Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes 
namespace. If the parameter is included in the command with an empty string value or a value of $Null, the type is generated in the 
global namespace.`, `String`),
        new Parameter(`OutputAssembly`, `Generates a DLL file for the assembly with the specified name in the location. Enter a path (optional) and file name. Wildcard 
characters are permitted. By default, Add-Type generates the assembly only in memory.`, `String`),
        new Parameter(`OutputType`, `Specifies the output type of the output assembly. The acceptable values for this parameter are:


- Library


- ConsoleApplication


- WindowsApplication




For more information about the values, see OutputAssemblyType 
Enumerationhttps://msdn.microsoft.com/en-us/library/microsoft.powershell.commands.outputassemblytype(v=vs.85).aspx in MSDN.


By default, no output type is specified.

This parameter is valid only when an output assembly is specified in the command.`, `OutputAssemblyType`),
        new Parameter(`PassThru`, `Returns a System.Runtime object that represents the types that were added. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to source code files or assembly DLL files that contain the types.


If you submit source code files, Add-Type compiles the code in the files and creates an in-memory assembly of the types. The file 
name extension specified in the value of Path determines the compiler that Add-Type uses.


If you submit an assembly file, Add-Type takes the types from the assembly. To specify an in-memory assembly or the global assembly 
cache, use the AssemblyName parameter.`, `String[]`),
        new Parameter(`ReferencedAssemblies`, `Specifies the assemblies upon which the type depends. By default, Add-Type references System.dll and 
System.Management.Automation.dll. The assemblies that you specify by using this parameter are referenced in addition to the default 
assemblies.


You cannot use the CompilerParameters and ReferencedAssemblies parameters in the same command.`, `String[]`),
        new Parameter(`TypeDefinition`, `Specifies the source code that contains the type definitions. Enter the source code in a string or here-string, or enter a variable 
that contains the source code. For more information about here-strings, see about_Quoting_Rules 
(http://go.microsoft.com/fwlink/?LinkID=113253).


Include a namespace declaration in your type definition. If you omit the namespace declaration, your type might have the same name as 
another type or the shortcut for another type, causing an unintentional overwrite. For example, if you define a type called 
Exception, scripts that use Exception as the shortcut for System.Exception will fail.`, `String`),
        new Parameter(`UsingNamespace`, `Specifies other namespaces that are required for the class. This is much like the Using keyword in C#.


By default, Add-Type references the System namespace. When the MemberDefinition parameter is used, Add-Type also references the 
System.Runtime.InteropServices namespace by default. The namespaces that you add by using the UsingNamespace parameter are referenced 
in addition to the default namespaces.`, `String[]`),
    ], `Adds a.NET Framework type (a class) to a Windows PowerShell session.`, `Add-Type -AssemblyName <String[]> [-IgnoreWarnings] [-PassThru] [<CommonParameters>]

Add-Type [-TypeDefinition] <String> [-CodeDomProvider <CodeDomProvider>] [-CompilerParameters <CompilerParameters>] [-IgnoreWarnings] 
[-Language {CSharp | CSharpVersion3 | CSharpVersion2 | VisualBasic | JScript}] [-OutputAssembly <String>] [-OutputType {Library | 
ConsoleApplication | WindowsApplication}] [-PassThru] [-ReferencedAssemblies <String[]>] [<CommonParameters>]

Add-Type [-Name] <String> [-MemberDefinition] <String[]> [-CodeDomProvider <CodeDomProvider>] [-CompilerParameters 
<CompilerParameters>] [-IgnoreWarnings] [-Language {CSharp | CSharpVersion3 | CSharpVersion2 | VisualBasic | JScript}] [-Namespace 
<String>] [-OutputAssembly <String>] [-OutputType {Library | ConsoleApplication | WindowsApplication}] [-PassThru] 
[-ReferencedAssemblies <String[]>] [-UsingNamespace <String[]>] [<CommonParameters>]

Add-Type [-CompilerParameters <CompilerParameters>] [-IgnoreWarnings] -LiteralPath <String[]> [-OutputAssembly <String>] [-OutputType 
{Library | ConsoleApplication | WindowsApplication}] [-PassThru] [-ReferencedAssemblies <String[]>] [<CommonParameters>]

Add-Type [-Path] <String[]> [-CompilerParameters <CompilerParameters>] [-IgnoreWarnings] [-OutputAssembly <String>] [-OutputType 
{Library | ConsoleApplication | WindowsApplication}] [-PassThru] [-ReferencedAssemblies <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-WindowsCapability`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-WindowsDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Add-WindowsPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Checkpoint-Computer`, [
        new Parameter(`Description`, `Specifies a descriptive name for the restore point. This parameter is required.`, `String`),
        new Parameter(`RestorePointType`, `Specifies the type of restore point. The default is APPLICATION_INSTALL.


The acceptable values for this parameter are:


- APPLICATION_INSTALL


- APPLICATION_UNINSTALL


- DEVICE_DRIVER_INSTALL


- MODIFY_SETTINGS


- CANCELLED_OPERATION`, `String`),
    ], `Creates a system restore point on the local computer.`, `Checkpoint-Computer [-Description] <String> [[-RestorePointType] {APPLICATION_INSTALL | APPLICATION_UNINSTALL | DEVICE_DRIVER_INSTALL 
| MODIFY_SETTINGS | CANCELLED_OPERATION}] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-Content`, [
        new Parameter(`Stream`, `Deletes the content in the specified alternate data stream, but does not delete the alternate data stream. Enter the stream name. 
Wildcards are not supported.

Stream is a dynamic parameter that the FileSystem provider adds to the Set-Content cmdlet. This parameter works only in file system 
drives.

You can use the Clear-Content cmdlet to clear the content of an alternate data stream. However, it is not the recommended way to 
eliminate security checks that block files that are downloaded from the Internet. If you verify that a downloaded file is safe, use 
the Unblock-File cmdlet.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as "User01" or "Domain01\\User01", or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies, as a string array, strings that this cmdlet omits from the path to the content. The value of this parameter qualifies the 
Path parameter. Enter a path element or pattern, such as "*.txt". Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.`, `String`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies, as a string array, content that this cmdlet clears. The value of this parameter qualifies the Path parameter. Enter a path 
element or pattern, such as "*.txt". Wildcards are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the paths to the items from which content is deleted. Unlike the Path parameter, the value of LiteralPath is used exactly 
as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation 
marks. Single quotation marks tell having Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the paths to the items from which content is deleted. Wildcards are permitted. The paths must be paths to items, not to 
containers. For example, you must specify a path to one or more files, not a path to a directory. Wildcards are permitted. This 
parameter is required, but the parameter name ("Path") is optional.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes the contents of an item, but does not delete the item.`, `Clear-Content [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] 
-LiteralPath <String[]> [-Stream <String>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Clear-Content [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] [-Stream <String>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Clear-Content [-Stream <string>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-EventLog`, [
        new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name of a remote computer. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of the Get-EventLog cmdlet even 
if your computer is not configured to run remote commands.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`LogName`, `Specifies the event logs. Enter the log name (the value of the Log property; not the LogDisplayName) of one or more event logs, 
separated by commas.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Clears all entries from specified event logs on the local or remote computers.`, `Clear-EventLog [-LogName] <String[]> [[-ComputerName] <String[]>] [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-History`, [
        new Parameter(`CommandLine`, `Specifies commands that this cmdlet deletes. If you enter more than one string, Clear-History deletes commands that have any of the 
strings.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Count`, `Specifies the number of history entries that this cmdlet clears, starting with the oldest entry in the history.


If you use the Count and Id parameters in the same command, the cmdlet clears the number of entries specified by the Count parameter, 
starting with the entry specified by the Id parameter. For example, if Count is 10 and Id is 30, Clear-History clears items 21 
through 30 inclusive.


If you use the Count and CommandLine parameters in the same command, Clear-History clears the number of entries specified by the 
Count parameter, starting with the entry specified by the CommandLine parameter.`, `Int32`),
        new Parameter(`Id`, `Specifies the history IDs of commands that this cmdlet deletes.


To find the history ID of a command, use the Get-History cmdlet.`, `Int32[]`),
        new Parameter(`Newest`, `Indicates that this cmdlet deletes the newest entries in the history. By default, Clear-History deletes the oldest entries in the 
history.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes entries from the command history.`, `Clear-History [[-Count] <Int32>] [-CommandLine <String[]>] [-Confirm] [-Newest] [-WhatIf] [<CommonParameters>]

Clear-History [[-Id] <Int32[]>] [[-Count] <Int32>] [-Confirm] [-Newest] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-Item`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies, as a string array, items to exclude. The value of this parameter qualifies the Path parameter. Enter a path element or 
pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when the cmdlet gets the objects, rather than having Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Force`, `Indicates that the cmdlet clears items that cannot otherwise be changed, such as read- only aliases. The cmdlet cannot clear 
constants. Implementation varies from provider to provider. For more information, see about_Providers. The cmdlet cannot override 
security restrictions, even when the Force parameter is used.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies, as a string array, items to that this cmdlet clears. The value of this parameter qualifies the Path parameter. Enter a 
path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the path to the items being cleared. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. 
No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell wps_2 not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the path to the items being cleared. Wildcards are permitted. This parameter is required, but the parameter name (Path) is 
optional.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Clears the contents of an item, but does not delete the item.`, `Clear-Item [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] 
-LiteralPath <String[]> [-UseTransaction] [-WhatIf] [<CommonParameters>]

Clear-Item [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-ItemProperty`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes. The value of this parameter qualifies the Path parameter. 
Enter a path element or pattern, such as .txt or s . Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when the cmdlet gets the objects rather than having Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Force`, `Indicates that this cmdlet deletes properties from items that cannot otherwise be accessed by the user. Implementation varies from 
provider to provider. For more information, see about_Providers.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet clears. The value of this parameter qualifies the Path parameter. 
Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the path to the property being cleared. Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. 
No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the property to be cleared, such as the name of a registry value. Wildcards are not permitted.`, `String`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to the property being cleared. Wildcards are permitted.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Clears the value of a property but does not delete the property.`, `Clear-ItemProperty [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] 
[-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Clear-ItemProperty [-Path] <String[]> [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-KdsCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-RecycleBin`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`DriveLetter`, ``, `String[]`),
        new Parameter(`Force`, ``, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], ``, `Clear-RecycleBin [[-DriveLetter] <String[]>] [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-Tpm`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-UevAppxPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-UevConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-Variable`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Exclude`, `Specifies an array of items that this cmdlet omits in the operation. The value of this parameter qualifies the Name parameter. Enter 
a name element or pattern, such as "s*". Wildcards are permitted.`, `String[]`),
        new Parameter(`Force`, `Allows the cmdlet to clear a variable even if it is read-only. Even using the Force parameter, the cmdlet cannot clear constants.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies an array of items that this cmdlet includes in the operation. The value of this parameter qualifies the Name parameter. 
Enter a name element or pattern, such as "s*". Wildcards are permitted.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the variable to be cleared. Wildcards are permitted. This parameter is required, but the parameter name 
("Name") is optional.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Scope`, `Specifies the scope in which this alias is valid.


The acceptable values for this parameter are:


- Global


- Local


- Script




You can also use a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its 
parent). Local is the default. For more information, see about_Scopes.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes the value of a variable.`, `Clear-Variable [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] [-PassThru] [-Scope <String>] 
[-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Clear-WindowsCorruptMountPoint`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Compare-Object`, [
        new Parameter(`CaseSensitive`, `Indicates that comparisons should be case-sensitive.`, `SwitchParameter`),
        new Parameter(`Culture`, `Specifies the culture to use for comparisons.`, `String`),
        new Parameter(`DifferenceObject`, `Specifies the objects that are compared to the reference objects.`, `PSObject[]`),
        new Parameter(`ExcludeDifferent`, `Indicates that this cmdlet displays only the characteristics of compared objects that are equal.`, `SwitchParameter`),
        new Parameter(`IncludeEqual`, `Indicates that this cmdlet displays characteristics of compared objects that are equal. By default, only characteristics that differ 
between the reference and difference objects are displayed.`, `SwitchParameter`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Property`, `Specifies an array of properties of the reference and difference objects to compare.`, `Object[]`),
        new Parameter(`ReferenceObject`, `Specifies an array of objects used as a reference for comparison.`, `PSObject[]`),
        new Parameter(`SyncWindow`, `Specifies the number of adjacent objects that this cmdlet inspects while looking for a match in a collection of objects. This cmdlet 
examines adjacent objects when it does not find the object in the same position in a collection. The default value is 
[Int32]::MaxValue, which means that this cmdlet examines the entire object collection.`, `Int32`),
    ], `Compares two sets of objects.`, `Compare-Object [-ReferenceObject] <PSObject[]> [-DifferenceObject] <PSObject[]> [-CaseSensitive] [-Culture <String>] 
[-ExcludeDifferent] [-IncludeEqual] [-PassThru] [-Property <Object[]>] [-SyncWindow <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Complete-BitsTransfer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Complete-DtcDiagnosticTransaction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Complete-Transaction`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Commits the active transaction.`, `Complete-Transaction [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Confirm-SecureBootUEFI`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Connect-PSSession`, [
        new Parameter(`AllowRedirection`, `Indicates that this cmdlet allows redirection of this connection to an alternate URI.


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different URI. By 
default, Windows PowerShell does not redirect connections, but you can use this parameter to allow it to redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount session option 
value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the MaximumConnectionRedirectionCount property 
of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
        new Parameter(`ApplicationName`, `Specifies the name of an application. This cmdlet connects only to sessions that use the specified application.


Enter the application name segment of the connection URI. For example, in the following connection URI, the application name is 
WSMan: "http://localhost:5985/WSMAN". The application name of a session is stored in the Runspace.ConnectionInfo.AppName property of 
the session.


The value of this parameter is used to select and filter sessions. It does not change the application that the session uses.`, `String`),
        new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate user credentials in the command to reconnect to the disconnected session. The 
acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


For information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the Microsoft Developer 
Network (MSDN) library.

Caution: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to a remote 
computer to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a 
remote network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
        new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to connect to the disconnected session. 
Enter the certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts. They do not work 
with domain accounts.


To get a certificate thumbprint, use a Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
        new Parameter(`ComputerName`, `Specifies the computers on which the disconnected sessions are stored. Sessions are stored on the computer that is at the server-side 
or receiving end of a connection. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one computer. Wildcard characters are not permitted. To 
specify the local computer, type the computer name, localhost, or a dot (.)`, `String[]`),
        new Parameter(`ConfigurationName`, `Connects only to sessions that use the specified session configuration.


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the configuration 
name, the following schema URI is prepended: http://schemas.microsoft.com/powershell. The configuration name of a session is stored 
in the ConfigurationName property of the session.


The value of this parameter is used to select and filter sessions. It does not change the session configuration that the session uses.


For more information about session configurations, see about_Session_Configurations.`, `String`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`ConnectionUri`, `Specifies the URIs of the connection endpoints for the disconnected sessions.


The URI must be fully qualified. The format of this string is as follows:


"<Transport>://<ComputerName>:<Port>/<ApplicationName>"


The default value is as follows:


"http://localhost:5985/WSMAN"


If you do not specify a connection URI, you can use the UseSSL and Port parameters to specify the connection URI values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport segment, but 
do not specify a port, the session is created with standards ports: 80 for HTTP and 443 for HTTPS. To use the default ports for 
Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection unless you use 
the AllowRedirection parameter in the command.`, `Uri[]`),
        new Parameter(`Credential`, `Specifies a user account that has permission to connect to the disconnected session. The default is the current user.


Type a user name, such as User01 or Domain01\\User01. Or, enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
        new Parameter(`Id`, `Specifies the IDs of the disconnected sessions. The Id parameter works only when the disconnected session was previously connected to 
the current session.


This parameter is valid, but not effective, when the session is stored on the local computer, but was not connected to the current 
session.`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies the instance IDs of the disconnected sessions.


The instance ID is a GUID that uniquely identifies a PSSession on a local or remote computer.


The instance ID is stored in the InstanceID property of the PSSession .`, `Guid[]`),
        new Parameter(`Name`, `Specifies the friendly names of the disconnected sessions.`, `String[]`),
        new Parameter(`Port`, `Specifies the network port on the remote computer that is used to reconnect to the session. To connect to a remote computer, the 
remote computer must be listening on the port that the connection uses. The default ports are 5985, which is the WinRM port for HTTP, 
and 5986, which is the WinRM port for HTTPS.


Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that port. To configure the 
listener, type the following two commands at the Windows PowerShell prompt:


"Remove-Item -Path WSMan:\\Localhost\\listener\\listener* -Recurse"


"New-Item -Path WSMan:\\Localhost\\listener -Transport http -Address * -Port <port-number>"


Do not use the Port parameter unless you must. The port that is set in the command applies to all computers or sessions on which the 
command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
        new Parameter(`Session`, `Specifies the disconnected sessions. Enter a variable that contains the PSSession objects or a command that creates or gets the 
PSSession objects, such as a Get-PSSession command.`, `PSSession[]`),
        new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is set. Otherwise, 
the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference variable and in the 
session configuration. However, they do not take precedence over maximum values, quotas or limits set in the session configuration.


For a description of the session options that includes the default values, see New-PSSessionOption. For information about the 
$PSSessionOption preference variable, see about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248). For more 
information about session configurations, see about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this parameter or 
enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to connect to the disconnected session. By default, SSL is 
not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter is an additional protection 
that sends the data across an HTTPS connection instead of an HTTP connection.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Reconnects to disconnected sessions.`, `Connect-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Confirm] [-Credential <PSCredential>] [-Name <String[]>] [-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]

Connect-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Confirm] [-Credential <PSCredential>] -InstanceId <Guid[]> [-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]

Connect-PSSession [-ComputerName] <String[]> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Confirm] [-Credential <PSCredential>] [-Name <String[]>] [-Port <Int32>] [-SessionOption <PSSessionOption>] [-ThrottleLimit 
<Int32>] [-UseSSL] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-ComputerName] <String[]> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Confirm] [-Credential <PSCredential>] -InstanceId <Guid[]> [-Port <Int32>] [-SessionOption <PSSessionOption>] [-ThrottleLimit 
<Int32>] [-UseSSL] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-Id] <Int32[]> [-Confirm] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-Confirm] -InstanceId <Guid[]> [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-Confirm] -Name <String[]> [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-Session] <PSSession[]> [-Confirm] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Connect-WSMan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertFrom-CIPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertFrom-Csv`, [
        new Parameter(`Delimiter`, `Specifies the delimiter that separates the property values in the CSV strings. The default is a comma (,). Enter a character, such as 
a colon (:). To specify a semicolon (;), enclose it in quotation marks.


If you specify a character other than the delimiter used in the CSV strings, ConvertFrom-CSV cannot create objects from the CSV 
strings. Instead, it returns the strings.`, `Char`),
        new Parameter(`Header`, `Specifies an alternate column header row for the imported string. The column header determines the names of the properties of the 
object that ConvertFrom-CSV creates.


Enter a comma-separated list of the column headers. Enclose each item in quotation marks (single or double). Do not enclose the 
header string in quotation marks. If you enter fewer column headers than there are columns, the remaining columns will have no 
headers. If you enter more headers than there are columns, the extra headers are ignored.


When using the Header parameter, omit the column header string from the CSV strings. Otherwise, this cmdlet  creates an extra object 
from the items in the header row.`, `String[]`),
        new Parameter(`InputObject`, `Specifies the CSV strings to be converted to objects. Enter a variable that contains the CSV strings or type a command or expression 
that gets the CSV strings. You can also pipe the CSV strings to ConvertFrom-CSV .`, `PSObject[]`),
        new Parameter(`UseCulture`, `Indicates that this cmdlet uses the list separator for the current culture as the string delimiter. The default is a comma (,).


To find the list separator for a culture, use the following command: "(Get-Culture).TextInfo.ListSeparator". If you specify a 
character other than the delimiter used in the CSV strings, ConvertFrom-CSV cannot create objects from the CSV strings. Instead, it 
returns the strings.`, `SwitchParameter`),
    ], `Converts object properties in comma-separated value (CSV) format into CSV versions of the original objects.`, `ConvertFrom-Csv [-InputObject] <PSObject[]> [[-Delimiter] <Char>] [-Header <String[]>] [<CommonParameters>]

ConvertFrom-Csv [-InputObject] <PSObject[]> [-Header <String[]>] -UseCulture [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertFrom-Json`, [
        new Parameter(`InputObject`, `Specifies the JSON strings to convert to JSON objects. Enter a variable that contains the string, or type a command or expression 
that gets the string. You can also pipe a string to ConvertFrom-Json .


The InputObject parameter is required, but its value can be an empty string. When the input object is an empty string, 
ConvertFrom-Json does not generate any output. The InputObject value cannot be $Null.`, `String`),
    ], `Converts a JSON-formatted string to a custom object.`, `ConvertFrom-Json [-InputObject] <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertFrom-SecureString`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertFrom-String`, [
        new Parameter(`Delimiter`, `Specifies a regular expression that identifies the boundary between elements. Elements that are created by the split become 
properties in the resulting object. The delimiter is ultimately used in a call to 
System.Text.RegularExpressions.RegularExpression.Split().`, `String`),
        new Parameter(`IncludeExtent`, `Indicates that this cmdlet includes an extent text property that is removed by default.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies strings received from the pipeline, or a variable that contains a string object.`, `String`),
        new Parameter(`PropertyNames`, `Specifies an array of property names to which to assign split values in the resulting object. Every line of text that you split or 
parse generates elements that represent property values. If the element is the result of a capture group, and that capture group is 
named (for example, (?<name>) or (?'name') ), then the name of that capture group is assigned to the property.


If you provide any elements in the PropertyName array, those names are assigned to properties that have not yet been named.


If you provide more property names than there are fields, Windows PowerShell ignores the extra property names. If you do not specify 
enough property names to name all fields, Windows PowerShell automatically assigns numerical property names to any properties that 
are not named: P1, P2, etc.`, `String[]`),
        new Parameter(`TemplateContent`, `Specifies an expression, or an expression saved as a variable, that describes the properties to which this cmdlet assigns strings. 
The syntax of a template field specification is the following: {[optional-typecast]name(sequence-spec, for example 
\*):example-value}. An example is {PersonInfo*:{Name:Patti Fuller}.`, `String[]`),
        new Parameter(`TemplateFile`, `Specifies a file, as an array, that contains a template for the desired parsing of the string. In the template file, properties and 
their values are enclosed in brackets, as shown in the following example. If a property, such as the Name property and its associated 
other properties, appears multiple times, you can add an asterisk (\*) to indicate that this results in multiple records. This avoids 
extracting multiple properties into a single record.




{Name*:David Chew}




{City:Redmond}, {State:WA}



{Name*:Evan Narvaez}    {Name*:Antonio Moreno}




{City:Issaquah}, {State:WA}`, `String[]`),
        new Parameter(`UpdateTemplate`, `Indicates that this cmdlet saves the results of a learning algorithm into a comment in the template file. This makes the algorithm 
learning process faster. To use this parameter, you must also specify a template file with the TemplateFile parameter.`, `SwitchParameter`),
    ], `Extracts and parses structured properties from string content.`, `ConvertFrom-String [-InputObject] <String> [-Delimiter <String>] [-PropertyNames <String[]>] [<CommonParameters>]

ConvertFrom-String [-InputObject] <String> [-IncludeExtent] [-TemplateContent <String[]>] [-TemplateFile <String[]>] 
[-UpdateTemplate] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertFrom-StringData`, [
        new Parameter(`StringData`, `Specifies the string to be converted. You can use this parameter or pipe a string to ConvertFrom-StringData . The parameter name is 
optional.


The value of this parameter must be a string that is enclosed in single quotation marks, a string that is enclosed in double 
quotation marks, or a here-string that contains one or more key/value pairs. Each key/value pair must be on a separate line, or each 
pair must be separated by newline characters ("n).


You can include comments in the string, but the comments cannot be on the same line as a key/value pair. The comments are not 
included in the hash table.


A here-string is a string consisting of one or more lines within which quotation marks are interpreted literally. For more 
information, see about_Quoting_Rules.`, `String`),
    ], `Converts a string containing one or more key and value pairs to a hash table.`, `ConvertFrom-StringData [-StringData] <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Convert-Path`, [
        new Parameter(`LiteralPath`, `Specifies, as a string array, the path to be converted. The value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the Windows PowerShell path to be converted.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Converts a path from a Windows PowerShell path to a Windows PowerShell provider path.`, `Convert-Path -LiteralPath <String[]> [-UseTransaction] [<CommonParameters>]

Convert-Path [-Path] <String[]> [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Convert-String`, [
        new Parameter(`Example`, `Specifies a list of examples of the target format. Specify pairs separated by the equal (=) sign, with the source pattern on the left 
and the target pattern on the right, as in the following example:


"Patti Fuller = Fuller, P."


Alternatively, specify a list of hash tables that contain Before and After properties.`, `System.Collections.Generic.List^1[System.Management.Automation.PSObject]`),
        new Parameter(`InputObject`, `Specifies a string to format.`, `String`),
    ], `Formats a string to match examples.`, `Convert-String [-Example <System.Collections.Generic.List1[System.Management.Automation.PSObject]>] -InputObject <String> 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertTo-Csv`, [
        new Parameter(`Delimiter`, `Specifies a delimiter to separate the property values. The default is a comma (,). Enter a character, such as a colon (:).


To specify a semicolon (;), enclose it in quotation marks. Otherwise, it will be interpreted as the command delimiter.`, `Char`),
        new Parameter(`InputObject`, `Specifies the objects to export as CSV strings. Enter a variable that contains the objects or type a command or expression that gets 
the objects. You can also pipe objects to ConvertTo-CSV .`, `PSObject`),
        new Parameter(`NoTypeInformation`, `Omits the type information header from the output. By default, the string in the output contains #TYPE followed by the 
fully-qualified name of the object type.`, `SwitchParameter`),
        new Parameter(`UseCulture`, `Uses the list separator for the current culture as the data delimiter. The default is a comma (,).


This parameter is very useful in scripts that are being distributed to users worldwide. To find the list separator for a culture, use 
the following command: "(Get-Culture).TextInfo.ListSeparator".`, `SwitchParameter`),
    ], `Converts objects into a series of comma-separated value (CSV) variable-length strings.`, `ConvertTo-Csv [-InputObject] <PSObject> [[-Delimiter] <Char>] [-NoTypeInformation] [<CommonParameters>]

ConvertTo-Csv [-InputObject] <PSObject> [-NoTypeInformation] [-UseCulture] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertTo-Html`, [
        new Parameter(`As`, `Determines whether the object is formatted as a table or a list. Valid values are Table and List. The default value is Table.


The Table value generates an HTML table that resembles the Windows PowerShell table format. The header row displays the property 
names. Each table row represents an object and displays the object's values for each property.


The List value generates a two-column HTML table for each object that resembles the Windows PowerShell list format. The first column 
displays the property name; the second column displays the property value.`, `String`),
        new Parameter(`Body`, `Specifies the text to add after the opening <BODY> tag. By default, there is no text in that position.`, `String[]`),
        new Parameter(`CssUri`, `Specifies the Uniform Resource Identifier (URI) of the cascading style sheet (CSS) that is applied to the HTML file. The URI is 
included in a style sheet link in the output.`, `Uri`),
        new Parameter(`Fragment`, `Generates only an HTML table. The HTML, HEAD, TITLE, and BODY tags are omitted.`, `SwitchParameter`),
        new Parameter(`Head`, `Specifies the content of the <HEAD> tag. The default is <title>HTML TABLE</title>. If you use the Head parameter, the Title parameter 
is ignored.`, `String[]`),
        new Parameter(`InputObject`, `Specifies the objects to be represented in HTML. Enter a variable that contains the objects or type a command or expression that gets 
the objects.


If you use this parameter to submit multiple objects, such as all of the services on a computer, ConvertTo-Html creates a table that 
displays the properties of a collection or of an array of objects ( System.Object []). To create a table of the individual objects, 
use the pipeline operator to pipe the objects to ConvertTo-Html .`, `PSObject`),
        new Parameter(`PostContent`, `Specifies text to add after the closing </TABLE> tag. By default, there is no text in that position.`, `String[]`),
        new Parameter(`PreContent`, `Specifies text to add before the opening <TABLE> tag. By default, there is no text in that position.`, `String[]`),
        new Parameter(`Property`, `Includes the specified properties of the objects in the HTML. The value of the Property parameter can be a new calculated property. 
To create a calculated property, use a hash table. Valid keys are:


- Label <string> (unlike with Select-Object or Format-Table, the Name key is not supported)


- Expression <string> or <script block>`, `Object[]`),
        new Parameter(`Title`, `Specifies a title for the HTML file, that is, the text that appears between the <TITLE> tags.`, `String`),
    ], `Converts Microsoft .NET Framework objects into HTML that can be displayed in a Web browser.`, `ConvertTo-Html [[-Property] <Object[]>] [[-Head] <String[]>] [[-Title] <String>] [[-Body] <String[]>] [-As {Table | List}] [-CssUri 
<Uri>] [-InputObject <PSObject>] [-PostContent <String[]>] [-PreContent <String[]>] [<CommonParameters>]

ConvertTo-Html [[-Property] <Object[]>] [-As {Table | List}] [-Fragment] [-InputObject <PSObject>] [-PostContent <String[]>] 
[-PreContent <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertTo-Json`, [
        new Parameter(`Compress`, `Omits white space and indented formatting in the output string.`, `SwitchParameter`),
        new Parameter(`Depth`, `Specifies how many levels of contained objects are included in the JSON representation. The default value is 2.`, `Int32`),
        new Parameter(`InputObject`, `Specifies the objects to convert to JSON format. Enter a variable that contains the objects, or type a command or expression that 
gets the objects. You can also pipe an object to ConvertTo-Json .


The InputObject parameter is required, but its value can be null ($Null) or an empty string. When the input object is $Null, 
ConvertTo-Json does not generate any output. When the input object is an empty string, ConvertTo-Json returns an empty string.`, `Object`),
    ], `Converts an object to a JSON-formatted string.`, `ConvertTo-Json [-InputObject] <Object> [-Compress] [-Depth <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertTo-ProcessMitigationPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertTo-SecureString`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertTo-TpmOwnerAuth`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ConvertTo-Xml`, [
        new Parameter(`As`, `Determines the output format.  The acceptable values for this parameter are:


- String.  Returns a single string.  - Stream.  Returns an array of strings. - Document.  Returns an XmlDocument object.


The default value is Document.`, `String`),
        new Parameter(`Depth`, `Specifies how many levels of contained objects are included in the XML representation. The default value is 1.


For example, if the object's properties also contain objects, to save an XML representation of the properties of the contained 
objects, you must specify a depth of 2.


The default value can be overridden for the object type in the Types.ps1xml files. For more information, see about_Types.ps1xml.`, `Int32`),
        new Parameter(`InputObject`, `Specifies the object to be converted. Enter a variable that contains the objects, or type a command or expression that gets the 
objects. You can also pipe objects to ConvertTo-XML .`, `PSObject`),
        new Parameter(`NoTypeInformation`, `Omits the Type attribute from the object nodes.`, `SwitchParameter`),
    ], `Creates an XML-based representation of an object.`, `ConvertTo-Xml [-InputObject] <PSObject> [-As {Stream | String | Document}] [-Depth <Int32>] [-NoTypeInformation] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Copy-Item`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Container`, `Indicates that this cmdlet preserves container objects during the copy operation.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Destination`, `Specifies the path to the new location. To rename a copied item, include the new name in the value.`, `String`),
        new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation. Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when the cmdlet gets the objects, rather than have Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Force`, `Indicates that this cmdlet will copy items that cannot otherwise be changed, such as copying over a read-only file or alias.`, `SwitchParameter`),
        new Parameter(`FromSession`, `Specifies the PSSession object from which a remote file is being copied. When you use this parameter, the Path and LiteralPath 
parameters refer to the local path on the remote machine.`, `PSSession`),
        new Parameter(`Include`, `Specifies, as a string array, only those items upon which the cmdlet will act, excluding all others.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path to the item. The value of the LiteralPath parameter is used exactly as it is typed. No characters are interpreted as 
wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows 
PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies, as a string array, the path to the items to copy.`, `String[]`),
        new Parameter(`Recurse`, `Indicates that this cmdlet performs a recursive copy.`, `SwitchParameter`),
        new Parameter(`ToSession`, `Specifies the PSSession object to which a remote file is being copied. When you use this parameter, the Path and LiteralPath 
parameters refer to the local path on the remote machine.`, `PSSession`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Copies an item from one location to another.`, `Copy-Item [[-Destination] <String>] [-Confirm] [-Container] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-FromSession <PSSession>] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-Recurse] [-ToSession <PSSession>] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]

Copy-Item [-Path] <String[]> [[-Destination] <String>] [-Confirm] [-Container] [-Credential <PSCredential>] [-Exclude <String[]>] 
[-Filter <String>] [-Force] [-FromSession <PSSession>] [-Include <String[]>] [-PassThru] [-Recurse] [-ToSession <PSSession>] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Copy-ItemProperty`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Destination`, `Specifies the path to the destination location.`, `String`),
        new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes. Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when this cmdlet gets the objects rather than having Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies, as a string array, an item or items upon which the cmdlet will act, excluding all others.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path to the item property. The value of the LiteralPath parameter is used exactly as it is typed. No characters are 
interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell 
Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the property to be copied.`, `String`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies, as a string array, the path to the property to be copied.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Copies a property and value from a specified location to another location.`, `Copy-ItemProperty [-Destination] <String> [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Copy-ItemProperty [-Path] <String[]> [-Destination] <String> [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Debug-Job`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies the ID number of a running job. To get the ID number of a job, run the Get-Job cmdlet.`, `Int32`),
        new Parameter(`InstanceId`, `Specifies the instance ID GUID of a running job. To get the InstanceId of a job, run the Get-Job cmdlet, piping the results into a 
Format- * cmdlet, as shown in the following example:


"Get-Job | Format-List -Property Id,Name,InstanceId,State"`, `Guid`),
        new Parameter(`Job`, `Specifies a running job object. The simplest way to use this parameter is to save the results of a Get-Job command that returns the 
running job that you want to debug in a variable, and then specify the variable as the value of this parameter.`, `Job`),
        new Parameter(`Name`, `Specifies a job by the friendly name of the job. When you start a job, you can specify a job name by adding the JobName parameter, in 
cmdlets such as Invoke-Command and Start-Job.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Debugs a running background, remote, or Windows PowerShell Workflow job.`, `Debug-Job [-Id] <Int32> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Job [-InstanceId] <Guid> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Job [-Job] <Job> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Job [-Name] <String> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Debug-Process`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies the process IDs of the processes to be debugged. The Id parameter name is optional.


To find the process ID of a process, type "Get-Process".`, `Int32[]`),
        new Parameter(`InputObject`, `Specifies the process objects that represent processes to be debugged. Enter a variable that contains the process objects or a 
command that gets the process objects, such as the Get-Process cmdlet. You can also pipe process objects to this cmdlet.`, `Process[]`),
        new Parameter(`Name`, `Specifies the names of the processes to be debugged. If there is more than one process with the same name, this cmdlet attaches a 
debugger to all processes with that name.  The Name parameter is optional.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Debugs one or more processes running on the local computer.`, `Debug-Process [-Id] <Int32[]> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Process [-Confirm] -InputObject <Process[]> [-WhatIf] [<CommonParameters>]

Debug-Process [-Name] <String[]> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Debug-Runspace`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies the ID number of a runspace. You can run Get-Runspace to show runspace IDs.`, `Int32`),
        new Parameter(`InstanceId`, `Specifies a runspace by its instance ID, a GUID that you can show by running Get-Runspace .`, `Guid`),
        new Parameter(`Name`, `Specifies a runspace by its name. You can run Get-Runspace to show the names of runspaces.`, `String`),
        new Parameter(`Runspace`, `Specifies a runspace object. The simplest way to provide a value for this parameter is to specify a variable that contains the 
results of a filtered Get-Runspace command.`, `Runspace`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Starts an interactive debugging session with a runspace.`, `Debug-Runspace [-Id] <Int32> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Runspace [-InstanceId] <Guid> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Runspace [-Name] <String> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Runspace [-Runspace] <Runspace> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Delete-DeliveryOptimizationCache`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-AppBackgroundTaskDiagnosticLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-Appv`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-AppvClientConnectionGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-ComputerRestore`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Drive`, `Specifies the file system drives. Enter one or more file system drive letters, each followed by a colon and a backslash and enclosed 
in quotation marks, such as C:\ or D:\. This parameter is required.


You cannot use this cmdlet to disable System Restore on a remote network drive, even if the drive is mapped to the local computer, 
and you cannot disable System Restore on drives that are not eligible for System Restore, such as external drives.


To disable System Restore on any drive, System Restore must be disabled on the system drive, either before or concurrently.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Disables the System Restore feature on the specified file system drive.`, `Disable-ComputerRestore [-Drive] <String[]> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-JobTrigger`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-LocalUser`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-PSBreakpoint`, [
        new Parameter(`Breakpoint`, `Specifies the breakpoints to disable. Enter a variable that contains breakpoint objects or a command that gets breakpoint objects, 
such as a Get-PSBreakpoint command. You can also pipe breakpoint objects to the Disable-PSBreakpoint cmdlet.`, `Breakpoint[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Id`, `Disables the breakpoints with the specified breakpoint IDs. Enter the IDs or a variable that contains the IDs. You cannot pipe IDs to 
Disable-PSBreakpoint .`, `Int32[]`),
        new Parameter(`PassThru`, `Returns an object representing the enabled breakpoints. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Disables the breakpoints in the current console.`, `Disable-PSBreakpoint [-Breakpoint] <Breakpoint[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Disable-PSBreakpoint [-Id] <Int32[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-PSRemoting`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Prevents remote users from running commands on the local computer.`, `Disable-PSRemoting [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-PSSessionConfiguration`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies an array of names of session configurations to disable. Enter one or more configuration names. Wildcard characters are 
permitted. You can also pipe a string that contains a configuration name or a session configuration object to 
Disable-PSSessionConfiguration .


If you omit this parameter, Disable-PSSessionConfiguration disables the Microsoft.PowerShell session configuration.`, `String[]`),
        new Parameter(`NoServiceRestart`, `@{Text=}`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Disables session configurations on the local computer.`, `Disable-PSSessionConfiguration [[-Name] <String[]>] [-Confirm] [-Force] [-NoServiceRestart] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-RunspaceDebug`, [
        new Parameter(`AppDomainName`, `@{Text=}`, `String[]`),
        new Parameter(`ProcessName`, `@{Text=}`, `String`),
        new Parameter(`Runspace`, `@{Text=}`, `Runspace[]`),
        new Parameter(`RunspaceId`, `@{Text=}`, `Int32[]`),
        new Parameter(`RunspaceInstanceId`, `@{Text=}`, `Guid[]`),
        new Parameter(`RunspaceName`, `@{Text=}`, `String[]`),
    ], `Disables debugging on one or more runspaces, and releases any pending debugger stop.`, `Disable-RunspaceDebug [[-ProcessName] <String>] [[-AppDomainName] <String[]>] [<CommonParameters>]

Disable-RunspaceDebug [-Runspace] <Runspace[]> [<CommonParameters>]

Disable-RunspaceDebug [-RunspaceId] <Int32[]> [<CommonParameters>]

Disable-RunspaceDebug [-RunspaceInstanceId] <Guid[]> [<CommonParameters>]

Disable-RunspaceDebug [[-RunspaceName] <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-ScheduledJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-TlsCipherSuite`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-TlsEccCurve`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-TlsSessionTicketKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-TpmAutoProvisioning`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-Uev`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-UevAppxPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-UevTemplate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-WindowsErrorReporting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-WindowsOptionalFeature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disable-WSManCredSSP`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disconnect-PSSession`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies an array of IDs of sessions that this cmdlet disconnects. Type one or more IDs, separated by commas, or use the range 
operator (..) to specify a range of IDs.


To get the ID of a session, use the Get-PSSession cmdlet. The instance ID is stored in the ID property of the session.`, `Int32[]`),
        new Parameter(`IdleTimeoutSec`, `Changes the idle time-out value of the disconnected PSSession . Enter a value in seconds. The minimum value is 60 (1 minute).


The idle time-out determines how long the disconnected PSSession is maintained on the remote computer. When the time-out expires, the 
PSSession is deleted.


Disconnected PSSession objects are considered to be idle from the moment that they are disconnected, even if commands are running in 
the disconnected session.


The default value for the idle time-out of a session is set by the value of the IdleTimeoutMs property of the session configuration. 
The default value is 7200000 milliseconds (2 hours).


The value of this parameter takes precedence over the value of the IdleTimeout property of the $PSSessionOption preference variable 
and the default idle time-out value in the session configuration. However, this value cannot exceed the value of the MaxIdleTimeoutMs 
property of the session configuration. The default value of MaxIdleTimeoutMs is 12 hours (43200000 milliseconds).`, `Int32`),
        new Parameter(`InstanceId`, `Specifies an array of GUIDs of sessions that this cmdlet disconnects.


The instance ID is a GUID that uniquely identifies a session on a local or remote computer. The instance ID is unique, even across 
multiple sessions on multiple computers.


To get the instance ID of a session, use Get-PSSession . The instance ID is stored in the InstanceID property of the session.`, `Guid[]`),
        new Parameter(`Name`, `Specifies an array of friendly names of sessions that this cmdlet disconnects. Wildcard characters are permitted.


To get the friendly name of a session, use Get-PSSession . The friendly name is stored in the Name property of the session.`, `String[]`),
        new Parameter(`OutputBufferingMode`, `Specifies how command output is managed in the disconnected session when the output buffer is full. The default value is Block.


If the command in the disconnected session is returning output and the output buffer fills, the value of this parameter effectively 
determines whether the command continues to run while the session is disconnected. A value of Block suspends the command until the 
session is reconnected. A value of Drop allows the command to complete, although data might be lost. When using the Drop value, 
redirect the command output to a file on disk.


The acceptable values for this parameter are:


- Block. When the output buffer is full, execution is suspended until the buffer is clear.


- Drop. When the output buffer is full, execution continues. As new output is saved, the oldest output is discarded.


- None. No output buffering mode is specified. The value of the OutputBufferingMode property of the session configuration is used for 
the disconnected session.`, `OutputBufferingMode`),
        new Parameter(`Session`, `Specifies an array of sessions. Enter PSSession objects, such as those that the New-PSSession cmdlet returns. You can also pipe a 
PSSession object to Disconnect-PSSession. Get-PSSession can get all PSSession objects that end at a remote computer. These include 
PSSession objects that are disconnected and PSSession objects that are connected to other sessions on other computers. 
Disconnect-PSSession disconnects only PSSession that are connected to the current session. If you pipe other PSSession objects to 
Disconnect-PSSession , the Disconnect-PSSession command fails.`, `PSSession[]`),
        new Parameter(`ThrottleLimit`, `Sets the throttle limit for the Disconnect-PSSession command.


The throttle limit is the maximum number of concurrent connections that can be established to run this command. If you omit this 
parameter or enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Disconnects from a session.`, `Disconnect-PSSession [-Id] <Int32[]> [-Confirm] [-IdleTimeoutSec <Int32>] [-OutputBufferingMode {None | Drop | Block}] 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Disconnect-PSSession [-Confirm] [-IdleTimeoutSec <Int32>] -InstanceId <Guid[]> [-OutputBufferingMode {None | Drop | Block}] 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Disconnect-PSSession [-Confirm] [-IdleTimeoutSec <Int32>] -Name <String[]> [-OutputBufferingMode {None | Drop | Block}] 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Disconnect-PSSession [-Session] <PSSession[]> [-Confirm] [-IdleTimeoutSec <Int32>] [-OutputBufferingMode {None | Drop | Block}] 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Disconnect-WSMan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Dismount-AppxVolume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Dismount-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Edit-CIPolicyRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-AppBackgroundTaskDiagnosticLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-Appv`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-AppvClientConnectionGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-ComputerRestore`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Drive`, `Specifies the file system drives. Enter one or more file system drive letters, each followed by a colon and a backslash and enclosed 
in quotation marks, such as C:\ or D:\. This parameter is required.


You cannot use this cmdlet to enable System Restore on a remote network drive, even if the drive is mapped to the local computer, and 
you cannot enable System Restore on drives that are not eligible for System Restore, such as external drives.


To enable System Restore on any drive, System Restore must be enabled on the system drive, either before or concurrently.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Enables the System Restore feature on the specified file system drive.`, `Enable-ComputerRestore [-Drive] <String[]> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-JobTrigger`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-LocalUser`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-PSBreakpoint`, [
        new Parameter(`Breakpoint`, `Specifies the breakpoints to enable. Enter a variable that contains breakpoint objects or a command that gets breakpoint objects, 
such as a Get-PSBreakpoint command. You can also pipe breakpoint objects to Enable-PSBreakpoint .`, `Breakpoint[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies breakpoint IDs that this cmdlet enables. The default value is all breakpoints. Enter the IDs or a variable that contains 
the IDs. You cannot use the pipeline to send IDs to Enable-PSBreakpoint . To find the ID of a breakpoint, use the Get-PSBreakpoint 
cmdlet.`, `Int32[]`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Enables the breakpoints in the current console.`, `Enable-PSBreakpoint [-Breakpoint] <Breakpoint[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Enable-PSBreakpoint [-Id] <Int32[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-PSRemoting`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`SkipNetworkProfileCheck`, `Indicates that this cmdlet enables remoting on client versions of the Windows operating system when the computer is on a public 
network. This parameter enables a firewall rule for public networks that allows remote access only from computers in the same local 
subnet.


This parameter does not affect server versions of the Windows operating system, which, by default, have a local subnet firewall rule 
for public networks. If the local subnet firewall rule is disabled on a server version, Enable-PSRemoting re-enables it, regardless 
of the value of this parameter.


To remove the local subnet restriction and enable remote access from all locations on public networks, use the Set-NetFirewallRule 
cmdlet in the NetSecurity module.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Configures the computer to receive remote commands.`, `Enable-PSRemoting [-Confirm] [-Force] [-SkipNetworkProfileCheck] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-PSSessionConfiguration`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Indicates that the cmdlet does not prompt you for confirmation, and restarts the WinRM service without prompting. Restarting the 
service makes the configuration change effective.


To prevent a restart and suppress the restart prompt, use the NoServiceRestart parameter.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies the names of session configurations to enable. Enter one or more configuration names. Wildcard characters are permitted.


You can also pipe a string that contains a configuration name or a session configuration object to Enable-PSSessionConfiguration .


If you omit this parameter, Enable-PSSessionConfiguration enables the Microsoft.PowerShell session configuration.`, `String[]`),
        new Parameter(`NoServiceRestart`, `Indicates that the cmdlet does not restart the service.`, `SwitchParameter`),
        new Parameter(`SecurityDescriptorSddl`, `Specifies a security descriptor with which this cmdlet replaces the security descriptor on the session configuration.


If you omit this parameter, Enable-PSSessionConfiguration only deletes the deny all item from the security descriptor.`, `String`),
        new Parameter(`SkipNetworkProfileCheck`, `Indicates that this cmdlet enables the session configuration when the computer is on a public network. This parameter enables a 
firewall rule for public networks that allows remote access only from computers in the same local subnet. By default, 
Enable-PSSessionConfiguration fails on a public network.


This parameter is designed for client versions of the Windows operating system. By default, server versions of the Windows operating 
system have a local subnet firewall rule for public networks. However, if the local subnet firewall rule is disabled on a server 
version of the Windows operating system, this parameter re-enables it.


To remove the local subnet restriction and enable remote access from all locations on public networks, use the Set-NetFirewallRule 
cmdlet in the NetSecurity module. For more information, see Enable-PSRemoting.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Enables the session configurations on the local computer.`, `Enable-PSSessionConfiguration [[-Name] <String[]>] [-Confirm] [-Force] [-NoServiceRestart] [-SecurityDescriptorSddl <String>] 
[-SkipNetworkProfileCheck] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-RunspaceDebug`, [
        new Parameter(`AppDomainName`, `@{Text=}`, `String[]`),
        new Parameter(`BreakAll`, `@{Text=}`, `SwitchParameter`),
        new Parameter(`ProcessName`, `@{Text=}`, `String`),
        new Parameter(`Runspace`, `@{Text=}`, `Runspace[]`),
        new Parameter(`RunspaceId`, `@{Text=}`, `Int32[]`),
        new Parameter(`RunspaceInstanceId`, `@{Text=}`, `Guid[]`),
        new Parameter(`RunspaceName`, `@{Text=}`, `String[]`),
    ], `Enables debugging on runspaces where any breakpoint is preserved until a debugger is attached.`, `Enable-RunspaceDebug [[-ProcessName] <String>] [[-AppDomainName] <String[]>] [<CommonParameters>]

Enable-RunspaceDebug [[-RunspaceName] <String[]>] [[-BreakAll]] [<CommonParameters>]

Enable-RunspaceDebug [-Runspace] <Runspace[]> [[-BreakAll]] [<CommonParameters>]

Enable-RunspaceDebug [-RunspaceId] <Int32[]> [[-BreakAll]] [<CommonParameters>]

Enable-RunspaceDebug [-RunspaceInstanceId] <Guid[]> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-ScheduledJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-TlsCipherSuite`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-TlsEccCurve`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-TlsSessionTicketKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-TpmAutoProvisioning`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-Uev`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-UevAppxPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-UevTemplate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-WindowsErrorReporting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-WindowsOptionalFeature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enable-WSManCredSSP`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enter-PSHostProcess`, [
        new Parameter(`AppDomainName`, `@{Text=}`, `String`),
        new Parameter(`HostProcessInfo`, `@{Text=}`, `PSHostProcessInfo`),
        new Parameter(`Id`, `Specifies a process by the process ID. To get a process ID, run the Get-Process cmdlet.`, `Int32`),
        new Parameter(`Name`, `Specifies a process by the process name. To get a process name, run the Get-Process cmdlet. You can also get process names from the 
Properties dialog box of a process in Task Manager.`, `String`),
        new Parameter(`Process`, `Specifies a process by the process object. The simplest way to use this parameter is to save the results of a Get-Process command 
that returns process that you want to enter in a variable, and then specify the variable as the value of this parameter.`, `Process`),
    ], `Connects to and enters into an interactive session with a local process.`, `Enter-PSHostProcess [-HostProcessInfo] <PSHostProcessInfo> [[-AppDomainName] <String>] [<CommonParameters>]

Enter-PSHostProcess [-Id] <Int32> [[-AppDomainName] <String>] [<CommonParameters>]

Enter-PSHostProcess [-Name] <String> [[-AppDomainName] <String>] [<CommonParameters>]

Enter-PSHostProcess [-Process] <Process> [[-AppDomainName] <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Enter-PSSession`, [
        new Parameter(`AllowRedirection`, `Allows redirection of this connection to an alternate Uniform Resource Identifier (URI). By default, redirection is not allowed.


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different URI. By 
default, Windows PowerShell does not redirect connections, but you can use this parameter to allow it to redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount session option 
value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the MaximumConnectionRedirectionCount property 
of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
        new Parameter(`ApplicationName`, `Specifies the application name segment of the connection URI. Use this parameter to specify the application name when you are not 
using the ConnectionURI parameter in the command.


The default value is the value of the $PSSessionApplicationName preference variable on the local computer. If this preference 
variable is not defined, the default value is WSMAN. This value is appropriate for most uses. For more information, see 
about_Preference_Variables.


The WinRM service uses the application name to select a listener to service the connection request. The value of this parameter 
should match the value of the URLPrefix property of a listener on the remote computer.`, `String`),
        new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate the user's credentials. The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


CredSSP authentication is available only in Windows Vista, Windows Server 2008, and later versions of the Windows operating system.


For information about the values of this parameter, see the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the Microsoft Developer 
Network (MSDN).

Caution: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to a remote 
computer to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a 
remote network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
        new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to perform this action. Enter the 
certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they do not work 
with domain accounts.


To get a certificate, use the Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
        new Parameter(`ComputerName`, `Specifies a computer name. This cmdlet starts an interactive session with the specified remote computer. Enter only one computer 
name. The default is the local computer.


Type the NetBIOS name, the IP address, or the fully qualified domain name of the computer. You can also pipe a computer name to 
Enter-PSSession .


To use an IP address in the value of the ComputerName parameter, the command must include the Credential parameter. Also, the 
computer must be configured for HTTPS transport or the IP address of the remote computer must be included in the WinRM TrustedHosts 
list on the local computer. For instructions for adding a computer name to the TrustedHosts list, see "How to Add a Computer to the 
Trusted Host List" in about_Remote_Troubleshooting.


Note: In Windows Vista and later versions of the Windows operating system, to include the local computer in the value of the 
ComputerName parameter, you must start Windows PowerShell with the Run as administrator option.`, `String`),
        new Parameter(`ConfigurationName`, `Specifies the session configuration that is used for the interactive session.


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the configuration 
name, the following schema URI is prepended: http://schemas.microsoft.com/powershell.


The session configuration for a session is located on the remote computer. If the specified session configuration does not exist on 
the remote computer, the command fails.


The default value is the value of the $PSSessionConfigurationName preference variable on the local computer. If this preference 
variable is not set, the default is Microsoft.PowerShell. For more information, see about_Preference_Variables.`, `String`),
        new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint for the session. The URI must be fully qualified. The format of this string is 
as follows:


<Transport>://<ComputerName>:<Port>/<ApplicationName>


The default value is as follows:


"http://localhost:5985/WSMAN"


If you do not specify a ConnectionURI , you can use the UseSSL , ComputerName , Port , and ApplicationName parameters to specify the 
ConnectionURI values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport segment, but 
do not specify a port, the session is created by using standards ports: 80 for HTTP and 443 for HTTPS. To use the default ports for 
Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection unless you use 
the AllowRedirection parameter in the command.`, `Uri`),
        new Parameter(`ContainerId`, `Specifies the ID of a container.`, `String`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as "User01", "Domain01\\User01", or "User@Domain.com", or enter a PSCredential object, such as one returned by 
the Get-Credential cmdlet.


When you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
        new Parameter(`EnableNetworkAccess`, `Indicates that this cmdlet adds an interactive security token to loopback sessions. The interactive token lets you run commands in 
the loopback session that get data from other computers. For example, you can run a command in the session that copies XML files from 
a remote computer to the local computer.


A loopback session is a PSSession that originates and ends on the same computer. To create a loopback session, omit the ComputerName 
parameter or set its value to . (dot), localhost, or the name of the local computer.


By default, loopback sessions are created by using a network token, which might not provide sufficient permission to authenticate to 
remote computers.


The EnableNetworkAccess parameter is effective only in loopback sessions. If you use EnableNetworkAccess when you create a session on 
a remote computer, the command succeeds, but the parameter is ignored.


You can also allow remote access in a loopback session by using the CredSSP value of the Authentication parameter, which delegates 
the session credentials to other computers.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies the ID of an existing session. Enter-PSSession uses the specified session for the interactive session.


To find the ID of a session, use the Get-PSSession cmdlet.`, `Int32`),
        new Parameter(`InstanceId`, `Specifies the instance ID of an existing session. Enter-PSSession uses the specified session for the interactive session.


The instance ID is a GUID. To find the instance ID of a session, use the Get-PSSession cmdlet. You can also use the Session , Name , 
or ID parameters to specify an existing session. Or, you can use the ComputerName parameter to start a temporary session.`, `Guid`),
        new Parameter(`Name`, `Specifies the friendly name of an existing session. Enter-PSSession uses the specified session for the interactive session.


If the name that you specify matches more than one session, the command fails. You can also use the Session , InstanceID , or ID 
parameters to specify an existing session. Or, you can use the ComputerName parameter to start a temporary session.


To establish a friendly name for a session, use the Name parameter of the New-PSSession cmdlet.`, `String`),
        new Parameter(`Port`, `Specifies the network port on the remote computer that is used for this command. To connect to a remote computer, the remote computer 
must be listening on the port that the connection uses. The default ports are 5985, which is the WinRM port for HTTP, and 5986, which 
is the WinRM port for HTTPS.


Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that port. Use the 
following commands to configure the listener:


"1. winrm delete winrm/config/listener?Address=*+Transport=HTTP"


"2. winrm create winrm/config/listener?Address=*+Transport=HTTP @{Port="<port-number>"}"


Do not use the Port parameter unless you must. The port setting in the command applies to all computers or sessions on which the 
command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
        new Parameter(`RunAsAdministrator`, `Indicates that the PSSession runs as administrator.`, `SwitchParameter`),
        new Parameter(`Session`, `Specifies a Windows PowerShell session ( PSSession ) to use for the interactive session. This parameter takes a session object. You 
can also use the Name , InstanceID , or ID parameters to specify a PSSession .


Enter a variable that contains a session object or a command that creates or gets a session object, such as a New-PSSession or 
Get-PSSession command. You can also pipe a session object to Enter-PSSession . You can submit only one PSSession by using this 
parameter. If you enter a variable that contains more than one PSSession , the command fails.


When you use Exit-PSSession or the EXIT keyword, the interactive session ends, but the PSSession that you created remains open and 
available for use.`, `PSSession`),
        new Parameter(`SessionOption`, `Sets advanced options for the session. Enter a SessionOption object, such as one that you create by using the New-PSSessionOption 
cmdlet, or a hash table in which the keys are session option names and the values are session option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is set. Otherwise, 
the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference variable and in the 
session configuration. However, they do not take precedence over maximum values, quotas or limits set in the session configuration.


For a description of the session options, including the default values, see New-PSSessionOption . For information about the 
$PSSessionOption preference variable, see about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248). For more 
information about session configurations, see about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
        new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer. By default, 
SSL is not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter is an additional protection 
that sends the data across an HTTPS connection instead of an HTTP connection.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
        new Parameter(`VMId`, `Specifies the ID of a virtual machine.`, `Guid`),
        new Parameter(`VMName`, `Specifies the name of a virtual machine.`, `String`),
    ], `Starts an interactive session with a remote computer.`, `Enter-PSSession [[-ConnectionUri] <Uri>] [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Credential <PSCredential>] [-EnableNetworkAccess] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Enter-PSSession [-ComputerName] <String> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Credential <PSCredential>] [-EnableNetworkAccess] [-Port <Int32>] [-SessionOption <PSSessionOption>] [-UseSSL] [<CommonParameters>]

Enter-PSSession [-VMId] <Guid> [-ConfigurationName <String>] -Credential <PSCredential> [<CommonParameters>]

Enter-PSSession [-VMName] <String> [-ConfigurationName <String>] -Credential <PSCredential> [<CommonParameters>]

Enter-PSSession [-ContainerId] <String> [-ConfigurationName <String>] [-RunAsAdministrator] [<CommonParameters>]

Enter-PSSession [[-Id] <Int32>] [<CommonParameters>]

Enter-PSSession [-InstanceId <Guid>] [<CommonParameters>]

Enter-PSSession [-Name <String>] [<CommonParameters>]

Enter-PSSession [[-Session] <PSSession>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Exit-PSHostProcess`, [], `Closes an interactive session with a local process.`, `Exit-PSHostProcess [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Exit-PSSession`, [], `Ends an interactive session with a remote computer.`, `Exit-PSSession [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Expand-WindowsCustomDataImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Expand-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-Alias`, [
        new Parameter(`Append`, `Indicates that this cmdlet appends the output to the specified file, rather than overwriting the existing contents of that file.`, `SwitchParameter`),
        new Parameter(`As`, `Specifies the output format. CSV is the default. The acceptable values for this parameter are:


- CSV. Comma-separated value (CSV) format.  - Script. Creates a Set-Alias command for each exported alias. If you name the output 
file with a .ps1 file name extension, you can run it as a script to add the aliases to any session.`, `ExportAliasFormat`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Description`, `Specifies the description of the exported file. The description appears as a comment at the top of the file, following the header 
information.`, `String`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.


Overwrites the output file, even if the read-only attribute is set on the file.


By default, Export-Alias overwrites files without warning, unless the read-only or hidden attribute is set or the NoClobber parameter 
is used in the command. The NoClobber parameter takes precedence over the Force parameter when both are used in a command.


The Force parameter cannot force Export-Alias to overwrite files with the hidden attribute.`, `SwitchParameter`),
        new Parameter(`LiteralPath`, `Specifies the path to the output file. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`Name`, `Specifies the names as an array of the aliases to export. Wildcards are permitted.


By default, Export-Alias exports all aliases in the session or scope.`, `String[]`),
        new Parameter(`NoClobber`, `Indicates that this cmdlet prevents Export-Alias from overwriting any files, even if the Force parameter is used in the command.


If the NoClobber parameter is omitted, Export-Alias will overwrite an existing file without warning, unless the read-only attribute 
is set on the file. NoClobber takes precedence over the Force parameter, which permits Export-Alias to overwrite a file with the 
read-only attribute. NoClobber does not prevent the Append parameter from adding content to an existing file.`, `SwitchParameter`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to the output file. Wildcards are permitted, but the resulting path value must resolve to a single file name.`, `String`),
        new Parameter(`Scope`, `Specifies the scope from which the aliases should be exported. The acceptable values for this parameter are:


- Global


- Local


- Script


- A number relative to the current scope (0 through the number of scopes where 0 is the current scope and 1 is its parent)




The default value is Local. For more information, see about_Scopes.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Exports information about currently defined aliases to a file.`, `Export-Alias [[-Name] <String[]>] [-Append] [-As {Csv | Script}] [-Confirm] [-Description <String>] [-Force] -LiteralPath <String> 
[-NoClobber] [-PassThru] [-Scope <String>] [-WhatIf] [<CommonParameters>]

Export-Alias [-Path] <String> [[-Name] <String[]>] [-Append] [-As {Csv | Script}] [-Confirm] [-Description <String>] [-Force] 
[-NoClobber] [-PassThru] [-Scope <String>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-BinaryMiLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-Certificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-Clixml`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Depth`, `Specifies how many levels of contained objects are included in the XML representation. The default value is 2.


The default value can be overridden for the object type in the Types.ps1xml files. For more information, see about_Types.ps1xml.`, `Int32`),
        new Parameter(`Encoding`, `Specifies the type of encoding for the target file. The acceptable values for this parameter are:


- ASCII


- UTF8


- UTF7


- UTF32


- Unicode


- BigEndianUnicode


- Default


- OEM




The default value is Unicode.`, `String`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.


Causes the cmdlet to clear the read-only attribute of the output file if necessary.  The cmdlet will attempt to reset the read-only 
attribute when the command completes.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the object to be converted. Enter a variable that contains the objects, or type a command or expression that gets the 
objects. You can also pipe objects to Export-Clixml .`, `PSObject`),
        new Parameter(`LiteralPath`, `Specifies the path to the file where the XML representation of the object will be stored. Unlike Path , the value of the LiteralPath 
parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose 
it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`NoClobber`, `Indicates that that the cmdlet does not overwrite the contents of an existing file. By default, if a file exists in the specified 
path, Export-Clixml overwrites the file without warning.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to the file where the XML representation of the object will be stored.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates an XML-based representation of an object or objects and stores it in a file.`, `Export-Clixml [-Confirm] [-Depth <Int32>] [-Encoding {Unicode | UTF7 | UTF8 | ASCII | UTF32 | BigEndianUnicode | Default | OEM}] 
[-Force] -InputObject <PSObject> -LiteralPath <String> [-NoClobber] [-WhatIf] [<CommonParameters>]

Export-Clixml [-Path] <String> [-Confirm] [-Depth <Int32>] [-Encoding {Unicode | UTF7 | UTF8 | ASCII | UTF32 | BigEndianUnicode | 
Default | OEM}] [-Force] -InputObject <PSObject> [-NoClobber] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-Console`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Indicates that this cmdlet overwrites the data in a console file without warning, even if the file has the read-only attribute. The 
read-only attribute is changed and is not reset when the command finishes.`, `SwitchParameter`),
        new Parameter(`NoClobber`, `Indicates that this cmdlet does not overwrite  an existing console file. By default, if a file occurs in the specified path, 
Export-Console overwrites the file without warning.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies a path and file name for the console file (*.psc1). Enter an optional path and name. Wildcard characters are not permitted.


If you specify only a file name, Export-Console creates a file that has that name and the .psc1 file name extension in the current 
directory.


This parameter is required unless you have opened Windows PowerShell with the PSConsoleFile parameter or exported a console file 
during the current session. It is also required when you use the NoClobber parameter to prevent the current console file from being 
overwritten.


If you omit this parameter, Export-Console overwrites the console file that was used most recently in this session. The path of the 
most recently used console file is stored in the value of the $ConsoleFileName automatic variable. For more information, see 
about_Automatic_Variables.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Exports the names of snap-ins in the current session to a console file.`, `Export-Console [[-Path] <String>] [-Confirm] [-Force] [-NoClobber] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-Counter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-Csv`, [
        new Parameter(`Append`, `Indicates that this cmdlet adds the CSV output to the end of the specified file. Without this parameter, Export-CSV replaces the file 
contents without warning.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Delimiter`, `Specifies a delimiter to separate the property values. The default is a comma (,). Enter a character, such as a colon (:). To specify 
a semicolon (;), enclose it in quotation marks.`, `Char`),
        new Parameter(`Encoding`, `Specifies the encoding for the exported CSV file. The acceptable values for this parameter are:


- Unicode


- UTF7


- UTF8


- ASCII


- UTF32


- BigEndianUnicode


- Default


- OEM




The default value is ASCII.`, `String`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the objects to export as CSV strings. Enter a variable that contains the objects or type a command or expression that gets 
the objects. You can also pipe objects to Export-CSV .`, `PSObject`),
        new Parameter(`LiteralPath`, `Specifies the path to the CSV output file. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`NoClobber`, `Indicates that this cmdlet does not overwrite of an existing file. By default, if a file exists in the specified path, Export-CSV 
overwrites the file without warning.`, `SwitchParameter`),
        new Parameter(`NoTypeInformation`, `Indicates that this cmdlet omits the type information from the CSV file. By default, the first line of the CSV file contains #TYPE 
followed by the fully-qualified name of the type of the object.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to the CSV output file. This parameter is required.`, `String`),
        new Parameter(`UseCulture`, `Indicates that this cmdlet uses the list separator for the current culture as the item delimiter. The default is a comma (,).


This parameter is very useful in scripts that are being distributed to users worldwide. To find the list separator for a culture, use 
the following command: "(Get-Culture).TextInfo.ListSeparator".`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Converts objects into a series of comma-separated (CSV) strings and saves the strings in a CSV file.`, `Export-Csv [[-Path] <String>] [[-Delimiter] <Char>] [-Append] [-Confirm] [-Encoding {Unicode | UTF7 | UTF8 | ASCII | UTF32 | 
BigEndianUnicode | Default | OEM}] [-Force] -InputObject <PSObject> [-LiteralPath <String>] [-NoClobber] [-NoTypeInformation] 
[-WhatIf] [<CommonParameters>]

Export-Csv [[-Path] <String>] [-Append] [-Confirm] [-Encoding {Unicode | UTF7 | UTF8 | ASCII | UTF32 | BigEndianUnicode | Default | 
OEM}] [-Force] -InputObject <PSObject> [-LiteralPath <String>] [-NoClobber] [-NoTypeInformation] [-UseCulture] [-WhatIf] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-FormatData`, [
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`IncludeScriptBlock`, `Indicates whether script blocks in the format data are exported.


Because script blocks contain code and can be used maliciously, they are not exported by default.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the format data objects to be exported. Enter a variable that contains the objects or a command that gets the objects, such 
as a Get-FormatData command. You can also pipe the objects from Get-FormatData to Export-FormatData .`, `ExtendedTypeDefinition[]`),
        new Parameter(`LiteralPath`, `Specifies a location for the output file. Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`NoClobber`, `Indicates that the cmdlet does not overwrite existing files. By default, Export-FormatData overwrites files without warning unless 
the file has the read-only attribute.


To direct Export-FormatData to overwrite read-only files, use the Force parameter.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies a location for the output file. Enter a path (optional) and file name with a format.ps1xml file name extension. If you omit 
the path, Export-FormatData creates the file in the current directory.


If you use a file name extension other than .ps1xml, the Update-FormatData cmdlet will not recognize the file.


If you specify an existing file, Export-FormatData overwrites the file without warning, unless the file has the read-only attribute. 
To overwrite a read-only file, use the Force parameter. To prevent files from being overwritten, use the NoClobber parameter.`, `String`),
    ], `Saves formatting data from the current session in a formatting file.`, `Export-FormatData [-Force] [-IncludeScriptBlock] -InputObject <ExtendedTypeDefinition[]> -LiteralPath <String> [-NoClobber] 
[<CommonParameters>]

Export-FormatData [-Force] [-IncludeScriptBlock] -InputObject <ExtendedTypeDefinition[]> [-NoClobber] -Path <String> 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-ModuleMember`, [
        new Parameter(`Alias`, `Specifies the aliases that are exported from the script module file. Enter the alias names. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Cmdlet`, `Specifies the cmdlets that are exported from the script module file. Enter the cmdlet names. Wildcard characters are permitted.


You cannot create cmdlets in a script module file, but you can import cmdlets from a binary module into a script module and re-export 
them from the script module.`, `String[]`),
        new Parameter(`Function`, `Specifies the functions that are exported from the script module file. Enter the function names. Wildcard characters are permitted. 
You can also pipe function name strings to Export-ModuleMember .`, `String[]`),
        new Parameter(`Variable`, `Specifies the variables that are exported from the script module file. Enter the variable names, without a dollar sign. Wildcard 
characters are permitted.`, `String[]`),
    ], `Specifies the module members that are exported.`, `Export-ModuleMember [[-Function] <String[]>] [-Alias <String[]>] [-Cmdlet <String[]>] [-Variable <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-PfxCertificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-ProvisioningPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-PSSession`, [
        new Parameter(`AllowClobber`, `Exports the specified commands, even if they have the same names as commands in the current session.


If you import a command with the same name as a command in the current session, the imported command hides or replaces the original 
commands. For more information, see about_Command_Precedence. Export-PSSession does not import commands that have the same names as 
commands in the current session. The default behavior is designed to prevent command name conflicts.`, `SwitchParameter`),
        new Parameter(`ArgumentList`, `Exports the variant of the command that results from using the specified arguments (parameter values).


For example, to export the variant of the Get-Item command in the certificate (Cert:) drive in the PSSession in $S, type 
"export-pssession -session $s -command get-item -argumentlist cert:".`, `Object[]`),
        new Parameter(`Certificate`, `Specifies the client certificate that is used to sign the format files ( .Format.ps1xml) or script module files (.psm1) in the module 
that Export-PSSession * creates. Enter a variable that contains a certificate or a command or expression that gets the certificate.


To find a certificate, use the Get-PfxCertificate cmdlet or use the Get-ChildItem cmdlet in the Certificate (Cert:) drive. If the 
certificate is not valid or does not have sufficient authority, the command fails.`, `X509Certificate2`),
        new Parameter(`CommandName`, `Exports only the commands with the specified names or name patterns. Wildcards are permitted. Use CommandName or its alias, Name .


By default, Export-PSSession exports all commands from the PSSession except for commands that have the same names as commands in the 
current session. This prevents imported commands from hiding or replacing commands in the current session. To export all commands, 
even those that hide or replace other commands, use the AllowClobber parameter.


If you use the CommandName parameter, the formatting files for the commands are not exported unless you use the FormatTypeName 
parameter. Similarly, if you use the FormatTypeName parameter, no commands are exported unless you use the CommandName parameter.`, `String[]`),
        new Parameter(`CommandType`, `Exports only the specified types of command objects. Use CommandType or its alias, Type .


The acceptable values for this parameter are:


- Alias: All Windows PowerShell aliases in the current session.


- All: All command types.


It is the equivalent of "get-command *". - Application. All files other than Windows PowerShell files in paths listed in the Path 
environment variable ($env:path), including .txt, .exe, and .dll files. - Cmdlet. The cmdlets in the current session. "Cmdlet" is the 
default. - ExternalScript. All .ps1 files in the paths listed in the Path environment variable ($env:path). - Filter and Function. 
All Windows PowerShell functions. - Script. Script blocks in the current session.`, `CommandTypes`),
        new Parameter(`Encoding`, `Specifies the encoding for the output files. The acceptable values for this parameter are:


- Unicode


- UTF7


- UTF8


- ASCII


- UTF32


- BigEndianUnicode


- Default


- OEM




The default value is UTF-8.`, `String`),
        new Parameter(`Force`, `Overwrites one or more existing output files, even if the file has the read-only attribute.`, `SwitchParameter`),
        new Parameter(`FormatTypeName`, `Exports formatting instructions only for the specified Microsoft .NET Framework types. Enter the type names. By default, 
Export-PSSession exports formatting instructions for all .NET Framework types that are not in the System.Management.Automation 
namespace.


The value of this parameter must be the name of a type that is returned by a Get-FormatData command in the session from which the 
commands are being imported. To get all of the formatting data in the remote session, type "*".


If you use the FormatTypeName parameter, no commands are exported unless you use the CommandName parameter.


Similarly, if you use the CommandName parameter, the formatting files for the commands are not exported unless you use the 
FormatTypeName parameter.`, `String[]`),
        new Parameter(`FullyQualifiedModule`, `Specifies modules with names that are specified in the form of ModuleSpecification objects (described by the Remarks section of 
ModuleSpecification Constructor (Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx on MSDN). For 
example, the FullyQualifiedModule parameter accepts a module name that is specified in the format @{ModuleName = "modulename"; 
ModuleVersion = "version_number"} or @{ModuleName = "modulename"; ModuleVersion = "version_number"; Guid = "GUID"}. ModuleName and 
ModuleVersion are required, but Guid is optional.


You cannot specify the FullyQualifiedModule parameter in the same command as a Module parameter; the two parameters are mutually 
exclusive.`, `ModuleSpecification[]`),
        new Parameter(`Module`, `Exports only the commands in the specified Windows PowerShell snap-ins and modules. Enter the snap-in and module names. Wildcards are 
not permitted.


For more information, see about_PSSnapins and Import-Module.`, `String[]`),
        new Parameter(`OutputModule`, `Specifies a path (optional) and name for the module that Export-PSSession creates. The default path is 
$home\\Documents\\WindowsPowerShell\\Modules. This parameter is required.


If the module subdirectory or any of the files that Export-PSSession creates already exist, the command fails. To overwrite existing 
files, use the Force parameter.`, `String`),
        new Parameter(`Session`, `Specifies the PSSession from which the commands are exported. Enter a variable that contains a session object or a command that gets 
a session object, such as a Get-PSSession command. This parameter is required.`, `PSSession`),
    ], `Imports commands from another session and saves them in a Windows PowerShell module.`, `Export-PSSession [-Session] <PSSession> [-OutputModule] <String> [[-CommandName] <String[]>] [[-FormatTypeName] <String[]>] 
[-AllowClobber] [-ArgumentList <Object[]>] [-Certificate <X509Certificate2>] [-CommandType {Alias | Function | Filter | Cmdlet | 
ExternalScript | Application | Script | Workflow | Configuration | All}] [-Encoding {Unicode | UTF7 | UTF8 | ASCII | UTF32 | 
BigEndianUnicode | Default | OEM}] [-Force] [-FullyQualifiedModule <ModuleSpecification[]>] [-Module <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-StartLayout`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-StartLayoutEdgeAssets`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-TlsSessionTicketKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-Trace`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-UevConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-UevPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-WindowsCapabilitySource`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-WindowsDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Export-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Find-Package`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Find-PackageProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`ForEach-Object`, [
        new Parameter(`ArgumentList`, `Specifies an array of arguments to a method call.


This parameter was introduced in Windows PowerShell 3.0.`, `Object[]`),
        new Parameter(`Begin`, `Specifies a script block that runs before this cmdlet processes any input objects.`, `ScriptBlock`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`End`, `Specifies a script block that runs after this cmdlet processes all input objects.`, `ScriptBlock`),
        new Parameter(`InputObject`, `Specifies the input objects. ForEach-Object runs the script block or operation statement on each input object. Enter a variable that 
contains the objects, or type a command or expression that gets the objects.


When you use the InputObject parameter with ForEach-Object , instead of piping command results to ForEach-Object , the InputObject 
value is treated as a single object. This is true even if the value is a collection that is the result of a command, such as 
"-InputObject (Get-Process)". Because InputObject cannot return individual properties from an array or collection of objects, we 
recommend that if you use ForEach-Object to perform operations on a collection of objects for those objects that have specific values 
in defined properties, you use ForEach-Object in the pipeline, as shown in the examples in this topic.`, `PSObject`),
        new Parameter(`MemberName`, `Specifies the property to get or the method to call.


Wildcard characters are permitted, but work only if the resulting string resolves to a unique value. If, for example, you run 
"Get-Process | ForEach -MemberName Name", and more than one member exists with a name that contains the string Name, such as the 
ProcessName and Name * properties, the command fails.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`Process`, `Specifies the operation that is performed on each input object. Enter a script block that describes the operation.`, `ScriptBlock[]`),
        new Parameter(`RemainingScripts`, `Specifies all script blocks that are not taken by the Process parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `ScriptBlock[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Performs an operation against each item in a collection of input objects.`, `ForEach-Object [-MemberName] <String> [-ArgumentList <Object[]>] [-Confirm] [-InputObject <PSObject>] [-WhatIf] [<CommonParameters>]

ForEach-Object [-Process] <ScriptBlock[]> [-Begin <ScriptBlock>] [-Confirm] [-End <ScriptBlock>] [-InputObject <PSObject>] 
[-RemainingScripts <ScriptBlock[]>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Format-Custom`, [
        new Parameter(`Depth`, `Specifies the number of columns in the display.`, `Int32`),
        new Parameter(`DisplayError`, `Indicates that this cmdlet displays errors at the command line. This parameter is rarely used, but can be used as a debugging aid 
when you are formatting expressions in a Format-Custom command, and the expressions do not appear to be working. The following shows 
an example of the results of adding the DisplayError parameter with an expression.


"PS > Get-Date | Format-Custom DayOfWeek,{ $_ / $null } -ShowError"


"DayOfWeek  $_ / $null" "--------- ------------" "Wednesday #ERR"`, `SwitchParameter`),
        new Parameter(`Expand`, `Specifies that this cmdlet formats the collection object, as well as the objects in the collection. This parameter is designed to 
format objects that support the ICollection (System.Collections) interface. The default value is EnumOnly. The acceptable values for 
this parameter are:


- EnumOnly. Displays the properties of the objects in the collection. - CoreOnly. Displays the properties of the collection object. - 
Both. Displays the properties of the collection object and the properties of objects in the collection.`, `String`),
        new Parameter(`Force`, `Indicates that this cmdlet displays all of the error information. Use with the DisplayError or ShowError parameter. By default, when 
an error object is written to the error or display streams, only some of the error information is displayed.`, `SwitchParameter`),
        new Parameter(`GroupBy`, `Specifies that this cmdlet formats the output in groups based on a shared property or value. Enter an expression or a property of the 
output.


The value of the GroupBy parameter can be a new calculated property. To create a calculated, property, use a hash table. Valid keys 
are:


- Name (or Label) <string>


- Expression <string> or <script block>


- FormatString <string>`, `Object`),
        new Parameter(`InputObject`, `Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the 
objects.`, `PSObject`),
        new Parameter(`Property`, `Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.


If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name ( 
Property ) is optional. You cannot use the Property and View parameters in the same command.


The value of the Property parameter can be a new calculated property. To create a calculated property, use a hash table. Valid keys 
are:


- Expression <string> or <script block>


- Depth <int32>`, `Object[]`),
        new Parameter(`ShowError`, `Indicates that this cmdlet sends errors through the pipeline. This parameter is rarely used, but can be used as a debugging aid when 
you are formatting expressions in a Format-Custom command, and the expressions do not appear to be working. The following shows an 
example of the results of adding the ShowError parameter with an expression.


PS > Get-Date | Format-Custom DayOfWeek,{ $_ / $null } -ShowError DayOfWeek  $_ / $null --------- ------------ Wednesday


Failed to evaluate expression " $_ / $null ".     + CategoryInfo          : InvalidArgument: (10/30/2013 2:28:07 PM:PSObject) [], 
RuntimeException     + FullyQualifiedErrorId : mshExpressionError`, `SwitchParameter`),
        new Parameter(`View`, `Specifies the name of an alternate format or view. If you omit this parameter, Format-Custom uses a default custom view. You cannot 
use the Property and View parameters in the same command.`, `String`),
    ], `Uses a customized view to format the output.`, `Format-Custom [[-Property] <Object[]>] [-Depth <Int32>] [-DisplayError] [-Expand {CoreOnly | EnumOnly | Both}] [-Force] [-GroupBy 
<Object>] [-InputObject <PSObject>] [-ShowError] [-View <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Format-List`, [
        new Parameter(`DisplayError`, `Indicates that this cmdlet displays errors at the command line. This parameter is rarely used, but can be used as a debugging aid 
when you are formatting expressions in a Format-List command, and the expressions do not appear to be working. The following shows an 
example of the results of adding the DisplayError parameter with an expression.


PS > Get-Date | Format-List DayOfWeek,{ $_ / $null } -ShowError DayOfWeek  $_ / $null --------- ------------ Wednesday #ERR`, `SwitchParameter`),
        new Parameter(`Expand`, `Specifies the formatted collection object, as well as the objects in the collection. This parameter is designed to format objects 
that support the ICollection (System.Collections) interface. The default value is EnumOnly. The acceptable values for this parameter 
are:


- EnumOnly. Displays the properties of the objects in the collection. - CoreOnly. Displays the properties of the collection object. - 
Both. Displays the properties of the collection object and the properties of objects in the collection.`, `String`),
        new Parameter(`Force`, `Indicates that this cmdlet displays all of the error information. Use with the DisplayError or ShowError parameter. By default, when 
an error object is written to the error or display streams, only some of the error information is displayed.`, `SwitchParameter`),
        new Parameter(`GroupBy`, `Specifies the output in groups based on a shared property or value. Enter an expression or a property of the output.


The value of the GroupBy parameter can be a new calculated property. To create a calculated, property, use a hash table. Valid keys 
are:


- Name (or Label) <string>


- Expression <string> or <script block>


- FormatString <string>`, `Object`),
        new Parameter(`InputObject`, `Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the 
objects.`, `PSObject`),
        new Parameter(`Property`, `Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.


If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name ( 
Property ) is optional. You cannot use the Property and View parameters in the same command.


The value of the Property parameter can be a new calculated property. To create a calculated property, use a hash table. Valid keys 
are:


- Expression <string> or <script block>


- Depth <int32>`, `Object[]`),
        new Parameter(`ShowError`, `Indicates that the cmdlet sends errors through the pipeline. This parameter is rarely used, but can be used as a debugging aid when 
you are formatting expressions in a Format-List command, and the expressions do not appear to be working. The following shows an 
example of the results of adding the ShowError parameter with an expression.


PS > Get-Date | Format-List DayOfWeek,{ $_ / $null } -ShowError DayOfWeek  $_ / $null --------- ------------ Wednesday


Failed to evaluate expression " $_ / $null ".     + CategoryInfo          : InvalidArgument: (10/30/2013 2:28:07 PM:PSObject) [], 
RuntimeException     + FullyQualifiedErrorId : mshExpressionError`, `SwitchParameter`),
        new Parameter(`View`, `Specifies the name of an alternate list format or view. You cannot use the Property and View parameters in the same command.`, `String`),
    ], `Formats the output as a list of properties in which each property appears on a new line.`, `Format-List [[-Property] <Object[]>] [-DisplayError] [-Expand {CoreOnly | EnumOnly | Both}] [-Force] [-GroupBy <Object>] 
[-InputObject <PSObject>] [-ShowError] [-View <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Format-SecureBootUEFI`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Format-Table`, [
        new Parameter(`AutoSize`, `Indicates that the cmdlet adjusts the column size and number of columns based on the width of the data. By default, the column size 
and number are determined by the view.`, `SwitchParameter`),
        new Parameter(`DisplayError`, `Indicates that the cmdlet displays errors at the command line. This parameter is rarely used, but can be used as a debugging aid when 
you are formatting expressions in a Format-Table command, and the expressions do not appear to be working. The following shows an 
example of the results of adding the DisplayError parameter with an expression.


PS > Get-Date | Format-Table DayOfWeek,{ $_ / $null } -ShowError DayOfWeek  $_ / $null --------- ------------ Wednesday #ERR`, `SwitchParameter`),
        new Parameter(`Expand`, `Specifies the format of the collection object, as well as the objects in the collection. This parameter is designed to format objects 
that support the ICollection (System.Collections) interface. The default value is EnumOnly. The acceptable values for this parameter 
are:


- EnumOnly. Displays the properties of the objects in the collection. - CoreOnly. Displays the properties of the collection object. - 
Both. Displays the properties of the collection object and the properties of objects in the collection.`, `String`),
        new Parameter(`Force`, `Indicates that the cmdlet directs the cmdlet to display all of the error information. Use with the DisplayError or ShowError 
parameter. By default, when an error object is written to the error or display streams, only some of the error information is 
displayed.`, `SwitchParameter`),
        new Parameter(`GroupBy`, `Specifies sorted output in separate tables based on a property value. For example, you can use GroupBy to list services in separate 
tables based on their status.


Enter an expression or a property of the output. The output must be sorted before you send it to Format-Table .


The value of the GroupBy parameter can be a new calculated property. To create a calculated, property, use a hash table. Valid keys 
are:


- Name (or Label) <string>


- Expression <string> or <script block>


- FormatString <string>`, `Object`),
        new Parameter(`HideTableHeaders`, `Indicates that the cmdlet omits the column headings from the table.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the objects to format. Enter a variable that contains the objects, or type a command or expression that gets the objects.`, `PSObject`),
        new Parameter(`Property`, `Specifies the object properties that appear in the display and the order in which they appear. Type one or more property names 
(separated by commas), or use a hash table to display a calculated property. Wildcards are permitted.


If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name ( 
Property ) is optional. You cannot use the Property and View parameters in the same command.


The value of the Property parameter can be a new calculated property. To create a calculated property, use a hash table. Valid keys 
are:


- Expression <string> or <script block>


- Depth <int32>`, `Object[]`),
        new Parameter(`ShowError`, `Indicates that the cmdlet sends errors through the pipeline. This parameter is rarely used, but can be used as a debugging aid when 
you are formatting expressions in a Format-Table command, and the expressions do not appear to be working. The following shows an 
example of the results of adding the ShowError parameter with an expression.


PS > Get-Date | Format-Table DayOfWeek,{ $_ / $null } -ShowError DayOfWeek  $_ / $null --------- ------------ Wednesday


Failed to evaluate expression " $_ / $null ".     + CategoryInfo          : InvalidArgument: (10/30/2013 2:28:07 PM:PSObject) [], 
RuntimeException     + FullyQualifiedErrorId : mshExpressionError`, `SwitchParameter`),
        new Parameter(`View`, `Specifies the name of an alternate table format or view. You cannot use the Property and View parameters in the same command.`, `String`),
        new Parameter(`Wrap`, `Indicates that the cmdlet displays text that exceeds the column width on the next line. By default, text that exceeds the column 
width is truncated.`, `SwitchParameter`),
    ], `Formats the output as a table.`, `Format-Table [[-Property] <Object[]>] [-AutoSize] [-DisplayError] [-Expand {CoreOnly | EnumOnly | Both}] [-Force] [-GroupBy <Object>] 
[-HideTableHeaders] [-InputObject <PSObject>] [-ShowError] [-View <String>] [-Wrap] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Format-Wide`, [
        new Parameter(`AutoSize`, `Indicates that this cmdlet adjusts the column size and number of columns based on the width of the data. By default, the column size 
and number are determined by the view. You cannot use the AutoSize and Column parameters in the same command.`, `SwitchParameter`),
        new Parameter(`Column`, `Specifies the number of columns in the display. You cannot use the AutoSize and Column parameters in the same command.`, `Int32`),
        new Parameter(`DisplayError`, `Indicates that this cmdlet displays errors at the command line. This parameter is rarely used, but can be used as a debugging aid 
when you are formatting expressions in a Format-Wide command, and the expressions do not appear to be working. The following shows an 
example of the results of adding the DisplayError parameter with an expression.


PS > Get-Date | Format-Wide DayOfWeek,{ $_ / $null } -ShowError DayOfWeek  $_ / $null --------- ------------ Wednesday #ERR`, `SwitchParameter`),
        new Parameter(`Expand`, `Specifies the format of the collection object, as well as the objects in the collection. This parameter is designed to format objects 
that support the ICollection (System.Collections) interface. The default value is EnumOnly. The acceptable values for this parameter 
are:


- EnumOnly. Displays the properties of the objects in the collection. - CoreOnly. Displays the properties of the collection object. - 
Both. Displays the properties of the collection object and the properties of objects in the collection.`, `String`),
        new Parameter(`Force`, `Indicates that this cmdlet overrides restrictions that prevent the command from succeeding, just so the changes do not compromise 
security. For instance, Force will override the read-only attribute or create directories to complete a file path, but it will not 
attempt to change file permissions.`, `SwitchParameter`),
        new Parameter(`GroupBy`, `Specifies the format of the output in groups based on a shared property or value. Enter an expression or a property of the output.


The value of the GroupBy parameter can be a new calculated property. To create a calculated, property, use a hash table. The 
acceptable values for this parameter are:


- Name (or Label) <string>


- Expression <string> or <script block>


- FormatString <string>`, `Object`),
        new Parameter(`InputObject`, `Specifies the objects to format. Enter a variable that contains the objects, or type a command or expression that gets the objects.`, `PSObject`),
        new Parameter(`Property`, `Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.


If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name ( 
Property ) is optional. You cannot use the Property and View parameters in the same command.


The value of the Property parameter can be a new calculated property. To create a calculated property, use a hash table. Valid keys 
are:


- Expression <string> or <script block>


- Depth <int32>`, `Object`),
        new Parameter(`ShowError`, `Indicates that the cmdlet sends errors through the pipeline. This parameter is rarely used, but can be used as a debugging aid when 
you are formatting expressions in a Format-Wide command, and the expressions do not appear to be working. The following shows an 
example of the results of adding the ShowError parameter with an expression.


PS > Get-Date | Format-Wide DayOfWeek,{ $_ / $null } -ShowError DayOfWeek  $_ / $null --------- ------------ Wednesday


Failed to evaluate expression " $_ / $null ".     + CategoryInfo          : InvalidArgument: (10/30/2013 2:28:07 PM:PSObject) [], 
RuntimeException     + FullyQualifiedErrorId : mshExpressionError`, `SwitchParameter`),
        new Parameter(`View`, `Specifies the name of an alternate table format or view. You cannot use the Property and View parameters in the same command.`, `String`),
    ], `Formats objects as a wide table that displays only one property of each object.`, `Format-Wide [[-Property] <Object>] [-AutoSize] [-Column <Int32>] [-DisplayError] [-Expand {CoreOnly | EnumOnly | Both}] [-Force] 
[-GroupBy <Object>] [-InputObject <PSObject>] [-ShowError] [-View <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Acl`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Alias`, [
        new Parameter(`Definition`, `Specifies an array of aliases for the specified item. Enter the name of a cmdlet, function, script, file, or executable file.


This parameter is called Definition , because it searches for the item name in the Definition property of the alias object.`, `String[]`),
        new Parameter(`Exclude`, `Specifies an array of items that this cmdlet omits. The value of this parameter qualifies the Name and Definition parameters. Enter a 
name, a definition, or a pattern, such as s*. Wildcards are permitted.`, `String[]`),
        new Parameter(`Name`, `Specifies the aliases that this cmdlet gets. Wildcards are permitted. By default, Get-Alias retrieves all aliases defined for the 
current session. The parameter name Name is optional. You can also pipe alias names to Get-Alias .`, `String[]`),
        new Parameter(`Scope`, `Gets only the aliases in the specified scope. The acceptable values for this parameter are:


- Global


- Local


- Script


- A number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent)




Local is the default. For more information, see about_Scopes.`, `String`),
    ], `Gets the aliases for the current session.`, `Get-Alias [-Definition <String[]>] [-Exclude <String[]>] [-Scope <String>] [<CommonParameters>]

Get-Alias [[-Name] <String[]>] [-Exclude <String[]>] [-Scope <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppLockerFileInformation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppLockerPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppvClientApplication`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppvClientConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppvClientConnectionGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppvClientMode`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppvClientPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppvPublishingServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppvStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppxDefaultVolume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppxPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppxPackageManifest`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppxProvisionedPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AppxVolume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-AuthenticodeSignature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-BitsTransfer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Certificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CertificateAutoEnrollmentPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CertificateEnrollmentPolicyServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CertificateNotificationTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ChildItem`, [
        new Parameter(`Attributes`, `Gets files and folders with the specified attributes. This parameter supports all attributes and lets you specify complex 
combinations of attributes.

For example, to get non-system files (not directories) that are encrypted or compressed, type:
    Get-ChildItem -Attributes !Directory+!System+Encrypted, !Directory+!System+Compressed

To find files and folders with commonly used attributes, you can use the Attributes parameter, or the Directory, File, Hidden, 
ReadOnly, and System switch parameters.

The Attributes parameter supports the following attributes: Archive, Compressed, Device, Directory, Encrypted, Hidden, Normal, 
NotContentIndexed, Offline, ReadOnly, ReparsePoint, SparseFile, System, and Temporary. For a description of these attributes, see the 
FileAttributes enumeration at http://go.microsoft.com/fwlink/?LinkId=201508.

Use the following operators to combine attributes.
    !    NOT
   +    AND
   ,      OR
No spaces are permitted between an operator and its attribute. However, spaces are permitted before commas.

You can use the following abbreviations for commonly used attributes:
    D    Directory
    H    Hidden
    R    Read-only
    S     System`, `FileAttributes]`),
        new Parameter(`Directory`, `Gets directories (folders).  

To get only directories, use the Directory parameter and omit the File parameter. To exclude directories, use the File parameter and 
omit the Directory parameter, or use the Attributes parameter. 

To get directories, use the Directory parameter, its "ad" alias, or the Directory attribute of the Attributes parameter.`, `SwitchParameter`),
        new Parameter(`File`, `Gets files. 

To get only files, use the File parameter and omit the Directory parameter. To exclude files, use the Directory parameter and omit 
the File parameter, or use the Attributes parameter.

To get files, use the File parameter, its "af" alias, or the File value of the Attributes parameter.`, `SwitchParameter`),
        new Parameter(`Hidden`, `Gets only hidden files and directories (folders).  By default, Get-ChildItem gets only non-hidden items, but you can use the Force 
parameter to include hidden items in the results.

To get only hidden items, use the Hidden parameter, its "h" or "ah" aliases, or the Hidden value of the Attributes parameter. To 
exclude hidden items, omit the Hidden parameter or use the Attributes parameter.`, `SwitchParameter`),
        new Parameter(`ReadOnly`, `Gets only read-only files and directories (folders).  

To get only read-only items, use the ReadOnly parameter, its "ar" alias, or the ReadOnly value of the Attributes parameter. To 
exclude read-only items, use the Attributes parameter.`, `SwitchParameter`),
        new Parameter(`System`, `Gets only system files and directories (folders).

To get only system files and folders, use the System parameter, its "as" alias, or the System value of the Attributes parameter. To 
exclude system files and folders, use the Attributes parameter.`, `SwitchParameter`),
        new Parameter(`Force`, `Gets hidden files and folders. By default, hidden files and folder are excluded. You can also get hidden files and folders by using 
the Hidden parameter or the Hidden value of the Attributes parameter.`, `SwitchParameter`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see about_Transactions.`, `SwitchParameter`),
        new Parameter(`Depth`, `{{Fill Depth Description}}`, `UInt32`),
        new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value of this parameter qualifies the 
Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.`, `String`),
        new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value of this parameter qualifies the 
Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.


The Include parameter is effective only when the command includes the Recurse parameter or the path leads to the contents of a 
directory, such as C:\\Windows\*, where the wildcard character specifies the contents of the C:\\Windows directory.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies, as a string arrya, a path to one or more locations. Unlike the Path parameter, the value of the LiteralPath parameter is 
used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Name`, `Indicates that this cmdlet gets only the names of the items in the locations. If you pipe the output of this command to another 
command, only the item names are sent.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies a path to one or more locations. Wildcards are permitted. The default location is the current directory (.).`, `String[]`),
        new Parameter(`Recurse`, `Indicates that this cmdlet gets the items in the specified locations and in all child items of the locations.


In Windows PowerShell 2.0 and earlier versions of Windows PowerShell, the Recurse parameter works only when the value of the Path 
parameter is a container that has child items, such as C:\\Windows or C:\\Windows\ , and not when it is an item does not have child 
items, such as C:\\Windows\ .exe.`, `SwitchParameter`),
    ], `Gets the files and folders in a file system drive.`, `Get-ChildItem [[-Filter] <String>] [-Attributes {ReadOnly | Hidden | System | Directory | Archive | Device | Normal | Temporary | 
SparseFile | ReparsePoint | Compressed | Offline | NotContentIndexed | Encrypted | IntegrityStream | NoScrubData}] [-Depth <UInt32>] 
[-Directory] [-Exclude <String[]>] [-File] [-Force] [-Hidden] [-Include <String[]>] -LiteralPath <String[]> [-Name] [-ReadOnly] 
[-Recurse] [-System] [-UseTransaction] [<CommonParameters>]

Get-ChildItem [[-Path] <String[]>] [[-Filter] <String>] [-Attributes {ReadOnly | Hidden | System | Directory | Archive | Device | 
Normal | Temporary | SparseFile | ReparsePoint | Compressed | Offline | NotContentIndexed | Encrypted | IntegrityStream | 
NoScrubData}] [-Depth <UInt32>] [-Directory] [-Exclude <String[]>] [-File] [-Force] [-Hidden] [-Include <String[]>] [-Name] 
[-ReadOnly] [-Recurse] [-System] [-UseTransaction] [<CommonParameters>]

Get-ChildItem [-Attributes <FileAttributes]>] [-Directory] [-File] [-Force] [-Hidden] [-ReadOnly] [-System] [-UseTransaction] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CimAssociatedInstance`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CimClass`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CimInstance`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CimSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CIPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CIPolicyIdInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CIPolicyInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Clipboard`, [
        new Parameter(`Format`, `Specifies the type, or format, of the clipboard. The acceptable values for this parameter are:


- Text


- FileDropList


- Image


- Audio`, `ClipboardFormat`),
        new Parameter(`Raw`, `Indicates that this cmdlet ignores newline characters and gets the entire contents of the clipboard.`, `SwitchParameter`),
        new Parameter(`TextFormatType`, `Specifies the text data format type of the clipboard. The acceptable values for this parameter are:


- Text


- UnicodeText


- Rtf


- Html


- CommaSeparatedValue`, `TextDataFormat`),
    ], `Gets the current Windows clipboard entry.`, `Get-Clipboard [-Format {Text | FileDropList | Image | Audio}] [-Raw] [-TextFormatType {Text | UnicodeText | Rtf | Html | 
CommaSeparatedValue}] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-CmsMessage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Command`, [
        new Parameter(`All`, `Indicates that this cmdlet gets all commands, including commands of the same type that have the same name. By default, Get-Command 
gets only the commands that run when you type the command name.


For more information about the method that Windows PowerShell uses to select the command to run when multiple commands have the same 
name, see about_Command_Precedence (http://go.microsoft.com/fwlink/?LinkID=113214) in the TechNet library. For information about 
module-qualified command names and running commands that do not run by default because of a name conflict, see about_Modules 
(http://go.microsoft.com/fwlink/?LinkID=144311).


This parameter was introduced in Windows PowerShell 3.0.


In Windows PowerShell 2.0, Get-Command gets all commands by default.`, `SwitchParameter`),
        new Parameter(`ArgumentList`, `Specifies an array of arguments. This cmdlet gets information about a cmdlet or function when it is used with the specified 
parameters ("arguments"). The alias for ArgumentList is Args .


To detect dynamic parameters that are available only when certain other parameters are used, set the value of ArgumentList to the 
parameters that trigger the dynamic parameters.


To detect the dynamic parameters that a provider adds to a cmdlet, set the value of the ArgumentList parameter to a path in the 
provider drive, such as WSMan:, HKLM:, or Cert:. When the command is a Windows PowerShell provider cmdlet, enter only one path in 
each command. The provider cmdlets return only the dynamic parameters for the first path the value of ArgumentList . For information 
about the provider cmdlets, see about_Providers (http://go.microsoft.com/fwlink/?LinkID=113250) in the TechNet library.`, `Object[]`),
        new Parameter(`CommandType`, `Specifies the  types of commands that this cmdlet gets. Enter one or more command types. Use CommandType or its alias, Type . By 
default, Get-Command gets all cmdlets, functions, and workflows, and aliases.


The acceptable values for this parameter are:


- Alias. Gets the aliases of all Windows PowerShell commands. For more information, see about_Aliases.


- All. Gets all command types. This parameter value is the equivalent of "Get-Command *".


- Application. Gets non-Windows-PowerShell files in paths listed in the Path environment variable ($env:path), including .txt, .exe, 
and .dll files. For more information about the Path environment variable, see about_Environment_Variables. - Cmdlet. Gets all cmdlets.


- ExternalScript. Gets all .ps1 files in the paths listed in the Path environment variable ($env:path). - Filter and Function. Gets 
all Windows PowerShell advanced and simple functions and filters.


- Script. Gets all script blocks. To get Windows PowerShell scripts (.ps1 files), use the ExternalScript value.


- Workflow. Gets all workflows. For more information about workflows, see Introducing Windows PowerShell Workflow.`, `CommandTypes`),
        new Parameter(`FullyQualifiedModule`, `Specifies modules with names that are specified in the form of ModuleSpecification objects, described by the Remarks section of 
Module Specification Constructor (Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx on the Microsoft 
Developer Network (MSDN). For example, the FullyQualifiedModule parameter accepts a module name that is specified in the format 
@{ModuleName = "modulename"; ModuleVersion = "version_number"} or @{ModuleName = "modulename"; ModuleVersion = "version_number"; Guid 
= "GUID"}. ModuleName and ModuleVersion are required, but Guid is optional.


You cannot specify the FullyQualifiedModule parameter in the same command as a Module parameter. The two parameters are mutually 
exclusive.`, `ModuleSpecification[]`),
        new Parameter(`ListImported`, `Indicates that this cmdlet gets only commands in the current session.


Starting in Windows PowerShell 3.0, by default, Get-Command gets all installed commands, including, but not limited to, the commands 
in the current session. In Windows PowerShell 2.0, it gets only commands in the current session.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Module`, `Specifies an array of modules. This cmdlet gets the commands that came from the specified modules or snap-ins. Enter the names of 
modules or snap-ins, or enter snap-in or module objects.


This parameter takes string values, but the value of this parameter can also be a PSModuleInfo or PSSnapinInfo object, such as the 
objects that the Get-Module, Get-PSSnapin, and Import-PSSession cmdlets return.


You can refer to this parameter by its name, Module , or by its alias, PSSnapin . The parameter name that you choose has no effect on 
the command output.`, `String[]`),
        new Parameter(`Name`, `Specifies an array of names. This cmdlet gets only commands that have the specified name. Enter a name or name pattern. Wildcard 
characters are permitted.


To get commands that have the same name, use the All parameter. When two commands have the same name, by default, Get-Command gets 
the command that runs when you type the command name.`, `String[]`),
        new Parameter(`Noun`, `Specifies an array of command nouns. This cmdlet gets commands, which include cmdlets, functions, workflows, and aliases, that have 
names that include the specified noun. Enter one or more nouns or noun patterns. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`ParameterName`, `Specifies an array of parameter names. This cmdlet gets commands in the session that have the specified parameters. Enter parameter 
names or parameter aliases. Wildcard characters are supported.


The ParameterName and ParameterType parameters search only commands in the current session.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
        new Parameter(`ParameterType`, `Specifies an array of parameter names. This cmdlet gets commands in the session that have parameters of the specified type. Enter the 
full name or partial name of a parameter type. Wildcard characters are supported.


The ParameterName and ParameterType parameters search only commands in the current session.


This parameter was introduced in Windows PowerShell 3.0.`, `PSTypeName[]`),
        new Parameter(`ShowCommandInfo`, `Indicates that this cmdlet displays command information.


For more information about the method that Windows PowerShell uses to select the command to run when multiple commands have the same 
name, see about_Command_Precedence. For information about module-qualified command names and running commands that do not run by 
default because of a name conflict, see about_Modules.


This parameter was introduced in Windows PowerShell 3.0.


In Windows PowerShell 2.0, Get-Command gets all commands by default.`, `SwitchParameter`),
        new Parameter(`Syntax`, `Indicates that this cmdlet gets only the following specified data about the command:


- Aliases. Gets the standard name.


- Cmdlets. Gets the syntax.


- Functions and filters. Gets the function definition.


- Scripts and applications or files. Gets the path and filename.`, `SwitchParameter`),
        new Parameter(`TotalCount`, `Specifies the number of commands to get. You can use this parameter to limit the output of a command.`, `Int32`),
        new Parameter(`Verb`, `Specifies an array of command verbs. This cmdlet gets commands, which include cmdlets, functions, workflows, and aliases, that have 
names that include the specified verb. Enter one or more verbs or verb patterns. Wildcard characters are permitted.`, `String[]`),
    ], `Gets all commands.`, `Get-Command [[-Name] <String[]>] [[-ArgumentList] <Object[]>] [-All] [-CommandType {Alias | Function | Filter | Cmdlet | 
ExternalScript | Application | Script | Workflow | Configuration | All}] [-FullyQualifiedModule <ModuleSpecification[]>] 
[-ListImported] [-Module <String[]>] [-ParameterName <String[]>] [-ParameterType <PSTypeName[]>] [-ShowCommandInfo] [-Syntax] 
[-TotalCount <Int32>] [<CommonParameters>]

Get-Command [[-ArgumentList] <Object[]>] [-All] [-FullyQualifiedModule <ModuleSpecification[]>] [-ListImported] [-Module <String[]>] 
[-Noun <String[]>] [-ParameterName <String[]>] [-ParameterType <PSTypeName[]>] [-ShowCommandInfo] [-Syntax] [-TotalCount <Int32>] 
[-Verb <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ComputerInfo`, [
        new Parameter(`Property`, `Specifies, as a string array, the computer properties in which this cmdlet displays.`, `String[]`),
    ], `Gets a consolidated object of system and operating system properties.`, `Get-ComputerInfo [[-Property] <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ComputerRestorePoint`, [
        new Parameter(`LastStatus`, `Indicates that this cmdlet gets the status of the most recent system restore operation.`, `SwitchParameter`),
        new Parameter(`RestorePoint`, `Specifies the restore points, as sequence numbers, that this cmdlet gets. Enter the sequence numbers of one or more restore points. 
By default, this cmdlet gets all restore points on the local computer.`, `Int32[]`),
    ], `Gets the restore points on the local computer.`, `Get-ComputerRestorePoint -LastStatus [<CommonParameters>]

Get-ComputerRestorePoint [[-RestorePoint] <Int32[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Content`, [
        new Parameter(`Encoding`, `Specifies the file encoding. The default is ASCII.

Valid values are:

-- ASCII:  Uses the encoding for the ASCII (7-bit) character set.
-- BigEndianUnicode:  Encodes in UTF-16 format using the big-endian byte order.
-- Byte:   Encodes a set of characters into a sequence of bytes.
-- String:  Uses the encoding type for a string.
-- Unicode:  Encodes in UTF-16 format using the little-endian byte order.
-- UTF7:   Encodes in UTF-7 format.
-- UTF8:  Encodes in UTF-8 format.
-- Unknown:  The encoding type is unknown or invalid. The data can be treated as binary.

Encoding is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works only in file system 
drives.

When reading from and writing to binary files, use a value of Byte for the Encoding dynamic parameter and a value of 0 for the 
ReadCount parameter.  A ReadCount value of 0 reads the entire file in a single read operation and converts it into a single object 
(PSObject).  The default ReadCount value, 1, reads one byte in each read operation and converts each byte into a separate object, 
which causes errors when you use the Set-Content cmdlet to write the bytes to a file. For more information, see the examples.`, `FileSystemCmdletProviderEncoding`),
        new Parameter(`Delimiter`, `Specifies the delimiter that Get-Content uses to divide the file into objects while it reads. 

The default is "\\n", the end-of-line character. 

Therefore, by default, when reading a text file, Get-Content returns a collection of string objects, each of which ends with an 
end-of-line character. 

When you enter a delimiter that does not exist in the file, Get-Content returns the entire file as a single, undelimited object.

You can use this parameter to split a large file into smaller files by specifying a file separator, such as "End of Example", as the 
delimiter. The delimiter is preserved (not discarded) and becomes the last item in each file section.

Delimiter is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works only in file 
system drives.

Troubleshooting Note: Currently, when the value of the Delimiter parameter is an empty string, Get-Content does not return anything. 
This is a known issue. To force Get-Content to return the entire file as a single, undelimited string, enter a value that does not 
exist in the file.`, `string`),
        new Parameter(`Force`, `Gets the contents of all files, including hidden files. By default, Get-Content does not get the contents of hidden files unless you 
specify the hidden file by name.`, `SwitchParameter`),
        new Parameter(`Raw`, `Ignores newline characters and returns the entire contents of a file in one string. By default, the contents of a file is returned as 
a array of strings that is delimited by the newline character.

Raw is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works only in file system 
drives.

This parameter is introduced in Windows PowerShell 3.0.`, `switch`),
        new Parameter(`Wait`, `Waits for the cmdlet to get the content before returning the command prompt. While waiting, Get-Content checks the file once each 
second until you interrupt it, such as by pressing CTRL+C.

Wait is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works only in file system 
drives.`, `SwitchParameter`),
        new Parameter(`Stream`, `Gets the contents of the specified alternate NTFS file stream from the file. Enter the stream name. Wildcards are not supported. 

Stream is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works only in file system 
drives.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see about_Transactions.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers that are installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies, as a string array, the item or items that this cmdlet omits when performing the operation. The value of this parameter 
qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when this cmdlet gets the objects, rather than having Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Include`, `Specifies, as a string array, the item or items that this cmdlet includes in the operation. The value of this parameter qualifies the 
Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the path to an item. Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. No characters are 
interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell 
Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the path to an item. Get-Content gets the content of the item. Wildcards are permitted.`, `String[]`),
        new Parameter(`ReadCount`, `Specifies how many lines of content are sent through the pipeline at a time. The default value is 1. A value of 0 (zero) sends all of 
the content at one time.


This parameter does not change the content displayed, but it does affect the time it takes to display the content. As the value of 
ReadCount increases, the time it takes to return the first line increases, but the total time for the operation decreases. This can 
make a perceptible difference in very large items.`, `Int64`),
        new Parameter(`Tail`, `Specifies the number of lines from the end of a file or other item.


This parameter was introduced in Windows PowerShell 3.0.


You can use the Tail parameter name or its alias, Last.`, `Int32`),
        new Parameter(`TotalCount`, `Specifies the number of lines from the beginning of a file or other item. The default is -1 (all lines).


You can use the TotalCount parameter name or its aliases, First or Head.`, `Int64`),
    ], `Gets the contents of a file.`, `Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | 
UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] 
[-UseTransaction] [-Wait] [<CommonParameters>]

Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | 
BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>] [-Filter <String>] [-Force] 
[-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail <Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] 
[<CommonParameters>]

Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | 
Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ControlPanelItem`, [
        new Parameter(`CanonicalName`, `Specifies, as a string array, the control panel items by their canonical names or name patterns that this cmdlet gets. Wildcards are 
permitted. If you enter multiple names, this cmdlet gets control panel items that match any of the names, as though the items in the 
name list were separated by an "or" operator.


By default, this cmdlet gets all control panel items in the system.`, `String[]`),
        new Parameter(`Category`, `Specifies, as a string array, the categories of the control panel items in the specified categories that this cmdlet gets. Enter a 
category name or name pattern. Wildcards are permitted. If you enter multiple names, this cmdlet gets control panel items that match 
any of the names, as though the items in the name list were separated by an "or" operator. By default, this cmdlet gets all control 
panel items in the system.`, `String[]`),
        new Parameter(`Name`, `Specifies, as a string array, the names or name patterns of the control panel that this cmdlet gets. Wildcards are permitted. You can 
also pipe a name or name pattern to this cmdlet.`, `String[]`),
    ], `Gets control panel items.`, `Get-ControlPanelItem -CanonicalName <String[]> [-Category <String[]>] [<CommonParameters>]

Get-ControlPanelItem [[-Name] <String[]>] [-Category <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Counter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Credential`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Culture`, [], `Gets the current culture set in the operating system.`, `Get-Culture [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DAPolicyChange`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Date`, [
        new Parameter(`Date`, `Specifies a date and time. By default, Get-Date gets the current system date and time.


Type the date in a format that is standard for the system locale, such as dd-MM-yyyy (German [Germany]) or MM/dd/yyyy (English 
[United States]).`, `DateTime`),
        new Parameter(`Day`, `Specifies the day of the month that is displayed. Enter a value from 1 to 31. The default is the current day.


If you specify a value that is greater than the number of days in the month, Windows PowerShell adds the number of days to the month 
and displays the result. For instance, "Get-Date -Month 2 -Day 31" displays March 3, not February 31.`, `Int32`),
        new Parameter(`DisplayHint`, `Determines which elements of the date and time are displayed. The acceptable values for this parameter are:


- Date. Displays only the date. - Time. Displays only the time. - DateTime. Displays the date and time.


DateTime is the default. This parameter does not affect the DateTime object that Get-Date gets.`, `DisplayHintType`),
        new Parameter(`Format`, `Displays the date and time in the Microsoft .NET Framework format indicated by the format specifier. Enter a format specifier. For a 
list of available format specifiers, see DateTimeFormatInfo 
Classhttp://msdn.microsoft.com/library/system.globalization.datetimeformatinfo.aspx 
(http://msdn.microsoft.com/library/system.globalization.datetimeformatinfo.aspx) in MSDN.


When you use the Format parameter, Windows PowerShell gets only the properties of the DateTime object that it needs to display the 
date in the format that you specify. As a result, some of the properties and methods of DateTime objects might not be available.


Starting in Windows PowerShell 5.0, you can use the following additional formats as values for the Format parameter.


- FileDate. A file or path-friendly representation of the current date in local time. It is in the form of yyyymmdd ( using 4 digits, 
2 digits, and 2 digits). An example of results when you use this format is 20150302.


- FileDateUniversal. A file or path-friendly representation of the current date in universal time. It is in the form of yyyymmdd + 
'Z' (using 4 digits, 2 digits, and 2 digits). An example of results when you use this format is 20150302Z.


- FileDateTime. A file or path-friendly representation of the current date and time in local time, in 24-hour format. It is in the 
form of yyyymmdd + 'T' + hhmmssmsms, where msms is a four-character representation of milliseconds. An example of results when you 
use this format is 20150302T1240514987.


- FileDateTimeUniversal. A file or path-friendly representation of the current date and time in universal time, in 24-hour format. It 
is in the form of yyyymmdd + 'T' + hhmmssmsms, where msms is a four-character representation of milliseconds, + 'Z'. An example of 
results when you use this format is 20150302T0840539947Z.`, `String`),
        new Parameter(`Hour`, `Specifies the hour that is displayed. Enter a value from 1 to 23. The default is the current hour.`, `Int32`),
        new Parameter(`Millisecond`, `Specifies the milliseconds in the date. Enter a value from 0 to 999. The default is the current number of milliseconds.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
        new Parameter(`Minute`, `Specifies the minute that is displayed. Enter a value from 1 to 59. The default value is the current minutes.`, `Int32`),
        new Parameter(`Month`, `Specifies the month that is displayed. Enter a value from 1 to 12. The default is the current month.`, `Int32`),
        new Parameter(`Second`, `Specifies the second that is displayed. Enter a value from 1 to 59. The default is the current second.`, `Int32`),
        new Parameter(`UFormat`, `Displays the date and time in UNIX format. For a list of the format specifiers, see the Notes section.


When you use the UFormat parameter, Windows PowerShell gets only the properties of the DateTime object that it needs to display the 
date in the format that you specify. As a result, some of the properties and methods of DateTime objects might not be available.`, `String`),
        new Parameter(`Year`, `Specifies the year that is displayed. Enter a value from 1 to 9999. The default is the current year.`, `Int32`),
    ], `Gets the current date and time.`, `Get-Date [[-Date] <DateTime>] [-Day <Int32>] [-DisplayHint {Date | Time | DateTime}] [-Format <String>] [-Hour <Int32>] [-Millisecond 
<Int32>] [-Minute <Int32>] [-Month <Int32>] [-Second <Int32>] [-Year <Int32>] [<CommonParameters>]

Get-Date [[-Date] <DateTime>] [-Day <Int32>] [-DisplayHint {Date | Time | DateTime}] [-Hour <Int32>] [-Millisecond <Int32>] [-Minute 
<Int32>] [-Month <Int32>] [-Second <Int32>] [-UFormat <String>] [-Year <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DeliveryOptimizationLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DeliveryOptimizationPerfSnap`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DeliveryOptimizationPerfSnapThisMonth`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DeliveryOptimizationStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DOConfig`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DODownloadMode`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DOPercentageMaxBackgroundBandwidth`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-DOPercentageMaxForegroundBandwidth`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Event`, [
        new Parameter(`EventIdentifier`, `Specifies the event identifiers for which this cmdlet gets events.`, `Int32`),
        new Parameter(`SourceIdentifier`, `Specifies source identifiers for which this cmdlet gets events. The default is all events in the event queue. Wildcards are not 
permitted.`, `String`),
    ], `Gets the events in the event queue.`, `Get-Event [-EventIdentifier] <Int32> [<CommonParameters>]

Get-Event [[-SourceIdentifier] <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-EventLog`, [
        new Parameter(`After`, `Specifies the data and time that this cmdlet get events that occur after. Enter a DateTime object, such as the one returned by the 
Get-Date cmdlet.`, `DateTime`),
        new Parameter(`AsBaseObject`, `Indicates that this cmdlet returns a standard System.Diagnostics.EventLogEntry object for each event. Without this parameter, this 
cmdlet returns an extended PSObject object with additional EventLogName , Source , and InstanceId properties.


To see the effect of this parameter, pipe the events to the Get-Member cmdlet and examine the TypeName value in the result.`, `SwitchParameter`),
        new Parameter(`AsString`, `Indicates that this cmdlet returns the output as strings, instead of objects.`, `SwitchParameter`),
        new Parameter(`Before`, `Specifies the data and time that this cmdlet get events that occur before. Enter a DateTime object, such as the one returned by the 
Get-Date cmdlet.`, `DateTime`),
        new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name (FQDN) of a remote computer. To specify 
the local computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Get-EventLog even if your 
computer is not configured to run remote commands.`, `String[]`),
        new Parameter(`EntryType`, `Specifies, as a string array, the entry type of the events that this cmdlet gets.


The acceptable values for this parameter are:


- Error


- Information


- FailureAudit


- SuccessAudit


- Warning.


The default is all events.`, `String[]`),
        new Parameter(`Index`, `Specifies the index values that this cmdlet gets events from.`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies the instance IDs that this cmdlet gets events from.`, `Int64[]`),
        new Parameter(`List`, `Indicates that this cmdlet gets a list of event logs on the computer.`, `SwitchParameter`),
        new Parameter(`LogName`, `Specifies the event log. Enter the log name (the value of the Log property; not the LogDisplayName) of one event log. Wildcard 
characters are not permitted. This parameter is required.`, `String`),
        new Parameter(`Message`, `Specifies a string in the event message that this cmdlet gets event information from. You can use this property to search for 
messages that contain certain words or phrases. Wildcards are permitted.`, `String`),
        new Parameter(`Newest`, `Specifies the maximum number of events that this cmdlet gets. This cmdlet gets the specified number of events, beginning with the 
newest event in the log.`, `Int32`),
        new Parameter(`Source`, `Specifies, as a string array, sources that were written to the log that this cmdlet gets. Wildcards are permitted.`, `String[]`),
        new Parameter(`UserName`, `Specifies, as a string array, user names that are associated with events. Enter names or name patterns, such as User01, User , or 
Domain01\\User . Wildcards are permitted.`, `String[]`),
    ], `Gets the events in an event log, or a list of the event logs, on the local or remote computers.`, `Get-EventLog [-LogName] <String> [[-InstanceId] <Int64[]>] [-After <DateTime>] [-AsBaseObject] [-Before <DateTime>] [-ComputerName 
<String[]>] [-EntryType {Error | Information | FailureAudit | SuccessAudit | Warning}] [-Index <Int32[]>] [-Message <String>] 
[-Newest <Int32>] [-Source <String[]>] [-UserName <String[]>] [<CommonParameters>]

Get-EventLog [-AsString] [-ComputerName <String[]>] [-List] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-EventSubscriber`, [
        new Parameter(`Force`, `Indicates that this cmdlet gets all event subscribers, including subscribers for events that are hidden by using the SupportEvent 
parameter of Register-ObjectEvent, Register-WmiEvent, and Register-EngineEvent.`, `SwitchParameter`),
        new Parameter(`SourceIdentifier`, `Specifies the SourceIdentifier property value that gets only the event subscribers. By default, Get-EventSubscriber gets all event 
subscribers in the session. Wildcards are not permitted. This parameter is case-sensitive.`, `String`),
        new Parameter(`SubscriptionId`, `Specifies the subscription identifier that this cmdlet gets. By default, Get-EventSubscriber gets all event subscribers in the 
session.`, `Int32`),
    ], `Gets the event subscribers in the current session.`, `Get-EventSubscriber [[-SourceIdentifier] <String>] [[-Force]] [<CommonParameters>]

Get-EventSubscriber [-SubscriptionId] <Int32> [[-Force]] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ExecutionPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-FormatData`, [
        new Parameter(`PowerShellVersion`, `@{Text=}`, `Version`),
        new Parameter(`TypeName`, `Specifies the type names that this cmdlet gets for the formatting data. Enter the type names. Wildcards are permitted.`, `String[]`),
    ], `Gets the formatting data in the current session.`, `Get-FormatData [[-TypeName] <String[]>] [-PowerShellVersion <Version>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Help`, [
        new Parameter(`Category`, `Displays help only for items in the specified category and their aliases. The acceptable values for this parameter are:


- Alias


- Cmdlet


- Provider


- General


- FAQ


- Glossary


- HelpFile


- ScriptCommand


- Function


- Filter


- ExternalScript


- All


- DefaultHelp


- Workflow


- DscResource


- Class


- Configuration




Conceptual topics are in the HelpFile category.`, `String[]`),
        new Parameter(`Component`, `Displays commands with the specified component value, such as "Exchange." Enter a component name. Wildcard characters are permitted.


This parameter has no effect on displays of conceptual ("About_") help.`, `String[]`),
        new Parameter(`Detailed`, `Adds parameter descriptions and examples to the basic help display.


This parameter is effective only when help files are for the command are installed on the computer. It has no effect on displays of 
conceptual ("About_") help.`, `SwitchParameter`),
        new Parameter(`Examples`, `Displays only the name, synopsis, and examples. To display only the examples, type "(Get-Help <cmdlet-name>).Examples".


This parameter is effective only when help files are for the command are installed on the computer. It has no effect on displays of 
conceptual ("About_") help.`, `SwitchParameter`),
        new Parameter(`Full`, `Displays the whole help topic for a cmdlet. This includes parameter descriptions and attributes, examples, input and output object 
types, and additional notes.


This parameter is effective only when help files are for the command are installed on the computer. It has no effect on displays of 
conceptual ("About_") help.`, `SwitchParameter`),
        new Parameter(`Functionality`, `Displays help for items with the specified functionality. Enter the functionality. Wildcard characters are permitted.


This parameter has no effect on displays of conceptual ("About_") help.`, `String[]`),
        new Parameter(`Name`, `Gets help about the specified command or concept. Enter the name of a cmdlet, function, provider, script, or workflow, such as 
"Get-Member", a conceptual topic name, such as "about_Objects", or an alias, such as "ls". Wildcard characters are permitted in 
cmdlet and provider names, but you cannot use wildcard characters to find the names of function help and script help topics.


To get help for a script that is not located in a path that is listed in the Path environment variable, type the path and file name 
of the script.


If you enter the exact name of a help topic, Get-Help displays the topic contents. If you enter a word or word pattern that appears 
in several help topic titles, Get-Help displays a list of the matching titles. If you enter a word that does not match any help topic 
titles, Get-Help displays a list of topics that include that word in their contents.


The names of conceptual topics, such as "about_Objects", must be entered in English, even in non-English versions of Windows 
PowerShell.`, `String`),
        new Parameter(`Online`, `Displays the online version of a help topic in the default Internet browser. This parameter is valid only for cmdlet, function, 
workflow and script help topics. You cannot use the Online parameter in Get-Help commands in a remote session.


For information about supporting this feature in help topics that you write, see about_Comment_Based_Help 
(http://go.microsoft.com/fwlink/?LinkID=144309), and Supporting Online Help (http://go.microsoft.com/fwlink/?LinkID=242132), and How 
to Write Cmdlet Helphttp://go.microsoft.com/fwlink/?LinkID=123415 (http://go.microsoft.com/fwlink/?LinkID=123415) in the Microsoft 
Developer Network MSDN library.`, `SwitchParameter`),
        new Parameter(`Parameter`, `Displays only the detailed descriptions of the specified parameters. Wildcards are permitted.


This parameter has no effect on displays of conceptual ("About_") help.`, `String`),
        new Parameter(`Path`, `Gets help that explains how the cmdlet works in the specified provider path. Enter a Windows PowerShell provider path.


This parameter gets a customized version of a cmdlet help topic that explains how the cmdlet works in the specified Windows 
PowerShell provider path. This parameter is effective only for help about a provider cmdlet and only when the provider includes a 
custom version of the provider cmdlet help topic in its help file. To use this parameter, install the help file for the module that 
includes the provider.


To see the custom cmdlet help for a provider path, go to the provider path location and enter a Get-Help command or, from any path 
location, use the Path parameter of Get-Help to specify the provider path. You can also find custom cmdlet help online in the 
provider help section of the help topics. For example, you can find help for the New-Item cmdlet in the Wsman:\*\\ClientCertificate 
path (http://go.microsoft.com/fwlink/?LinkID=158676).


For more information about Windows PowerShell providers, see about_Providers (http://go.microsoft.com/fwlink/?LinkID=113250) in the 
TechNet library.`, `String`),
        new Parameter(`Role`, `Displays help customized for the specified user role. Enter a role. Wildcard characters are permitted.


Enter the role that the user plays in an organization. Some cmdlets display different text in their help files based on the value of 
this parameter. This parameter has no effect on help for the core cmdlets.`, `String[]`),
        new Parameter(`ShowWindow`, `Displays the help topic in a window for easier reading. The window includes a Find search feature and a Settings box that lets you 
set options for the display. These include options to display only selected sections of a help topic.


The ShowWindow parameter supports help topics for commands, which include cmdlets, functions, CIM commands, workflows, and scripts, 
and conceptual About topics. It does not support provider help.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
    ], `Displays information about Windows PowerShell commands and concepts.`, `Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | ScriptCommand | Function | 
Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | Configuration}] [-Component <String[]>] -Detailed 
[-Functionality <String[]>] [-Path <String>] [-Role <String[]>] [<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | ScriptCommand | Function | 
Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | Configuration}] [-Component <String[]>] -Examples 
[-Functionality <String[]>] [-Path <String>] [-Role <String[]>] [<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | ScriptCommand | Function | 
Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | Configuration}] [-Component <String[]>] [-Full] 
[-Functionality <String[]>] [-Path <String>] [-Role <String[]>] [<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | ScriptCommand | Function | 
Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | Configuration}] [-Component <String[]>] 
[-Functionality <String[]>] -Online [-Path <String>] [-Role <String[]>] [<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | ScriptCommand | Function | 
Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | Configuration}] [-Component <String[]>] 
[-Functionality <String[]>] -Parameter <String> [-Path <String>] [-Role <String[]>] [<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | ScriptCommand | Function | 
Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | Configuration}] [-Component <String[]>] 
[-Functionality <String[]>] [-Path <String>] [-Role <String[]>] -ShowWindow [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-History`, [
        new Parameter(`Count`, `Specifies the number of the most recent history entries that this cmdlet gets. By, default, Get-History gets all entries in the 
session history. If you use both the Count and Id parameters in a command, the display ends with the command that is specified by the 
Id parameter.


In Windows PowerShell 2.0, by default, Get-History gets the 32 most recent entries.`, `Int32`),
        new Parameter(`Id`, `Specifies an array of the IDs of entries in the session history. Get-History gets only specified entries. If you use both the Id and 
Count parameters in a command, Get-History gets the most recent entries ending with the entry specified by the Id parameter.`, `Int64[]`),
    ], `Gets a list of the commands entered during the current session.`, `Get-History [[-Id] <Int64[]>] [[-Count] <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Host`, [], `Gets an object that represents the current host program.`, `Get-Host [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-HotFix`, [
        new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name (FQDN) of a remote computer.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of this cmdlet even if your 
computer is not configured to run remote commands.`, `String[]`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.`, `PSCredential`),
        new Parameter(`Description`, `Specifies the hotfix descriptions that this cmdlet gets. Wildcards are permitted. The default is all hotfixes on the computer.`, `String[]`),
        new Parameter(`Id`, `Specifies the hotfix IDs that this cmdlet gets. The default is all hotfixes on the computer.`, `String[]`),
    ], `Gets the hotfixes that have been applied to the local and remote computers.`, `Get-HotFix [-ComputerName <String[]>] [-Credential <PSCredential>] [-Description <String[]>] [<CommonParameters>]

Get-HotFix [[-Id] <String[]>] [-ComputerName <String[]>] [-Credential <PSCredential>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Item`, [
        new Parameter(`Stream`, `Gets the specified alternate NTFS file stream from the file. Enter the stream name. Wildcards are supported. To get all streams, use 
an asterisk (*). This parameter is not valid on folders.

Stream is a dynamic parameter that the FileSystem provider adds to the Get-Item cmdlet. This parameter works only in file system 
drives.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user-name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value of this parameter qualifies the 
Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.


The Exclude parameter is effective only when the command includes the contents of an item, such as C:\\Windows\*, where the wildcard 
character specifies the contents of the C:\\Windows directory.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when this cmdlet gets the objects, rather than having Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Force`, `Indicates that this cmdlet gets items that cannot otherwise be accessed, such as hidden items. Implementation varies from provider to 
provider. For more information, see about_Providers. Even using the Force parameter, the cmdlet cannot override security restrictions.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value of this parameter qualifies the 
Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.


The Include parameter is effective only when the command includes the contents of an item, such as C:\\Windows\*, where the wildcard 
character specifies the contents of the C:\\Windows directory.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path to the item. Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. No characters are 
interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell 
Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the path to an item. This cmdlet gets the item at the specified location. Wildcards are permitted. This parameter is 
required, but the parameter name ("Path") is optional.


Use a dot (.) to specify the current location. Use the wildcard character (*) to specify all the items in the current location.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Gets files and folders.`, `Get-Item [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> 
[-Stream <String[]>] [-UseTransaction] [<CommonParameters>]

Get-Item [-Path] <String[]> [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] 
[-Stream <String[]>] [-UseTransaction] [<CommonParameters>]

Get-Item [-Stream <string>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ItemProperty`, [
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation. Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when this cmdlet gets the objects rather than having Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path to the item property. The value of LiteralPath is used exactly as it is typed. No characters are interpreted as 
wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows 
PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the property or properties to retrieve.`, `String[]`),
        new Parameter(`Path`, `Specifies the path to the item or items.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Gets the properties of a specified item.`, `Get-ItemProperty [[-Name] <String[]>] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] 
-LiteralPath <String[]> [-UseTransaction] [<CommonParameters>]

Get-ItemProperty [-Path] <String[]> [[-Name] <String[]>] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Include <String[]>] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ItemPropertyValue`, [
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user. Type a user name, such as 
User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential cmdlet. If you type a user 
name, you are prompted for a password. This parameter is not supported by any providers that are installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcard characters, depends on the provider. Filters are more efficient than other parameters, because 
the provider applies them when the cmdlet gets the objects rather than having Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path to the item property. In contrast to the Path parameter, the value of LiteralPath is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the property or properties to retrieve.`, `String[]`),
        new Parameter(`Path`, `Specifies the path to the item or items.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Gets the value for one or more properties of a specified item.`, `Get-ItemPropertyValue [-Name] <String[]> [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] 
-LiteralPath <String[]> [-UseTransaction] [<CommonParameters>]

Get-ItemPropertyValue [[-Path] <String[]>] [-Name] <String[]> [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Include <String[]>] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Job`, [
        new Parameter(`After`, `Gets completed jobs that ended after the specified date and time. Enter a DateTime object, such as one returned by the Get-Date 
cmdlet or a string that can be converted to a DateTime object, such as "Dec 1, 2012 2:00 AM" or "11/06".


This parameter works only on custom job types, such as workflow jobs and scheduled jobs, that have an EndTime property. It does not 
work on standard background jobs, such as those created by using the Start-Job cmdlet. For information about support for this 
parameter, see the help topic for the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `DateTime`),
        new Parameter(`Before`, `Gets completed jobs that ended before the specified date and time. Enter a DateTime object.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs, that have an EndTime property. It does not 
work on standard background jobs, such as those created by using the Start-Job cmdlet. For information about support for this 
parameter, see the help topic for the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `DateTime`),
        new Parameter(`ChildJobState`, `Gets only the child jobs that have the specified state. The acceptable values for this parameter are:


- NotStarted


-  Running


-  Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




By default, Get-Job does not get child jobs. By using the IncludeChildJob parameter, Get-Job gets all child jobs. If you use the 
ChildJobState parameter, the IncludeChildJob parameter has no effect.

This parameter was introduced in Windows PowerShell 3.0.`, `JobState`),
        new Parameter(`Command`, `Specifies an array of commands as strings. This cmdlet gets the jobs that include the specified commands. The default is all jobs. 
You can use wildcard characters to specify a command pattern.`, `String[]`),
        new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet gets jobs that satisfy all of the conditions. Enter a hash table where the keys are 
job properties and the values are job property values.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs. It does not work on standard background 
jobs, such as those created by using the Start-Job cmdlet. For information about support for this parameter, see the help topic for 
the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Hashtable`),
        new Parameter(`HasMoreData`, `Indicates whether this cmdlet gets only jobs that have the specified HasMoreData property value. The HasMoreData property indicates 
whether all job results have been received in the current session. To get jobs that have more results, specify a value of $True. To 
get jobs that do not have more results, specify a value of $False.


To get the results of a job, use the Receive-Job cmdlet.


When you use the Receive-Job cmdlet, it deletes from its in-memory, session-specific storage the results that it returned. When it 
has returned all results of the job in the current session, it sets the value of the HasMoreData property of the job to $False) to 
indicate that it has no more results for the job in the current session. Use the Keep parameter of Receive-Job to prevent Receive-Job 
from deleting results and changing the value of the HasMoreData property. For more information, type "Get-Help Receive-Job".


The HasMoreData property is specific to the current session. If results for a custom job type are saved outside of the session, such 
as the scheduled job type, which saves job results on disk, you can use the Receive-Job cmdlet in a different session to get the job 
results again, even if the value of HasMoreData is $False. For more information, see the help topics for the custom job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Boolean`),
        new Parameter(`Id`, `Specifies an array of IDs of jobs that this cmdlet gets.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and to type than the instance 
ID, but it is unique only in the current session. You can type one or more IDs separated by commas. To find the ID of a job, type 
"Get-Job" without parameters.`, `Int32[]`),
        new Parameter(`IncludeChildJob`, `Indicates that this cmdlet returns child jobs, in addition to parent jobs.


This parameter is especially useful for investigating workflow jobs, for which Get-Job returns a container parent job, and job 
failures, because the reason for the failure is saved in a property of the child job.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`InstanceId`, `Specifies an array of instance IDs of jobs that this cmdlet gets. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use Get-Job .`, `Guid[]`),
        new Parameter(`Name`, `Specifies an array of instance friendly names of jobs that this cmdlet gets. Enter a job name, or use wildcard characters to enter a 
job name pattern. By default, Get-Job gets all jobs in the current session.`, `String[]`),
        new Parameter(`Newest`, `Specifies a number of jobs to get. This cmdlet gets the jobs that ended most recently.


The Newest parameter does not sort or return the newest jobs in end-time order. To sort the output, use the Sort-Object cmdlet.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
        new Parameter(`State`, `Specifies a job state. This cmdlet gets only jobs in the specified state. The acceptable values for this parameter are:


- NotStarted
- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




By default, Get-Job gets all the jobs in the current session.

For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx) in the Microsoft 
Developer Network (MSDN).`, `JobState`),
    ], `Gets Windows PowerShell background jobs that are running in the current session.`, `Get-Job [[-Id] <Int32[]>] [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | Completed | Failed | 
Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] [-HasMoreData <Boolean>] [-IncludeChildJob] 
[-Newest <Int32>] [<CommonParameters>]

Get-Job [-Name] <String[]> [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | Completed | Failed | 
Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] [-HasMoreData <Boolean>] [-IncludeChildJob] 
[-Newest <Int32>] [<CommonParameters>]

Get-Job [-InstanceId] <Guid[]> [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | Completed | Failed | 
Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] [-HasMoreData <Boolean>] [-IncludeChildJob] 
[-Newest <Int32>] [<CommonParameters>]

Get-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | 
AtBreakpoint} [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | Completed | Failed | Stopped | Blocked 
| Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] [-HasMoreData <Boolean>] [-IncludeChildJob] [-Newest <Int32>] 
[<CommonParameters>]

Get-Job [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | Completed | Failed | Stopped | Blocked | 
Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] [-Command <String[]>] [-HasMoreData <Boolean>] [-IncludeChildJob] 
[-Newest <Int32>] [<CommonParameters>]

Get-Job [-Filter] <Hashtable> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-JobTrigger`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-KdsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-KdsRootKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-LocalGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-LocalGroupMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-LocalUser`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Location`, [
        new Parameter(`PSDrive`, `Specifies the current location in the specified Windows PowerShell drive that this cmdlet gets in the operation.


For instance, if you are in the Certificate: drive, you can use this parameter to find your current location in the C: drive.`, `String[]`),
        new Parameter(`PSProvider`, `Specifies the current location in the drive supported by the Windows PowerShell provider that this cmdlet gets in the operation.


If the specified provider supports more than one drive, this cmdlet returns the location on the most recently accessed drive.


For example, if you are in the C: drive, you can use this parameter to find your current location in the drives of the Windows 
PowerShellRegistry provider.`, `String[]`),
        new Parameter(`Stack`, `Indicates that this cmdlet displays the locations in the current location stack.


To display the locations in a different location stack, use the StackName parameter. For information about location stacks, see the 
Notes.`, `SwitchParameter`),
        new Parameter(`StackName`, `Specifies, as a string array, the named location stacks. Enter one or more location stack names.


To display the locations in the current location stack, use the Stack parameter. To make a location stack the current location stack, 
use the Set-Location parameter. For information about location stacks, see the Notes.


This cmdlet cannot display the locations in the unnamed default stack unless it is the current stack.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Gets information about the current working location or a location stack.`, `Get-Location [-PSDrive <String[]>] [-PSProvider <String[]>] [-UseTransaction] [<CommonParameters>]

Get-Location [-Stack] [-StackName <String[]>] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Member`, [
        new Parameter(`Force`, `Adds the intrinsic members (PSBase, PSAdapted, PSObject, PSTypeNames) and the compiler-generated get_ and set_ methods to the 
display. By default, Get-Member gets these properties in all views other than Base and Adapted, but it does not display them.


The following list describes the properties that are added when you use the Force parameter:


- PSBase:  The original properties of the .NET Framework object without extension or adaptation. These are the properties defined for 
the object class and listed in MSDN.


- PSAdapted. The properties and methods defined in the Windows PowerShell extended type system.


- PSExtended. The properties and methods that were added in the Types.ps1xml files or by using the Add-Member cmdlet.


- PSObject. The adapter that converts the base object to a Windows PowerShell PSObject object. - PSTypeNames. A list of object types 
that describe the object, in order of specificity. When formatting the object, Windows PowerShell searches for the types in the 
Format.ps1xml files in the Windows PowerShell installation directory ($pshome). It uses the formatting definition for the first type 
that it finds.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the object whose members are retrieved.


Using the InputObject parameter is not the same as piping an object to Get-Member . The differences are as follows:


- When you pipe a collection of objects to Get-Member , Get-Member gets the members of the individual objects in the collection, such 
as the properties of each string in an array of strings. - When you use InputObject to submit a collection of objects, Get-Member 
gets the members of the collection, such as the properties of the array in an array of strings.`, `PSObject`),
        new Parameter(`MemberType`, `Specifies the member type that this cmdlet gets. The default is All.


The acceptable values for this parameter are:


- AliasProperty


- CodeProperty


- Property


- NoteProperty


- ScriptProperty


- Properties


- PropertySet


- Method


- CodeMethod


- ScriptMethod


- Methods


- ParameterizedProperty


- MemberSet


- Event


- Dynamic


- All




For information about these values, see PSMemberTypes 
Enumeration"https://msdn.microsoft.com/en-us/library/system.management.automation.psmembertypes(v=vs.85).aspx 
(https://msdn.microsoft.com/en-us/library/system.management.automation.psmembertypes(v=vs.85).aspx ) in MSDN.


Not all objects have every type of member. If you specify a member type that the object does not have, Windows PowerShell returns a 
null value.

To get related types of members, such as all extended members, use the View parameter. If you use the MemberType parameter with the 
Static or View parameters, Get-Member gets the members that belong to both sets.`, `PSMemberTypes`),
        new Parameter(`Name`, `Specifies the names of one or more properties or methods of the object. Get-Member gets only the specified properties and methods.


If you use the Name parameter with the MemberType , View , or Static parameter, Get-Member gets only the members that satisfy the 
criteria of all parameters.


To get a static member by name, use the Static parameter with the Name parameter.`, `String[]`),
        new Parameter(`Static`, `Indicates that this cmdlet gets only the static properties and methods of the object.


Static properties and methods are defined on the class of objects, not on any particular instance of the class.


If you use the Static parameter with the View parameter, the View parameter is ignored. If you use the Static parameter with the 
MemberType parameter, Get-Member gets only the members that belong to both sets.`, `SwitchParameter`),
        new Parameter(`View`, `Specifies that this cmdlet gets only particular types properties and methods. Specify one or more of the values. The default is 
Adapted, Extended.


The acceptable values for this parameter are:


- Base.  Gets only the original properties and methods of the .NET Framework object (without extension or adaptation).


- Adapted.  Gets only the properties and methods defined in the Windows PowerShell extended type system.


- Extended. Gets only the properties and methods that were added in the Types.ps1xml files or by using the Add-Member cmdlet.


- All. Gets the members in the Base, Adapted, and Extended views.




The View parameter determines the members retrieved, not just the display of those members.

To get particular member types, such as script properties, use the MemberType parameter. If you use the MemberType and View 
parameters in the same command, Get-Member gets the members that belong to both sets. If you use the Static and View parameters in 
the same command, the View parameter is ignored.`, `PSMemberViewTypes`),
    ], `Gets the properties and methods of objects.`, `Get-Member [[-Name] <String[]>] [-Force] [-InputObject <PSObject>] [-MemberType {AliasProperty | CodeProperty | Property | 
NoteProperty | ScriptProperty | Properties | PropertySet | Method | CodeMethod | ScriptMethod | Methods | ParameterizedProperty | 
MemberSet | Event | Dynamic | All}] [-Static] [-View {Extended | Adapted | Base | All}] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Module`, [
        new Parameter(`All`, `Indicates that this cmdlet gets all modules in each module folder, including nested modules, manifest (.psd1) files, script module 
(.psm1) files, and binary module (.dll) files. Without this parameter, Get-Module gets only the default module in each module folder.`, `SwitchParameter`),
        new Parameter(`CimNamespace`, `Specifies the namespace of an alternate CIM provider that exposes CIM modules. The default value is the namespace of the Module 
Discovery WMI provider.


Use this parameter to get CIM modules from computers and devices that are not running the Windows operating system.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`CimResourceUri`, `Specifies an alternate location for CIM modules. The default value is the resource URI of the Module Discovery WMI provider on the 
remote computer.


Use this parameter to get CIM modules from computers and devices that are not running the Windows operating system.


This parameter was introduced in Windows PowerShell 3.0.`, `Uri`),
        new Parameter(`CimSession`, `Specifies a CIM session on the remote computer. Enter a variable that contains the CIM session or a command that gets the CIM 
session, such as a Get-CIMSessionhttp://go.microsoft.com/fwlink/?LinkId=227966 command. Get-Module uses the CIM session connection to 
get modules from the remote computer. When you import the module by using the Import-Module cmdlet and use the commands from the 
imported module in the current session, the commands actually run on the remote computer.


You can use this parameter to get modules from computers and devices that are not running the Windows operating system, and computers 
that have Windows PowerShell, but do not have Windows PowerShell remoting enabled.


The CimSession parameter gets all modules in the CIMSession . However, you can import only CIM-based and Cmdlet Definition XML 
(CDXML)-based modules.`, `CimSession`),
        new Parameter(`FullyQualifiedName`, `Specifies names of modules in the form of ModuleSpecification objects. These objects are described in the Remarks section of 
ModuleSpecification Constructor (Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx 
(http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx) in the Microsoft Developer Network (MSDN) library. For 
example, the FullyQualifiedName parameter accepts a module name that is specified in the following formats:


@{ModuleName = "modulename"; ModuleVersion = "version_number"} @{ModuleName = "modulename"; ModuleVersion = "version_number"; Guid = 
"GUID"}. ModuleName and ModuleVersion are required, but Guid is optional.


You cannot specify the FullyQualifiedName parameter in the same command as a Name parameter.`, `ModuleSpecification[]`),
        new Parameter(`ListAvailable`, `Indicates that this cmdlet gets all installed modules. Get-Module gets modules in paths listed in the PSModulePath environment 
variable. Without this parameter, Get-Module gets only the modules that are both listed in the PSModulePath environment variable, and 
that are loaded in the current session. ListAvailable does not return information about modules that are not found in the 
PSModulePath environment variable, even if those modules are loaded in the current session.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies names or name patterns of modules that this cmdlet gets. Wildcard characters are permitted. You can also pipe the names to 
Get-Module . You cannot specify the FullyQualifiedName parameter in the same command as a Name parameter. Name cannot accept a module 
GUID as a value. To return modules by specifying a GUID, use FullyQualifiedName instead.`, `String[]`),
        new Parameter(`PSEdition`, `@{Text=}`, `String`),
        new Parameter(`PSSession`, `Gets the modules in the specified user-managed Windows PowerShell session ( PSSession ). Enter a variable that contains the session, 
a command that gets the session, such as a Get-PSSession command, or a command that creates the session, such as a New-PSSession 
command.


When the session is connected to a remote computer, you must specify the ListAvailable parameter.


A Get-Module command that uses the PSSession parameter is equivalent to using the Invoke-Command cmdlet to run a "Get-Module 
-ListAvailable" command in a PSSession .


This parameter was introduced in Windows PowerShell 3.0.`, `PSSession`),
        new Parameter(`Refresh`, `Indicates that this cmdlet refreshes the cache of installed commands. The command cache is created when the session starts. It 
enables the Get-Command cmdlet to get commands from modules that are not imported into the session.


This parameter is designed for development and testing scenarios in which the contents of modules have changed since the session 
started.


When you specify the Refresh parameter in a command, you must specify ListAvailable .


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
    ], `Gets the modules that have been imported or that can be imported into the current session.`, `Get-Module [[-Name] <String[]>] [-All] [-FullyQualifiedName <ModuleSpecification[]>] [<CommonParameters>]

Get-Module [[-Name] <String[]>] [-All] [-FullyQualifiedName <ModuleSpecification[]>] -ListAvailable [-PSEdition <String>] [-Refresh] 
[<CommonParameters>]

Get-Module [[-Name] <String[]>] [-CimNamespace <String>] [-CimResourceUri <Uri>] -CimSession <CimSession> [-FullyQualifiedName 
<ModuleSpecification[]>] [-ListAvailable] [-Refresh] [<CommonParameters>]

Get-Module [[-Name] <String[]>] [-FullyQualifiedName <ModuleSpecification[]>] [-ListAvailable] [-PSEdition <String>] -PSSession 
<PSSession> [-Refresh] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-NonRemovableAppsPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Package`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PackageProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PackageSource`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PfxCertificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PfxData`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PmemDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PmemPhysicalDevice`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PmemUnusedRegion`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Process`, [
        new Parameter(`ComputerName`, `Specifies the computers for which this cmdlet gets active processes. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name (FQDN) of one or more computers. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of this cmdlet even if your 
computer is not configured to run remote commands.`, `String[]`),
        new Parameter(`FileVersionInfo`, `Indicates that this cmdlet gets the file version information for the program that runs in the process.


On Windows Vista and later versions of Windows, you must open Windows PowerShell with the Run as administrator option to use this 
parameter on processes that you do not own.


You cannot use the FileVersionInfo and ComputerName parameters of the Get-Process cmdlet in the same command. To get file version 
information for a process on a remote computer, use the Invoke-Command cmdlet.


Using this parameter is equivalent to getting the MainModule.FileVersionInfo property of each process object. When you use this 
parameter, Get-Process returns a FileVersionInfo object (System.Diagnostics.FileVersionInfo), not a process object. So, you cannot 
pipe the output of the command to a cmdlet that expects a process object, such as Stop-Process.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies one or more processes by process ID (PID). To specify multiple IDs, use commas to separate the IDs. To find the PID of a 
process, type "Get-Process".`, `Int32[]`),
        new Parameter(`IncludeUserName`, `Indicates that the UserName value of the Process object is returned with results of the command.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies one or more process objects. Enter a variable that contains the objects, or type a command or expression that gets the 
objects.`, `Process[]`),
        new Parameter(`Module`, `Indicates that this cmdlet gets the modules that have been loaded by the processes.


On Windows Vista and later versions of Windows, you must open Windows PowerShell with the Run as administrator option to use this 
parameter on processes that you do not own.


You cannot use the Module and ComputerName parameters of the Get-Process cmdlet in the same command. To get the modules that have 
been loaded by a process on a remote computer, use the Invoke-Command cmdlet.


This parameter is equivalent to getting the Modules property of each process object. When you use this parameter, this cmdlet returns 
a ProcessModule object (System.Diagnostics.ProcessModule), not a process object. So, you cannot pipe the output of the command to a 
cmdlet that expects a process object, such as Stop-Process.


When you use both the Module and FileVersionInfo parameters in the same command, this cmdlet returns a FileVersionInfo object with 
information about the file version of all modules.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies one or more processes by process name. You can type multiple process names (separated by commas) and use wildcard 
characters. The parameter name ("Name") is optional.`, `String[]`),
    ], `Gets the processes that are running on the local computer or a remote computer.`, `Get-Process [[-Name] <String[]>] [-ComputerName <String[]>] [-FileVersionInfo] [-Module] [<CommonParameters>]

Get-Process [-ComputerName <String[]>] [-FileVersionInfo] -Id <Int32[]> [-Module] [<CommonParameters>]

Get-Process [-ComputerName <String[]>] [-FileVersionInfo] -InputObject <Process[]> [-Module] [<CommonParameters>]

Get-Process -Id <Int32[]> -IncludeUserName [<CommonParameters>]

Get-Process [[-Name] <String[]>] -IncludeUserName [<CommonParameters>]

Get-Process -IncludeUserName -InputObject <Process[]> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ProcessMitigation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ProvisioningPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSBreakpoint`, [
        new Parameter(`Command`, `Specifies an array of command breakpoints that are set on the specified command names. Enter the command names, such as the name of a 
cmdlet or function.`, `String[]`),
        new Parameter(`Id`, `Specifies the breakpoint IDs that this cmdlet gets. Enter the IDs in a comma-separated list. You can also pipe breakpoint IDs to 
Get-PSBreakpoint .`, `Int32[]`),
        new Parameter(`Script`, `Specifies an array of scripts that contain the breakpoints. Enter the path (optional) and names of one or more script files. If you 
omit the path, the default location is the current directory.`, `String[]`),
        new Parameter(`Type`, `Specifies an array of breakpoint types that this cmdlet gets. Enter one or more types. The acceptable values for this parameter are:


- Line


- Command


- Variable




You can also pipe breakpoint types to Get-PSBreakPoint .`, `BreakpointType[]`),
        new Parameter(`Variable`, `Specifies an array of variable breakpoints that are set on the specified variable names. Enter the variable names without dollar 
signs.`, `String[]`),
    ], `Gets the breakpoints that are set in the current session.`, `Get-PSBreakpoint -Command <String[]> [-Script <String[]>] [<CommonParameters>]

Get-PSBreakpoint [-Id] <Int32[]> [<CommonParameters>]

Get-PSBreakpoint [-Script <String[]>] [<CommonParameters>]

Get-PSBreakpoint [-Script <String[]>] -Variable <String[]> [<CommonParameters>]

Get-PSBreakpoint [-Type] {Line | Variable | Command} [-Script <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSCallStack`, [], `Displays the current call stack.`, `Get-PSCallStack [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSDrive`, [
        new Parameter(`LiteralName`, `Specifies the name of the drive.


The value of LiteralName is used exactly as it is typed. No characters are interpreted as wildcards. If the name includes escape 
characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as 
escape sequences.`, `String[]`),
        new Parameter(`Name`, `Specifies, as a string array, the name or name of drives that this cmdlet gets in the operation. Type the drive name or letter 
without a colon (:).`, `String[]`),
        new Parameter(`PSProvider`, `Specifies, as a string array, the Windows PowerShell provider. This cmdlet gets only the drives supported by this provider. Type the 
name of a provider, such as FileSystem, Registry, or Certificate.`, `String[]`),
        new Parameter(`Scope`, `Specifies the scope in which this cmdlet gets the drives.


The acceptable values for this parameter are:


- Global


- Local


- Script


- a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent).


"Local" is the default. For more information, see about_Scopes (http://go.microsoft.com/fwlink/?LinkID=113260).`, `String`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Gets drives in the current session.`, `Get-PSDrive [-LiteralName] <String[]> [-PSProvider <String[]>] [-Scope <String>] [-UseTransaction] [<CommonParameters>]

Get-PSDrive [[-Name] <String[]>] [-PSProvider <String[]>] [-Scope <String>] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSHostProcessInfo`, [
        new Parameter(`Id`, `@{Text=}`, `Int32[]`),
        new Parameter(`Name`, `@{Text=}`, `String[]`),
        new Parameter(`Process`, `@{Text=}`, `Process[]`),
    ], ``, `Get-PSHostProcessInfo [-Id] <Int32[]> [<CommonParameters>]

Get-PSHostProcessInfo [[-Name] <String[]>] [<CommonParameters>]

Get-PSHostProcessInfo [-Process] <Process[]> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSProvider`, [
        new Parameter(`PSProvider`, `Specifies the name or names of the Windows PowerShell providers about which this cmdlet gets information.`, `String[]`),
    ], `Gets information about the specified Windows PowerShell provider.`, `Get-PSProvider [[-PSProvider] <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSReadLineKeyHandler`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSReadLineOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSSession`, [
        new Parameter(`AllowRedirection`, `Indicates that this cmdlet allows redirection of this connection to an alternate Uniform Resource Identifier (URI). By default, 
Windows PowerShell does not redirect connections.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the ConnectionUri parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`ApplicationName`, `Specifies the name of an application. This cmdlet connects only to sessions that use the specified application.


Enter the application name segment of the connection URI. For example, in the following connection URI, the application name is 
WSMan: "http://localhost:5985/WSMAN". The application name of a session is stored in the Runspace.ConnectionInfo.AppName property of 
the session.


The value of this parameter is used to select and filter sessions. It does not change the application that the session uses.`, `String`),
        new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate credentials for the session in which the Get-PSSession command runs.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the ComputerName or 
ConnectionUri parameter.


The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential.




The default value is Default.


For information about the values of this parameter, see the description of the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the Microsoft Developer 
Network (MSDN) library.


CAUTION: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to a remote 
computer to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a 
remote network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.

This parameter was introduced in Windows PowerShell 3.0.`, `AuthenticationMechanism`),
        new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to create the session in which the 
Get-PSSession command runs. Enter the certificate thumbprint of the certificate.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the ComputerName or 
ConnectionUri parameter.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they do not work 
with domain accounts.


To get a certificate thumbprint, use a Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`ComputerName`, `Specifies an array of names of computers. Gets the sessions that connect to the specified computers. Wildcard characters are not 
permitted. There is no default value.


Beginning in Windows PowerShell 3.0, PSSession objects are stored on the computers at the remote end of each connection. To get the 
sessions on the specified computers, Windows PowerShell creates a temporary connection to each computer and runs a Get-PSSession 
command.


Type the NetBIOS name, an IP address, or a fully-qualified domain name of one or more computers. To specify the local computer, type 
the computer name, localhost, or a dot (.).


Note: This parameter gets sessions only from computers that run Windows PowerShell 3.0 or later versions of Windows PowerShell. 
Earlier versions do not store sessions.`, `String[]`),
        new Parameter(`ConfigurationName`, `Specifies the name of a configuration. This cmdlet gets only to sessions that use the specified session configuration.


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the configuration 
name, the following schema URI is prepended: http://schemas.microsoft.com/powershell. The configuration name of a session is stored 
in the ConfigurationName property of the session.


The value of this parameter is used to select and filter sessions. It does not change the session configuration that the session uses.


For more information about session configurations, see about_Session_Configurations.`, `String`),
        new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint for the temporary session in which the Get-PSSession command runs. The URI must 
be fully qualified.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the ConnectionUri parameter.


The format of this string is:


<Transport>://<ComputerName>:<Port>/<ApplicationName>


The default value is: http://localhost:5985/WSMAN.


If you do not specify a ConnectionUri , you can use the UseSSL , ComputerName , Port , and ApplicationName parameters to specify the 
ConnectionURI values. Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a 
Transport segment, but do not specify a port, the session is created with standards ports: 80 for HTTP and 443 for HTTPS. To use the 
default ports for Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection unless you use 
the AllowRedirection parameter in the command.


This parameter was introduced in Windows PowerShell 3.0.


This parameter gets sessions only from computers that run Windows PowerShell 3.0 or later versions of Windows PowerShell. Earlier 
versions do not store sessions.`, `Uri[]`),
        new Parameter(`ContainerId`, `Specifies an array of IDs of containers. This cmdlet starts an interactive session with each of the specified containers. To see the 
containers that are available to you, use the Get-Container cmdlet.`, `String[]`),
        new Parameter(`Credential`, `Specifies a user credential. This cmdlet runs the command with the permissions of the specified user. Specify a user account that has 
permission to connect to the remote computer and run a Get-PSSession command. The default is the current user. Type a user name, such 
as "User01", "Domain01\\User01", or "User@Domain.com", or enter a PSCredential object, such as one returned by the Get-Credential 
cmdlet. When you type a user name, this cmdlet prompts you for a password.


This parameter configures to the temporary connection that is created to run a Get-PSSession command with the ComputerName or 
ConnectionUri parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
        new Parameter(`Id`, `Specifies an array of session IDs. This cmdlet gets only the sessions with the specified IDs. Type one or more IDs, separated by 
commas, or use the range operator (..) to specify a range of IDs. You cannot use the ID parameter together with the ComputerName 
parameter.


An ID is an integer that uniquely identifies the user-managed sessions in the current session. It is easier to remember and type than 
the InstanceId , but it is unique only within the current session. The ID of a session is stored in the ID property of the session.`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies an array of instance IDs of sessions. This cmdlet gets only the sessions with the specified instance IDs.


The instance ID is a GUID that uniquely identifies a session on a local or remote computer. The InstanceID is unique, even when you 
have multiple sessions running in Windows PowerShell.


The instance ID of a session is stored in the InstanceID property of the session.`, `Guid[]`),
        new Parameter(`Name`, `Specifies an array of session names. This cmdlet gets only the sessions that have the specified friendly names. Wildcard characters 
are permitted.


The friendly name of a session is stored in the Name property of the session.`, `String[]`),
        new Parameter(`Port`, `Specifies the specified network port that is used for the temporary connection in which the Get-PSSession command runs. To connect to 
a remote computer, the remote computer must be listening on the port that the connection uses. The default ports are 5985, which is 
the WinRM port for HTTP, and 5986, which is the WinRM port for HTTPS.


Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that port. To configure the 
listener, type the following two commands at the Windows PowerShell prompt:


"Remove-Item -Path WSMan:\\Localhost\\listener\\listener* -Recurse"


"New-Item -Path WSMan:\\Localhost\\listener -Transport http -Address * -Port <port-number>"


This parameter configures to the temporary connection that is created to run a Get-PSSession command with the ComputerName or 
ConnectionUri parameter.


Do not use the Port parameter unless you must. The Port set in the command applies to all computers or sessions on which the command 
runs. An alternate port setting might prevent the command from running on all computers.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
        new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is set. Otherwise, 
the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference variable and in the 
session configuration. However, they do not take precedence over maximum values, quotas or limits set in the session configuration.


For a description of the session options, including the default values, see New-PSSessionOption. For information about the 
$PSSessionOption preference variable, see about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248) in the Microsoft 
TechNet library. For more information about session configurations, see about_Session_Configurations 
(http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
        new Parameter(`State`, `Specifies a session state. This cmdlet gets only sessions in the specified state. The acceptable values for this parameter are: All, 
Opened, Disconnected, Closed, and Broken. The default value is All.


The session state value is relative to the current sessions. Sessions that were not created in the current sessions and are not 
connected to the current session have a state of Disconnected even when they are connected to a different session.


The state of a session is stored in the State property of the session.


This parameter was introduced in Windows PowerShell 3.0.`, `SessionFilterState`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run the Get-PSSession command. If you omit this 
parameter or enter a value of 0 (zero), the default value, 32, is used. The throttle limit applies only to the current command, not 
to the session or to the computer.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
        new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to establish the connection in which the Get-PSSession 
command runs. By default, SSL is not used. If you use this parameter, but SSL is not available on the port used for the command, the 
command fails.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the ComputerName parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`VMId`, `Specifies an array of ID of virtual machines. This cmdlet starts an interactive session with each of the specified virtual machines. 
To see the virtual machines that are available to you, use the following command:


"Get-VM | Select-Object -Property Name, ID"`, `Guid[]`),
        new Parameter(`VMName`, `Specifies an array of names of virtual machines. This cmdlet starts an interactive session with each of the specified virtual 
machines. To see the virtual machines that are available to you, use the Get-VM cmdlet.`, `String[]`),
    ], `Gets the Windows PowerShell sessions on local and remote computers.`, `Get-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Credential <PSCredential>] -InstanceId <Guid[]> [-SessionOption <PSSessionOption>] [-State {All | Opened | Disconnected | Closed | 
Broken}] [-ThrottleLimit <Int32>] [<CommonParameters>]

Get-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Credential <PSCredential>] [-Name <String[]>] [-SessionOption <PSSessionOption>] [-State {All | Opened | Disconnected | Closed | 
Broken}] [-ThrottleLimit <Int32>] [<CommonParameters>]

Get-PSSession [-ComputerName] <String[]> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Credential <PSCredential>] [-Name <String[]>] [-Port <Int32>] [-SessionOption <PSSessionOption>] [-State {All | Opened | 
Disconnected | Closed | Broken}] [-ThrottleLimit <Int32>] [-UseSSL] [<CommonParameters>]

Get-PSSession [-ComputerName] <String[]> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Credential <PSCredential>] -InstanceId <Guid[]> [-Port <Int32>] [-SessionOption <PSSessionOption>] [-State {All | Opened | 
Disconnected | Closed | Broken}] [-ThrottleLimit <Int32>] [-UseSSL] [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] -InstanceId <Guid[]> [-State {All | Opened | Disconnected | Closed | Broken}] -VMId 
<Guid[]> [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] -ContainerId <String[]> [-Name <String[]>] [-State {All | Opened | Disconnected | Closed 
| Broken}] [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] -ContainerId <String[]> -InstanceId <Guid[]> [-State {All | Opened | Disconnected | 
Closed | Broken}] [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] [-Name <String[]>] [-State {All | Opened | Disconnected | Closed | Broken}] -VMId 
<Guid[]> [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] [-Name <String[]>] [-State {All | Opened | Disconnected | Closed | Broken}] -VMName 
<String[]> [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] -InstanceId <Guid[]> [-State {All | Opened | Disconnected | Closed | Broken}] -VMName 
<String[]> [<CommonParameters>]

Get-PSSession [-Id] <Int32[]> [<CommonParameters>]

Get-PSSession [-InstanceId <Guid[]>] [<CommonParameters>]

Get-PSSession [-Name <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSSessionCapability`, [
        new Parameter(`ConfigurationName`, `Specifies the constrained session configuration (endpoint) that you are inspecting.`, `String`),
        new Parameter(`Full`, `Indicates that this cmdlet returns the entire initial session state for the specified user at the specified constrained endpoint.`, `SwitchParameter`),
        new Parameter(`Username`, `Specifies the user whose capabilities you are inspecting.`, `String`),
    ], `Gets the capabilities of a specific user on a constrained session configuration.`, `Get-PSSessionCapability [-ConfigurationName] <String> [-Username] <String> [-Full] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSSessionConfiguration`, [
        new Parameter(`Force`, `Suppresses the prompt to restart the WinRM service, if the service is not already running.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies an array of names. This cmdlet gets the session configurations with the specified name or name pattern. Enter one or more 
session configuration names. Wildcard characters are permitted.`, `String[]`),
    ], `Gets the registered session configurations on the computer.`, `Get-PSSessionConfiguration [[-Name] <String[]>] [-Force] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-PSSnapin`, [
        new Parameter(`Name`, `Specifies an array of snap-in names. This cmdlet gets only the specified Windows PowerShell snap-ins. Wildcard characters are 
permitted.`, `String[]`),
        new Parameter(`Registered`, `Indicates that this cmdlet gets the Windows PowerShell snap-ins that have been registered on the system even if they have not yet 
been added to the session.


The snap-ins that are installed with Windows PowerShell do not appear in this list.


Without this parameter, Get-PSSnapin gets the Windows PowerShell snap-ins that have been added to the session.`, `SwitchParameter`),
    ], `Gets the Windows PowerShell snap-ins on the computer.`, `Get-PSSnapin [[-Name] <String[]>] [-Registered] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Random`, [
        new Parameter(`Count`, `Specifies how many objects are returned. The default is 1. If the value of Count exceeds the number of objects in the collection, 
Get-Random returns all of the objects in random order.`, `Int32`),
        new Parameter(`InputObject`, `Specifies a collection of objects. Get-Random gets randomly selected objects in random order from the collection. Enter the objects, 
a variable that contains the objects, or a command or expression that gets the objects. You can also pipe a collection of objects to 
Get-Random .`, `Object[]`),
        new Parameter(`Maximum`, `Specifies a maximum value for the random number. Get-Random returns a value that is less than the maximum (not equal). Enter a 32-bit 
integer or a double-precision floating-point number, or an object that can be converted to an integer or double, such as a numeric 
string ("100"). On a 64-bit computer, you can also enter a 64-bit integer.


The value of Maximum must be greater than (not equal to) the value of Minimum .


If the value of Maximum or Minimum is a floating-point number, Get-Random returns a randomly selected floating-point number. If the 
value of Minimum is a double (a floating-point number), the default value of Maximum is Double.MaxValue. Otherwise, the default value 
is Int32.MaxValue.


On a 64-bit computer, if the value of Minimum is a 32-bit integer, the default value of Maximum is Int32.MaxValue. If the value of 
Minimum is a double (a floating-point number), the default value of Maximum is Double.MaxValue. Otherwise, the default value is 
Int64.MaxValue.`, `Object`),
        new Parameter(`Minimum`, `Specifies a minimum value for the random number. Enter a 32-bit integer or a double-precision floating-point number, or an object 
that can be converted to an integer or double, such as a numeric string ("100"). On a 64-bit computer, you can enter a 64-bit 
integer. The default value is 0 (zero).


The value of Minimum must be less than (not equal to) the value of Maximum . If the value of Maximum or Minimum is a floating-point 
number, Get-Random returns a randomly selected floating-point number.`, `Object`),
        new Parameter(`SetSeed`, `Specifies a seed value for the random number generator. This seed value is used for the current command and for all subsequent 
Get-Random commands in the current session until you use SetSeed again or close the session. You cannot reset the seed to its 
default, clock-based value.


The SetSeed parameter is not required. By default, Get-Random uses the system clock to generate a seed value. Because SetSeed results 
in non-random behavior, it is typically used only when trying to reproduce behavior, such as when debugging or analyzing a script 
that includes Get-Random commands.`, `Int32`),
    ], `Gets a random number, or selects objects randomly from a collection.`, `Get-Random [-InputObject] <Object[]> [-Count <Int32>] [-SetSeed <Int32>] [<CommonParameters>]

Get-Random [[-Maximum] <Object>] [-Minimum <Object>] [-SetSeed <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Runspace`, [
        new Parameter(`Id`, `@{Text=}`, `Int32[]`),
        new Parameter(`InstanceId`, `@{Text=}`, `Guid[]`),
        new Parameter(`Name`, `@{Text=}`, `String[]`),
    ], `Gets active runspaces within a Windows PowerShellhost process.`, `Get-Runspace [-Id] <Int32[]> [<CommonParameters>]

Get-Runspace [-InstanceId] <Guid[]> [<CommonParameters>]

Get-Runspace [[-Name] <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-RunspaceDebug`, [
        new Parameter(`AppDomainName`, `@{Text=}`, `String[]`),
        new Parameter(`ProcessName`, `@{Text=}`, `String`),
        new Parameter(`Runspace`, `@{Text=}`, `Runspace[]`),
        new Parameter(`RunspaceId`, `@{Text=}`, `Int32[]`),
        new Parameter(`RunspaceInstanceId`, `@{Text=}`, `Guid[]`),
        new Parameter(`RunspaceName`, `@{Text=}`, `String[]`),
    ], `Shows runspace debugging options.`, `Get-RunspaceDebug [[-ProcessName] <String>] [[-AppDomainName] <String[]>] [<CommonParameters>]

Get-RunspaceDebug [-Runspace] <Runspace[]> [<CommonParameters>]

Get-RunspaceDebug [-RunspaceId] <Int32[]> [<CommonParameters>]

Get-RunspaceDebug [-RunspaceInstanceId] <Guid[]> [<CommonParameters>]

Get-RunspaceDebug [[-RunspaceName] <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ScheduledJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-ScheduledJobOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SecureBootPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SecureBootUEFI`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Service`, [
        new Parameter(`ComputerName`, `Gets the services running on the specified computers. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name (FQDN) of a remote computer. To specify the local computer, 
type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Get-Service even if your 
computer is not configured to run remote commands.`, `String[]`),
        new Parameter(`DependentServices`, `Indicates that this cmdlet gets only the services that depend upon the specified service.


By default, this cmdlet gets all services.`, `SwitchParameter`),
        new Parameter(`DisplayName`, `Specifies, as a string array, the display names of services to be retrieved. Wildcards are permitted. By default, this cmdlet gets 
all services on the computer.`, `String[]`),
        new Parameter(`Exclude`, `Specifies, as a string array, a service or services that this cmdlet excludes from the operation. The value of this parameter 
qualifies the Name parameter. Enter a name element or pattern, such as "s*". Wildcards are permitted.`, `String[]`),
        new Parameter(`Include`, `Specifies, as a string array, a service or services that this cmdlet includes in the operation. The value of this parameter qualifies 
the Name parameter. Enter a name element or pattern, such as "s*". Wildcards are permitted.`, `String[]`),
        new Parameter(`InputObject`, `Specifies ServiceController objects representing the services to be retrieved. Enter a variable that contains the objects, or type a 
command or expression that gets the objects. You can also pipe a service object to this cmdlet.`, `ServiceController[]`),
        new Parameter(`Name`, `Specifies the service names of services to be retrieved. Wildcards are permitted. By default, this cmdlet gets all of the services on 
the computer.`, `String[]`),
        new Parameter(`RequiredServices`, `Indicates that this cmdlet gets only the services that this service requires.


This parameter gets the value of the ServicesDependedOn property of the service. By default, this cmdlet gets all services.`, `SwitchParameter`),
    ], `Gets the services on a local or remote computer.`, `Get-Service [-ComputerName <String[]>] [-DependentServices] -DisplayName <String[]> [-Exclude <String[]>] [-Include <String[]>] 
[-RequiredServices] [<CommonParameters>]

Get-Service [-ComputerName <String[]>] [-DependentServices] [-Exclude <String[]>] [-Include <String[]>] [-InputObject 
<ServiceController[]>] [-RequiredServices] [<CommonParameters>]

Get-Service [[-Name] <String[]>] [-ComputerName <String[]>] [-DependentServices] [-Exclude <String[]>] [-Include <String[]>] 
[-RequiredServices] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-SystemDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TimeZone`, [
        new Parameter(`Id`, `Specifies, as a string array, the ID or IDs of the time zones that this cmdlet gets.`, `String[]`),
        new Parameter(`ListAvailable`, `Indicates that this cmdlet gets all available time zones.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies, as a string array, the name or names of the time zones that this cmdlet gets.`, `String[]`),
    ], `Gets the current time zone or a list of available time zones.`, `Get-TimeZone -Id <String[]> [<CommonParameters>]

Get-TimeZone -ListAvailable [<CommonParameters>]

Get-TimeZone [[-Name] <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TlsCipherSuite`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TlsEccCurve`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Tpm`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TpmEndorsementKeyInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TpmSupportedFeature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TraceSource`, [
        new Parameter(`Name`, `Specifies the trace sources to get. Wildcards are permitted. The parameter name Name is optional.`, `String[]`),
    ], `Gets Windows PowerShell components that are instrumented for tracing.`, `Get-TraceSource [[-Name] <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Transaction`, [], `Gets the current (active) transaction.`, `Get-Transaction [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TroubleshootingPack`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TrustedProvisioningCertificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-TypeData`, [
        new Parameter(`TypeName`, `Specifies type data as an array only for the types with the specified names. By default, Get-TypeData gets all types in the session.


Enter type names or a name patterns. Full names, or name patterns with wildcard characters are required, even for types in the System 
namespace. Wildcards are supported and the parameter name TypeName is optional. You can also pipe type names to Get-TypeData .`, `String[]`),
    ], `Gets the extended type data in the current session.`, `Get-TypeData [[-TypeName] <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-UevAppxPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-UevConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-UevStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-UevTemplate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-UevTemplateProgram`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-UICulture`, [], `Gets the current UI culture settings in the operating system.`, `Get-UICulture [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Unique`, [
        new Parameter(`AsString`, `Indicates that this cmdlet uses the data as a string. Without this parameter, data is treated as an object, so when you submit a 
collection of objects of the same type to Get-Unique , such as a collection of files, it returns just one (the first). You can use 
this parameter to find the unique values of object properties, such as the file names.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies input for Get-Unique . Enter a variable that contains the objects or type a command or expression that gets the objects.


This cmdlet treats the input submitted by using InputObject as a collection; it does not enumerate individual items in the 
collection. Because the collection is a single item, input submitted by using InputObject is always returned unchanged.`, `PSObject`),
        new Parameter(`OnType`, `Indicates that this cmdlet returns only one object of each type.`, `SwitchParameter`),
    ], `Returns unique items from a sorted list.`, `Get-Unique [-AsString] [-InputObject <PSObject>] [<CommonParameters>]

Get-Unique [-InputObject <PSObject>] [-OnType] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-Variable`, [
        new Parameter(`Exclude`, `Specifies an array of items that this cmdlet excludes from the operation. Wildcards are permitted.`, `String[]`),
        new Parameter(`Include`, `Specifies an array of items upon which the cmdlet will act, excluding all others. Wildcards are permitted.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the variable. Wildcards are permitted. You can also pipe a variable name to Get-Variable .`, `String[]`),
        new Parameter(`Scope`, `Specifies the variables in the scope.The acceptable values for this parameter are:


- Global


- Local


- Script


- A number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent)




Local is the default. For more information, see about_Scopes.`, `String`),
        new Parameter(`ValueOnly`, `Indicates that this cmdlet gets only the value of the variable.`, `SwitchParameter`),
    ], `Gets the variables in the current console.`, `Get-Variable [[-Name] <String[]>] [-Exclude <String[]>] [-Include <String[]>] [-Scope <String>] [-ValueOnly] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WheaMemoryPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WIMBootEntry`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WinAcceptLanguageFromLanguageListOptOut`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WinCultureFromLanguageListOptOut`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WinDefaultInputMethodOverride`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsCapability`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsDeveloperLicense`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsEdition`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsErrorReporting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsImageContent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsOptionalFeature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WindowsSearchSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WinEvent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WinHomeLocation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WinLanguageBarOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WinSystemLocale`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WinUILanguageOverride`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WinUserLanguageList`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WmiObject`, [
        new Parameter(`Amended`, `Indicates whether the objects that are returned from WMI should contain amended information. Typically, amended information is 
localizable information, such as object and property descriptions, that is attached to the WMI object.`, `SwitchParameter`),
        new Parameter(`AsJob`, `Indicates that this cmdlet runs the command as a background job. Use this parameter to run commands that take a long time to finish.


When you use the AsJob parameter, the command returns an object that represents the background job and then displays the command 
prompt. You can continue to work in the session while the job finishes. If Get-WmiObject is used on a remote computer, the job is 
created on the local computer, and the results from remote computers are automatically returned to the local computer. To manage the 
job, use the cmdlets that contain the Job cmdlets. To get the job results, use the Receive-Job cmdlet.


To use this parameter with remote computers, the local and remote computers must be configured for remoting. Additionally, you must 
start Windows PowerShell by using the Run as administrator option in Windows Vista and later versions of Windows. For more 
information, see about_Remote_Requirements.


For more information about Windows PowerShellbackground jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
        new Parameter(`Authentication`, `Specifies the authentication level to be used with the WMI connection. The acceptable values for this parameter are:


-1: Unchanged


0: Default


1: None (No authentication in performed.)


2: Connect (Authentication is performed only when the client establishes a relationship with the application.)


3: Call (Authentication is performed only at the beginning of each call when the application receives the request.)


4: Packet (Authentication is performed on all the data that is received from the client.)


5: PacketIntegrity (All the data that is transferred between the client  and the application is authenticated and verified.)


6: PacketPrivacy (The properties of the other authentication levels are used, and all the data is encrypted.)`, `AuthenticationLevel`),
        new Parameter(`Authority`, `Specifies the authority to use to authenticate the WMI connection. You can specify standard NTLM or Kerberos authentication. To use 
NTLM, set the authority setting to ntlmdomain:<DomainName>, where <DomainName> identifies a valid NTLM domain name. To use Kerberos, 
specify kerberos:<DomainName>\<ServerName>". You cannot include the authority setting when you connect to the local computer.`, `String`),
        new Parameter(`Class`, `Specifies the name of a WMI class. When this parameter is used, the cmdlet retrieves instances of the WMI class.`, `String`),
        new Parameter(`ComputerName`, `Specifies the target computer for the management operation. Enter a fully qualified domain name (FQDN), a NetBIOS name, or an IP 
address. When the remote computer is in a different domain than the local computer, the fully qualified domain name is required.


The default is the local computer. To specify the local computer, such as in a list of computer names, use "localhost", the local 
computer name, or a dot (.).


This parameter does not rely on Windows PowerShell remoting, which uses WS-Management. You can use the ComputerName parameter of 
Get-WmiObject even if your computer is not configured to run WS-Management remote commands.`, `String[]`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user. Type a user name, such as 
User01, Domain01\\User01, or User@Contoso.com. Or, enter a PSCredential object, such as an object that is returned by the 
Get-Credential cmdlet. When you type a user name, you are prompted for a password.`, `PSCredential`),
        new Parameter(`DirectRead`, `Specifies whether direct access to the WMI provider is requested for the specified class without any regard to its base class or to 
its derived classes.`, `SwitchParameter`),
        new Parameter(`EnableAllPrivileges`, `Indicates that this cmdlet enables all the privileges of the current user before the command makes the WMI call.`, `SwitchParameter`),
        new Parameter(`Filter`, `Specifies a Where clause to use as a filter. Uses the syntax of the WMI Query Language (WQL).


Important: Do not include the Where keyword in the value of the parameter. For example, the following commands return only the 
logical disks that have a DeviceID of 'c:' and services that have the name 'WinRM' without using the Where keyword.


"Get-WmiObject Win32_LogicalDisk -filter "DeviceID = 'c:' ""


"Get-WmiObject win32_service -filter "name='WinRM'""`, `String`),
        new Parameter(`Impersonation`, `Specifies the impersonation level to use.


The acceptable values for this parameter are:


0: Default. Reads the local registry for the default impersonation level , which is usually set to "3: Impersonate".


1: Anonymous. Hides the credentials of the caller.


2: Identify. Allows objects to query the credentials of the caller.


3: Impersonate. Allows objects to use the credentials of the caller.


4: Delegate. Allows objects to permit other objects to use the credentials of the caller.`, `ImpersonationLevel`),
        new Parameter(`List`, `Gets the names of the WMI classes in the WMI repository namespace that is specified by the Namespace parameter.


If you specify the List parameter, but not the Namespace parameter, Get-WmiObject uses the Root\\Cimv2 namespace by default. This 
cmdlet does not use the Default Namespace registry entry in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WBEM\\Scripting registry key to 
determine the default namespace.`, `SwitchParameter`),
        new Parameter(`Locale`, `Specifies the preferred locale for WMI objects. Enter a value in MS_<LCID> format.`, `String`),
        new Parameter(`Namespace`, `Specifies the WMI repository namespace where the specified WMI class is located when used with the Class parameter. When used with 
the List parameter, it specifies the namespace from which to gather WMI class information.`, `String`),
        new Parameter(`Property`, `Specifies the WMI class properties that this cmdlet gets information from. Enter the property names.`, `String[]`),
        new Parameter(`Query`, `Specifies WMI Query Language (WQL) statement that this cmdlet runs. This parameter does not support event queries.`, `String`),
        new Parameter(`Recurse`, `Indicates that this cmdlet searches the current namespace and all other namespaces for the class name that is specified by the Class 
parameter.`, `SwitchParameter`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of WMI operations that can be executed simultaneously. This parameter is valid only when the AsJob 
parameter is used in the command.`, `Int32`),
    ], `Gets instances of WMI classes or information about the available classes.`, `Get-WmiObject [-Class] <String> [[-Property] <String[]>] [-Amended] [-AsJob] [-Authentication {Default | None | Connect | Call | 
Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Credential <PSCredential>] 
[-DirectRead] [-EnableAllPrivileges] [-Filter <String>] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] 
[-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Get-WmiObject [[-Class] <String>] [-Amended] [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | 
PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Credential <PSCredential>] [-EnableAllPrivileges] 
[-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-List] [-Locale <String>] [-Namespace <String>] 
[-Recurse] [-ThrottleLimit <Int32>] [<CommonParameters>]

Get-WmiObject [-Amended] [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | 
Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Credential <PSCredential>] [-DirectRead] [-EnableAllPrivileges] 
[-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] -Query <String> 
[-ThrottleLimit <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WSManCredSSP`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Get-WSManInstance`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Group-Object`, [
        new Parameter(`AsHashTable`, `Indicates that this cmdlet returns the group as a hash table. The keys of the hash table are the property values by which the objects 
are grouped. The values of the hash table are the objects that have that property value.


By itself, the AsHashTable parameter returns each hash table in which each key is an instance of the grouped object. When used with 
the AsString parameter, the keys in the hash table are strings.`, `SwitchParameter`),
        new Parameter(`AsString`, `Indicates that this cmdlet converts the hash table keys to strings. By default, the hash table keys are instances of the grouped 
object. This parameter is valid only when used with the AsHashTable parameter.`, `SwitchParameter`),
        new Parameter(`CaseSensitive`, `Indicates that this cmdlet makes the grouping case-sensitive. Without this parameter, the property values of objects in a group might 
have different cases.`, `SwitchParameter`),
        new Parameter(`Culture`, `Specifies the culture to use when comparing strings.`, `String`),
        new Parameter(`InputObject`, `Specifies the objects to group. Enter a variable that contains the objects, or type a command or expression that gets the objects.


When you use the InputObject parameter to submit a collection of objects to Group-Object , Group-Object receives one object that 
represents the collection. As a result, it creates a single group with that object as its member.


To group the objects in a collection, pipe the objects to Group-Object .`, `PSObject`),
        new Parameter(`NoElement`, `Indicates that this cmdlet omits the members of a group from the results.`, `SwitchParameter`),
        new Parameter(`Property`, `Specifies the properties for grouping. The objects are arranged into groups based on the value of the specified property.


The value of the Property parameter can be a new calculated property. To create a calculated, property, create a hash table with an 
Expression key that specifies a string or script block value.`, `Object[]`),
    ], `Groups objects that contain the same value for specified properties.`, `Group-Object [[-Property] <Object[]>] [-AsHashTable] [-AsString] [-CaseSensitive] [-Culture <String>] [-InputObject <PSObject>] 
[-NoElement] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-Alias`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Allows the cmdlet to import an alias that is already defined or is read only. You can use the following command to display 
information about the currently-defined aliases:


"Get-Alias | Select-Object name,Options"


If the corresponding alias is read-only, it will be displayed in the value of the Options property.`, `SwitchParameter`),
        new Parameter(`LiteralPath`, `Specifies the path to a file that includes exported alias information. Unlike the Path parameter, the value of the LiteralPath 
parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose 
it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to a file that includes exported alias information. Wildcards are allowed but they must resolve to a single name.`, `String`),
        new Parameter(`Scope`, `Specifies the scope into which the aliases are imported. The acceptable values for this parameter are:


- Global


- Local


- Script


- A number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent)




The default is Local. For more information, see about_Scopes.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Imports an alias list from a file.`, `Import-Alias [-Confirm] [-Force] -LiteralPath <String> [-PassThru] [-Scope <String>] [-WhatIf] [<CommonParameters>]

Import-Alias [-Path] <String> [-Confirm] [-Force] [-PassThru] [-Scope <String>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-BinaryMiLog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-Certificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-Clixml`, [
        new Parameter(`First`, `Gets only the specified number of objects. Enter the number of objects to get.`, `UInt64`),
        new Parameter(`IncludeTotalCount`, `Reports the total number of objects in the data set (an integer) followed by the selected objects. If the cmdlet cannot determine the 
total count, it displays "Unknown total count." The integer has an Accuracy property that indicates the reliability of the total 
count value. The value of Accuracy ranges from 0.0 to 1.0 where 0.0 means that the cmdlet could not count the objects, 1.0 means that 
the count is exact, and a value between 0.0 and 1.0 indicates an increasingly reliable estimate.`, `SwitchParameter`),
        new Parameter(`LiteralPath`, `Specifies the XML files. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. No characters are 
interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell 
Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the XML files.`, `String[]`),
        new Parameter(`Skip`, `Ignores the specified number of objects and then gets the remaining objects. Enter the number of objects to skip.`, `UInt64`),
    ], `Imports a CLIXML file and creates corresponding objects in Windows PowerShell.`, `Import-Clixml [-First <UInt64>] [-IncludeTotalCount] -LiteralPath <String[]> [-Skip <UInt64>] [<CommonParameters>]

Import-Clixml [-Path] <String[]> [-First <UInt64>] [-IncludeTotalCount] [-Skip <UInt64>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-Counter`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-Csv`, [
        new Parameter(`Delimiter`, `Specifies the delimiter that separates the property values in the CSV file. The default is a comma (,). Enter a character, such as a 
colon (:). To specify a semicolon (;), enclose it in quotation marks.


If you specify a character other than the actual string delimiter in the file, Import-Csv cannot create objects from the CSV strings. 
Instead, it returns the strings.`, `Char`),
        new Parameter(`Encoding`, `Specifies the type of character encoding that was used in the CSV file. The acceptable values for this parameter are:


- Unicode


- UTF7


- UTF8


- ASCII


- UTF32


- BigEndianUnicode


- Default


- OEM




The default is ASCII.

This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`Header`, `Specifies an alternate column header row for the imported file. The column header determines the names of the properties of the 
object that Import-Csv creates.


Enter a comma-separated list of the column headers. Enclose each item in quotation marks (single or double). Do not enclose the 
header string in quotation marks. If you enter fewer column headers than there are columns, the remaining columns will have no 
header. If you enter more headers than there are columns, the extra headers are ignored.


When using the Header parameter, delete the original header row from the CSV file. Otherwise, Import-Csv creates an extra object from 
the items in the header row.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the path to the CSV file to import. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the path to the CSV file to import. You can also pipe a path to Import-Csv .`, `String[]`),
        new Parameter(`UseCulture`, `Indicates that this cmdlet uses the list separator for the current culture as the item delimiter. The default is a comma (,).


To find the list separator for a culture, use the following command: "(Get-Culture).TextInfo.ListSeparator". If you specify a 
character other than the delimiter used in the CSV strings, ConvertFrom-Csv cannot create objects from the CSV strings. Instead, it 
returns the strings.`, `SwitchParameter`),
    ], `Creates table-like custom objects from the items in a CSV file.`, `Import-Csv [[-Path] <String[]>] [[-Delimiter] <Char>] [-Encoding {Unicode | UTF7 | UTF8 | ASCII | UTF32 | BigEndianUnicode | Default 
| OEM}] [-Header <String[]>] [-LiteralPath <String[]>] [<CommonParameters>]

Import-Csv [[-Path] <String[]>] [-Encoding {Unicode | UTF7 | UTF8 | ASCII | UTF32 | BigEndianUnicode | Default | OEM}] [-Header 
<String[]>] [-LiteralPath <String[]>] -UseCulture [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-LocalizedData`, [
        new Parameter(`BaseDirectory`, `Specifies the base directory where the .psd1 files are located. The default is the directory where the script is located. 
Import-LocalizedData searches for the .psd1 file for the script in a language-specific subdirectory of the base directory.`, `String`),
        new Parameter(`BindingVariable`, `Specifies the variable into which the text strings are imported. Enter a variable name without a dollar sign ($).


In Windows PowerShell 2.0, this parameter is required. In Windows PowerShell 3.0, this parameter is optional. If you omit this 
parameter, Import-LocalizedData returns a hash table of the text strings. The hash table is passed down the pipeline or displayed at 
the command line.


When using Import-LocalizedData to replace default text strings specified in the DATA section of a script, assign the DATA section to 
a variable and enter the name of the DATA section variable in the value of the BindingVariable parameter. Then, when 
Import-LocalizedData saves the imported content in the BindingVariable , the imported data will replace the default text strings. If 
you are not specifying default text strings, you can select any variable name.`, `String`),
        new Parameter(`FileName`, `Specifies the name of the data file (.psd1) to be imported. Enter a file name. You can specify a file name that does not include its 
.psd1 file name extension, or you can specify the file name including the .psd1 file name extension.


The FileName parameter is required when Import-LocalizedData is not used in a script. Otherwise, the parameter is optional and the 
default value is the base name of the script. You can use this parameter to direct Import-LocalizedData to search for a different 
.psd1 file.


For example, if the FileName is omitted and the script name is FindFiles.ps1, Import-LocalizedData searches for the FindFiles.psd1 
data file.`, `String`),
        new Parameter(`SupportedCommand`, `Specifies cmdlets and functions that generate only data.


Use this parameter to include cmdlets and functions that you have written or tested. For more information, see 
about_Script_Internationalization.`, `String[]`),
        new Parameter(`UICulture`, `Specifies an alternate UI culture. The default is the value of the $PsUICulture automatic variable. Enter a UI culture in 
<language>-<region> format, such as en-US, de-DE, or ar-SA.


The value of the UICulture parameter determines the language-specific subdirectory (within the base directory) from which 
Import-LocalizedData gets the .psd1 file for the script.


The cmdlet searches for a subdirectory with the same name as the value of the UICulture parameter or the $PsUICulture automatic 
variable, such as de-DE or ar-SA. If it cannot find the directory, or the directory does not contain a .psd1 file for the script, it 
searches for a subdirectory with the name of the language code, such as de or ar. If it cannot find the subdirectory or .psd1 file, 
the command fails and the data is displayed in the default language specified in the script.`, `String`),
    ], `Imports language-specific data into scripts and functions based on the UI culture that is selected for the operating system.`, `Import-LocalizedData [[-BindingVariable] <String>] [[-UICulture] <String>] [-BaseDirectory <String>] [-FileName <String>] 
[-SupportedCommand <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-Module`, [
        new Parameter(`Alias`, `Specifies the aliases that this cmdlet imports from the module into the current session. Enter a comma-separated list of aliases. 
Wildcard characters are permitted.


Some modules automatically export selected aliases into your session when you import the module. This parameter lets you select from 
among the exported aliases.`, `String[]`),
        new Parameter(`ArgumentList`, `Specifies an array of arguments, or parameter values, that are passed to a script module during the Import-Module command. This 
parameter is valid only when you are importing a script module.


You can also refer to the ArgumentList parameter by its alias, args . For more information, see about_Aliases.`, `Object[]`),
        new Parameter(`AsCustomObject`, `Indicates that this cmdlet returns a custom object with members that represent the imported module members. This parameter is valid 
only for script modules.


When you use the AsCustomObject parameter, Import-Module imports the module members into the session and then returns a 
PSCustomObject object instead of a PSModuleInfo object. You can save the custom object in a variable and use dot notation to invoke 
the members.`, `SwitchParameter`),
        new Parameter(`Assembly`, `Specifies an array of assembly objects. This cmdlet imports the cmdlets and providers implemented in the specified assembly objects. 
Enter a variable that contains assembly objects or a command that creates assembly objects. You can also pipe an assembly object to 
Import-Module .


When you use this parameter, only the cmdlets and providers implemented by the specified assemblies are imported. If the module 
contains other files, they are not imported, and you might be missing important members of the module. Use this parameter for 
debugging and testing the module, or when you are instructed to use it by the module author.`, `Assembly[]`),
        new Parameter(`CimNamespace`, `Specifies the namespace of an alternate CIM provider that exposes CIM modules. The default value is the namespace of the Module 
Discovery WMI provider.


Use this parameter to import CIM modules from computers and devices that are not running a Windows operating system.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`CimResourceUri`, `Specifies an alternate location for CIM modules. The default value is the resource URI of the Module Discovery WMI provider on the 
remote computer.


Use this parameter to import CIM modules from computers and devices that are not running a Windows operating system.


This parameter was introduced in Windows PowerShell 3.0.`, `Uri`),
        new Parameter(`CimSession`, `Specifies a CIM session on the remote computer. Enter a variable that contains the CIM session or a command that gets the CIM 
session, such as a Get-CIMSessionhttp://go.microsoft.com/fwlink/?LinkId=227966 command. Import-Module uses the CIM session connection 
to import modules from the remote computer into the current session. When you use the commands from the imported module in the 
current session, the commands actually run on the remote computer.


You can use this parameter to import modules from computers and devices that are not running the Windows operating system, and 
Windows computers that have Windows PowerShell, but do not have Windows PowerShell remoting enabled.


This parameter was introduced in Windows PowerShell 3.0.`, `CimSession`),
        new Parameter(`Cmdlet`, `Specifies an array of cmdlets that this cmdlet imports from the module into the current session. Wildcard characters are permitted.


Some modules automatically export selected cmdlets into your session when you import the module. This parameter lets you select from 
among the exported cmdlets.`, `String[]`),
        new Parameter(`DisableNameChecking`, `Indicates that this cmdlet suppresses the message that warns you when you import a cmdlet or function whose name includes an 
unapproved verb or a prohibited character.


By default, when a module that you import exports cmdlets or functions that have unapproved verbs in their names, Windows PowerShell 
displays the following warning message:


"WARNING: Some imported command names include unapproved verbs which might make them less discoverable.  Use the Verbose parameter 
for more detail or type Get-Verb to see the list of approved verbs."


This message is only a warning. The complete module is still imported, including the non-conforming commands. Although the message is 
displayed to module users, the naming problem should be fixed by the module author.`, `SwitchParameter`),
        new Parameter(`Force`, `Indicates that this cmdlet re-imports a module and its members, even if the module or its members have an access mode of read-only.`, `SwitchParameter`),
        new Parameter(`FullyQualifiedName`, `Specifies the fully qualified name of the module specification.`, `ModuleSpecification[]`),
        new Parameter(`Function`, `Specifies an array of functions that this cmdlet imports from the module into the current session. Wildcard characters are permitted.


Some modules automatically export selected functions into your session when you import the module. This parameter lets you select 
from among the exported functions.`, `String[]`),
        new Parameter(`Global`, `Indicates that this cmdlet imports modules into the global session state so they are available to all commands in the session. By 
default, the commands in a module, including commands from nested modules, are imported into the caller's session state. To restrict 
the commands that a module exports, use an Export-ModuleMember command in the script module.


The Global parameter is equivalent to the Scope parameter with a value of Global.`, `SwitchParameter`),
        new Parameter(`MaximumVersion`, `Specifies a maximum version. This cmdlet imports only a version of the module that is less than or equal to the specified value. If 
no version qualifies, Import-Module generates an error.`, `String`),
        new Parameter(`MinimumVersion`, `Specifies a minimum version. This cmdlet imports only a version of the module that is greater than or equal to the specified value. 
If no version qualifies, Import-Module generates an error.


By default, Import-Module imports the module without checking the version number.


Use the MinimumVersion parameter name or its alias, Version.


To specify an exact version, use the RequiredVersion parameter. You can also use the Module and Version parameters of the #Requires 
keyword to require a specific version of a module in a script.


This parameter was introduced in Windows PowerShell 3.0.`, `Version`),
        new Parameter(`ModuleInfo`, `Specifies an array of module objects to import. Enter a variable that contains the module objects, or a command that gets the module 
objects, such as the following command: "Get-Module -ListAvailable". You can also pipe module objects to Import-Module .`, `PSModuleInfo[]`),
        new Parameter(`Name`, `Specifies the names of the modules to import. Enter the name of the module or the name of a file in the module, such as a .psd1, 
.psm1, .dll, or ps1 file. File paths are optional. Wildcard characters are not permitted. You can also pipe module names and file 
names to Import-Module .


If you omit a path, Import-Module looks for the module in the paths saved in the PSModulePath environment variable 
($env:PSModulePath).


Specify only the module name whenever possible. When you specify a file name, only the members that are implemented in that file are 
imported. If the module contains other files, they are not imported, and you might be missing important members of the module.`, `String[]`),
        new Parameter(`NoClobber`, `Indicates that this cmdlet does not import commands that have the same names as existing commands in the current session. By default, 
Import-Module imports all exported module commands.


Commands that have the same names can hide or replace commands in the session. To avoid command name conflicts in a session, use the 
Prefix or NoClobber parameters. For more information about name conflicts and command precedence, see "Modules and Name Conflicts" in 
about_Modules and about_Command_Precedence.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`PSSession`, `Specifies a Windows PowerShell user-managed session ( PSSession ) from which this cmdlet import modules into the current session. 
Enter a variable that contains a PSSession or a command that gets a PSSession , such as a Get-PSSession command.


When you import a module from a different session into the current session, you can use the cmdlets from the module in the current 
session, just as you would use cmdlets from a local module. Commands that use the remote cmdlets actually run in the remote session, 
but the remoting details are managed in the background by Windows PowerShell.


This parameter uses the Implicit Remoting feature of Windows PowerShell. It is equivalent to using the Import-PSSession cmdlet to 
import particular modules from a session. Import-Module cannot import Windows PowerShell Core modules from another session. The 
Windows PowerShell Core modules have names that begin with Microsoft.PowerShell.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSession`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Prefix`, `Specifies a prefix that this cmdlet adds to the nouns in the names of imported module members.


Use this parameter to avoid name conflicts that might occur when different members in the session have the same name. This parameter 
does not change the module, and it does not affect files that the module imports for its own use. These are known as nested modules. 
This cmdlet affects only the names of members in the current session.


For example, if you specify the prefix UTC and then import a Get-Date cmdlet, the cmdlet is known in the session as Get-UTCDate , and 
it is not confused with the original Get-Date cmdlet.


The value of this parameter takes precedence over the DefaultCommandPrefix property of the module, which specifies the default prefix.`, `String`),
        new Parameter(`RequiredVersion`, `Specifies a version of the module that this cmdlet imports. If the version is not installed, Import-Module generates an error.


By default, Import-Module imports the module without checking the version number.


To specify a minimum version, use the MinimumVersion parameter. You can also use the Module and Version parameters of the #Requires 
keyword to require a specific version of a module in a script.


This parameter was introduced in Windows PowerShell 3.0.


Scripts that use RequiredVersion to import modules that are included with existing releases of the Windows operating system do not 
automatically run in future releases of the Windows operating system. This is because Windows PowerShell module version numbers in 
future releases of the Windows operating system are higher than module version numbers in existing releases of the Windows operating 
system.`, `Version`),
        new Parameter(`Scope`, `Specifies a scope into which this cmdlet imports the module.


The acceptable values for this parameter are:


- Global . Available to all commands in the session. Equivalent to the Global parameter. - Local . Available only in the current 
scope.


By default, the module is imported into the current scope, which could be a script or module.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`Variable`, `Specifies an array of variables that this cmdlet imports from the module into the current session. Enter a list of variables. 
Wildcard characters are permitted.


Some modules automatically export selected variables into your session when you import the module. This parameter lets you select 
from among the exported variables.`, `String[]`),
    ], `Adds modules to the current session.`, `Import-Module [-Assembly] <Assembly[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet <String[]>] 
[-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-NoClobber] [-PassThru] [-Prefix <String>] [-Scope {Local | 
Global}] [-Variable <String[]>] [<CommonParameters>]

Import-Module [-Name] <String[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-CimNamespace <String>] 
[-CimResourceUri <Uri>] -CimSession <CimSession> [-Cmdlet <String[]>] [-DisableNameChecking] [-Force] [-Function <String[]>] 
[-Global] [-MaximumVersion <String>] [-MinimumVersion <Version>] [-NoClobber] [-PassThru] [-Prefix <String>] [-RequiredVersion 
<Version>] [-Scope {Local | Global}] [-Variable <String[]>] [<CommonParameters>]

Import-Module [-FullyQualifiedName] <ModuleSpecification[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet 
<String[]>] [-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-NoClobber] [-PassThru] [-Prefix <String>] [-Scope 
{Local | Global}] [-Variable <String[]>] [<CommonParameters>]

Import-Module [-FullyQualifiedName] <ModuleSpecification[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet 
<String[]>] [-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-NoClobber] -PSSession <PSSession> [-PassThru] [-Prefix 
<String>] [-Scope {Local | Global}] [-Variable <String[]>] [<CommonParameters>]

Import-Module [-Name] <String[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet <String[]>] 
[-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-MaximumVersion <String>] [-MinimumVersion <Version>] [-NoClobber] 
[-PassThru] [-Prefix <String>] [-RequiredVersion <Version>] [-Scope {Local | Global}] [-Variable <String[]>] [<CommonParameters>]

Import-Module [-Name] <String[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet <String[]>] 
[-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-MaximumVersion <String>] [-MinimumVersion <Version>] [-NoClobber] 
-PSSession <PSSession> [-PassThru] [-Prefix <String>] [-RequiredVersion <Version>] [-Scope {Local | Global}] [-Variable <String[]>] 
[<CommonParameters>]

Import-Module [-ModuleInfo] <PSModuleInfo[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet <String[]>] 
[-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-NoClobber] [-PassThru] [-Prefix <String>] [-Scope {Local | 
Global}] [-Variable <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-PackageProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-PfxCertificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-PSSession`, [
        new Parameter(`AllowClobber`, `Indicates that this cmdlet imports the specified commands, even if they have the same names as commands in the current session.


If you import a command with the same name as a command in the current session, the imported command hides or replaces the original 
commands. For more information, see about_Command_Precedence.


By default, Import-PSSession does not import commands that have the same name as commands in the current session.`, `SwitchParameter`),
        new Parameter(`ArgumentList`, `Specifies an array of commands that results from using the specified arguments (parameter values).


For instance, to import the variant of the Get-Item command in the certificate (Cert:) drive in the PSSession in $S, type 
"Import-PSSession -Session $S -Command Get-Item -ArgumentList cert:".`, `Object[]`),
        new Parameter(`Certificate`, `Specifies the client certificate that is used to sign the format files ( .Format.ps1xml) or script module files (.psm1) in the 
temporary module that Import-PSSession * creates.


Enter a variable that contains a certificate or a command or expression that gets the certificate.


To find a certificate, use the Get-PfxCertificate cmdlet or use the Get-ChildItem cmdlet in the Certificate (Cert:) drive. If the 
certificate is not valid or does not have sufficient authority, the command fails.`, `X509Certificate2`),
        new Parameter(`CommandName`, `Specifies commands with the specified names or name patterns. Wildcards are permitted. Use CommandName or its alias, Name .


By default, Import-PSSession imports all commands from the session, except for commands that have the same names as commands in the 
current session. This prevents imported commands from hiding or replacing commands in the session. To import all commands, even those 
that hide or replace other commands, use the AllowClobber parameter.


If you use the CommandName parameter, the formatting files for the commands are not imported unless you use the FormatTypeName 
parameter. Similarly, if you use the FormatTypeName parameter, no commands are imported unless you use the CommandName parameter.`, `String[]`),
        new Parameter(`CommandType`, `Specifies the type of command objects. The default value is Cmdlet. Use CommandType or its alias, Type . The acceptable values for 
this parameter are:


- Alias. The Windows PowerShell aliases in the remote session. - All. The cmdlets and functions in the remote session. - Application. 
All the files other than Windows-PowerShell files in the paths that are listed in the Path environment variable ($env:path) in the 
remote session, including .txt, .exe, and .dll files. - Cmdlet. The cmdlets in the remote session. "Cmdlet" is the default. - 
ExternalScript. The .ps1 files in the paths listed in the Path environment variable ($env:path) in the remote session. - Filter and 
Function. The Windows PowerShell functions in the remote session. - Script. The script blocks in the remote session.`, `CommandTypes`),
        new Parameter(`DisableNameChecking`, `Indicates that this cmdlet suppresses the message that warns you when you import a cmdlet or function whose name includes an 
unapproved verb or a prohibited character.


By default, when a module that you import exports cmdlets or functions that have unapproved verbs in their names, the Windows 
PowerShell displays the following warning message:


"WARNING: Some imported command names include unapproved verbs which might make them less discoverable.  Use the Verbose parameter 
for more detail or type Get-Verb to see the list of approved verbs."


This message is only a warning. The complete module is still imported, including the non-conforming commands. Although the message is 
displayed to module users, the naming problem should be fixed by the module author.`, `SwitchParameter`),
        new Parameter(`FormatTypeName`, `Specifies formatting instructions for the specified Microsoft .NET Framework types. Enter the type names. Wildcards are permitted.


The value of this parameter must be the name of a type that is returned by a Get-FormatData command in the session from which the 
commands are being imported. To get all of the formatting data in the remote session, type *.


If the command does not include either the CommandName or FormatTypeName parameter, Import-PSSession imports formatting instructions 
for all .NET Framework types returned by a Get-FormatData command in the remote session.


If you use the FormatTypeName parameter, no commands are imported unless you use the CommandName parameter.


Similarly, if you use the CommandName parameter, the formatting files for the commands are not imported unless you use the 
FormatTypeName parameter.`, `String[]`),
        new Parameter(`FullyQualifiedModule`, `Specifies modules with names that are specified in the form of ModuleSpecification objects (described by the Remarks section of 
Module Specification Constructor (Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx on MSDN). For 
example, the FullyQualifiedModule parameter accepts a module name that is specified in the format @{ModuleName = "modulename"; 
ModuleVersion = "version_number"} or @{ModuleName = "modulename"; ModuleVersion = "version_number"; Guid = "GUID"}. ModuleName and 
ModuleVersion are required, but Guid is optional.


You cannot specify the FullyQualifiedModule parameter in the same command as a Module parameter; the two parameters are mutually 
exclusive.`, `ModuleSpecification[]`),
        new Parameter(`Module`, `Specifies and array of commands in the Windows PowerShell snap-ins and modules. Enter the snap-in and module names. Wildcards are not 
permitted. Import-PSSession cannot import providers from a snap-in.


For more information, see about_PSSnapins and about_Modules.`, `String[]`),
        new Parameter(`Prefix`, `Specifies a prefix to the nouns in the names of imported commands.


Use this parameter to avoid name conflicts that might occur when different commands in the session have the same name.


For instance, if you specify the prefix Remote and then import a Get-Date cmdlet, the cmdlet is known in the session as 
Get-RemoteDate, and it is not confused with the original Get-Date cmdlet.`, `String`),
        new Parameter(`Session`, `Specifies the PSSession from which the cmdlets are imported. Enter a variable that contains a session object or a command that gets a 
session object, such as a New-PSSession or Get-PSSession command. You can specify only one session. This parameter is required.`, `PSSession`),
    ], `Imports commands from another session into the current session.`, `Import-PSSession [-Session] <PSSession> [[-CommandName] <String[]>] [[-FormatTypeName] <String[]>] [-AllowClobber] [-ArgumentList 
<Object[]>] [-Certificate <X509Certificate2>] [-CommandType {Alias | Function | Filter | Cmdlet | ExternalScript | Application | 
Script | Workflow | Configuration | All}] [-DisableNameChecking] [-FullyQualifiedModule <ModuleSpecification[]>] [-Module <String[]>] 
[-Prefix <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-StartLayout`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-TpmOwnerAuth`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Import-UevConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Initialize-PmemPhysicalDevice`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Initialize-Tpm`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Install-Package`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Install-PackageProvider`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Install-ProvisioningPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Install-TrustedProvisioningCertificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-CimMethod`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-Command`, [
        new Parameter(`AllowRedirection`, `Allows redirection of this connection to an alternate Uniform Resource Identifier (URI).


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different URI. By 
default, Windows PowerShell does not redirect connections, but you can use this parameter to allow it to redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount session option 
value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the MaximumConnectionRedirectionCount property 
of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
        new Parameter(`ApplicationName`, `Specifies the application name segment of the connection URI. Use this parameter to specify the application name when you are not 
using the ConnectionURI parameter in the command.


The default value is the value of the $PSSessionApplicationName preference variable on the local computer. If this preference 
variable is not defined, the default value is WSMAN. This value is appropriate for most uses. For more information, see 
about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248).


The WinRM service uses the application name to select a listener to service the connection request. The value of this parameter 
should match the value of the URLPrefix property of a listener on the remote computer.`, `String`),
        new Parameter(`ArgumentList`, `Supplies the values of local variables in the command. The variables in the command are replaced by these values before the command 
is run on the remote computer. Enter the values in a comma-separated list. Values are associated with variables in the order that 
they are listed. The alias for ArgumentList is Args.


The values in the ArgumentList parameter can be actual values, such as 1024, or they can be references to local variables, such as 
$max.


To use local variables in a command, use the following command format:


"{param($<name1>[, $<name2>]...) <command-with-local-variables>} -ArgumentList <value> -or- <local-variable>"


The param keyword lists the local variables that are used in the command. ArgumentList supplies the values of the variables, in the 
order that they are listed.`, `Object[]`),
        new Parameter(`AsJob`, `Indicates that this cmdlet runs the command as a background job on a remote computer. Use this parameter to run commands that take an 
extensive time to finish.


When you use the AsJob parameter, the command returns an object that represents the job, and then displays the command prompt. You 
can continue to work in the session while the job finishes. To manage the job, use the Job cmdlets. To get the job results, use the 
Receive-Job cmdlet.


The AsJob parameter resembles using the Invoke-Command cmdlet to run a Start-Job command remotely. However, with AsJob , the job is 
created on the local computer, even though the job runs on a remote computer, and the results of the remote job are automatically 
returned to the local computer.


For more information about Windows PowerShell background jobs, see about_Jobs (http://go.microsoft.com/fwlink/?LinkID=113251) and 
about_Remote_Jobs (http://go.microsoft.com/fwlink/?LinkID=135184).`, `SwitchParameter`),
        new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate the user's credentials. The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


CredSSP authentication is available only in Windows Vista, Windows Server 2008, and later versions of the Windows operating system.


For information about the values of this parameter, see the description of the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the Microsoft Developer 
Network (MSDN) library.

CAUTION: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to a remote 
computer to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a 
remote network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
        new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to connect to the disconnected session. 
Enter the certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they do not work 
with domain accounts.


To get a certificate thumbprint, use a Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
        new Parameter(`ComputerName`, `Specifies the computers on which the command runs. The default is the local computer.


When you use the ComputerName parameter, Windows PowerShell creates a temporary connection that is used only to run the specified 
command and is then closed. If you need a persistent connection, use the Session parameter.


Type the NETBIOS name, IP address, or fully qualified domain name of one or more computers in a comma-separated list. To specify the 
local computer, type the computer name, localhost, or a dot (.).


To use an IP address in the value of ComputerName , the command must include the Credential parameter. Also, the computer must be 
configured for HTTPS transport or the IP address of the remote computer must be included in the WinRM TrustedHosts list on the local 
computer. For instructions for adding a computer name to the TrustedHosts list, see "How to Add a Computer to the Trusted Host List" 
in about_Remote_Troubleshooting.


On Windows Vista and later versions of the Windows operating system, to include the local computer in the value of ComputerName , you 
must open Windows PowerShell by using the Run as administrator option.`, `String[]`),
        new Parameter(`ConfigurationName`, `Specifies the session configuration that is used for the new PSSession .


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the configuration 
name, the following schema URI is prepended: http://schemas.microsoft.com/PowerShell.


The session configuration for a session is located on the remote computer. If the specified session configuration does not exist on 
the remote computer, the command fails.


The default value is the value of the $PSSessionConfigurationName preference variable on the local computer. If this preference 
variable is not set, the default is Microsoft.PowerShell. For more information, see about_Preference_Variables.`, `String`),
        new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint of the session. The URI must be fully qualified.


The format of this string is as follows:


"<Transport>://<ComputerName>:<Port>/<ApplicationName>"


The default value is as follows:


"http://localhost:5985/WSMAN"


If you do not specify a connection URI, you can use the UseSSL and Port parameters to specify the connection URI values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport segment, but 
do not specify a port, the session is created with standards ports: 80 for HTTP and 443 for HTTPS. To use the default ports for 
Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection unless you use 
the AllowRedirection parameter in the command.`, `Uri[]`),
        new Parameter(`ContainerId`, `Specifies an array of container IDs.`, `String[]`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01. Or, enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
        new Parameter(`EnableNetworkAccess`, `Indicates that this cmdlet adds an interactive security token to loopback sessions. The interactive token lets you run commands in 
the loopback session that get data from other computers. For example, you can run a command in the session that copies XML files from 
a remote computer to the local computer.


A loopback session is a PSSession that originates and ends on the same computer. To create a loopback session, omit the ComputerName 
parameter or set its value to . (dot), localhost, or the name of the local computer.


By default, loopback sessions are created by using a network token, which might not provide sufficient permission to authenticate to 
remote computers.


The EnableNetworkAccess parameter is effective only in loopback sessions. If you use EnableNetworkAccess when you create a session on 
a remote computer, the command succeeds, but the parameter is ignored.


You can also allow remote access in a loopback session by using the CredSSP value of the Authentication parameter, which delegates 
the session credentials to other computers.


To protect the computer from malicious access, disconnected loopback sessions that have interactive tokens, which are those created 
by using EnableNetworkAccess , can be reconnected only from the computer on which the session was created. Disconnected sessions that 
use CredSSP authentication can be reconnected from other computers. For more information, see Disconnect-PSSession.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`FilePath`, `Specifies a local script that this cmdlet runs on one or more remote computers. Enter the path and file name of the script, or pipe a 
script path to Invoke-Command . The script must reside on the local computer or in a directory that the local computer can access. 
Use ArgumentList to specify the values of parameters in the script.


When you use this parameter, Windows PowerShell converts the contents of the specified script file to a script block, transmits the 
script block to the remote computer, and runs it on the remote computer.`, `String`),
        new Parameter(`HideComputerName`, `Indicates that this cmdlet omits the computer name of each object from the output display. By default, the name of the computer that 
generated the object appears in the display.


This parameter affects only the output display. It does not change the object.`, `SwitchParameter`),
        new Parameter(`InDisconnectedSession`, `Indicates that this cmdlet runs a command or script in a disconnected session.


When you use the InDisconnectedSession parameter, Invoke-Command creates a persistent session on each remote computer, starts the 
command specified by the ScriptBlock or FilePath parameter, and then disconnects from the session. The commands continue to run in 
the disconnected sessions. InDisconnectedSession enables you to run commands without maintaining a connection to the remote sessions. 
Also, because the session is disconnected before any results are returned, InDisconnectedSession makes sure that all command results 
are returned to the reconnected session, instead of being split between sessions.


You cannot use InDisconnectedSession with the Session parameter or the AsJob parameter.


Commands that use InDisconnectedSession return a PSSession object that represents the disconnected session. They do not return the 
command output. To connect to the disconnected session, use the Connect-PSSession or Receive-PSSession cmdlets. To get the results of 
commands that ran in the session, use the Receive-PSSession cmdlet. To run commands that generate output in a disconnected session, 
set the value of the OutputBufferingMode session option to Drop. If you intend to connect to the disconnected session, set the idle 
time-out in the session so that it provides sufficient time for you to connect before deleting the session.


You can set the output buffering mode and idle time-out in the SessionOption parameter or in the $PSSessionOption preference 
variable. For more information about session options, see New-PSSessionOption and about_Preference_Variables.


For more information about the Disconnected Sessions feature, see about_Remote_Disconnected_Sessions.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies input to the command. Enter a variable that contains the objects or type a command or expression that gets the objects.


When using the InputObject parameter, use the $Input automatic variable in the value of the ScriptBlock parameter to represent the 
input objects.`, `PSObject`),
        new Parameter(`JobName`, `Specifies a friendly name for the background job. By default, jobs are named Job<n>, where <n> is an ordinal number.


If you use the JobName parameter in a command, the command is run as a job, and Invoke-Command returns a job object, even if you do 
not include AsJob in the command.


For more information about Windows PowerShell background jobs, see about_Jobs (http://go.microsoft.com/fwlink/?LinkID=113251).`, `String`),
        new Parameter(`NoNewScope`, `Indicates that this cmdlet runs the specified command in the current scope. By default, Invoke-Command runs commands in their own 
scope.


This parameter is valid only in commands that are run in the current session, that is, commands that omit both the ComputerName and 
Session parameters.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Port`, `Specifies the network port on the remote computer that is used for this command. To connect to a remote computer, the remote computer 
must be listening on the port that the connection uses.  The default ports are 5985, which is the WinRM port for HTTP, and 5986, 
which is the WinRM port for HTTPS.


Before using an alternate port, configure the WinRM listener on the remote computer to listen at that port. To configure the 
listener, type the following two commands at the Windows PowerShell prompt:


"Remove-Item -Path WSMan:\\Localhost\\listener\\listener* -Recurse"


"New-Item -Path WSMan:\\Localhost\\listener -Transport http -Address * -Port <port-number>"


Do not use the Port parameter unless you must. The port that is set in the command applies to all computers or sessions on which the 
command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
        new Parameter(`RunAsAdministrator`, `Indicates that this cmdlet invokes a command as an Administrator.`, `SwitchParameter`),
        new Parameter(`ScriptBlock`, `Specifies the commands to run. Enclose the commands in braces ( { } ) to create a script block. This parameter is required.


By default, any variables in the command are evaluated on the remote computer. To include local variables in the command, use 
ArgumentList .`, `ScriptBlock`),
        new Parameter(`Session`, `Specifies an array of sessions in which this cmdlet runs the command. Enter a variable that contains PSSession objects or a command 
that creates or gets the PSSession objects, such as a New-PSSession or Get-PSSession command.


When you create a PSSession , Windows PowerShell establishes a persistent connection to the remote computer. Use a PSSession to run a 
series of related commands that share data. To run a single command or a series of unrelated commands, use the ComputerName 
parameter. For more information, see about_PSSessions.`, `PSSession[]`),
        new Parameter(`SessionName`, `Specifies a friendly name for a disconnected session. You can use the name to refer to the session in subsequent commands, such as a 
Get-PSSession command. This parameter is valid only with the InDisconnectedSession parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
        new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is set. Otherwise, 
the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference variable and in the 
session configuration. However, they do not take precedence over maximum values, quotas or limits set in the session configuration.


For a description of the session options that includes the default values, see New-PSSessionOption . For information about the 
$PSSessionOption preference variable, see about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248). For more 
information about session configurations, see about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this parameter or 
enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer. By default, 
SSL is not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter is an additional protection 
that sends the data across an HTTPS, instead of HTTP.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
        new Parameter(`VMId`, `Specifies an array of IDs of virtual machines.`, `Guid[]`),
        new Parameter(`VMName`, `Specifies an array of names of virtual machines.`, `String[]`),
    ], `Runs commands on local and remote computers.`, `Invoke-Command [[-ConnectionUri] <Uri[]>] [-ScriptBlock] <ScriptBlock> [-AllowRedirection] [-ArgumentList <Object[]>] [-AsJob] 
[-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] 
[-CertificateThumbprint <String>] [-ConfigurationName <String>] [-Credential <PSCredential>] [-EnableNetworkAccess] 
[-HideComputerName] [-InDisconnectedSession] [-InputObject <PSObject>] [-JobName <String>] [-SessionOption <PSSessionOption>] 
[-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [[-ConnectionUri] <Uri[]>] [-FilePath] <String> [-AllowRedirection] [-ArgumentList <Object[]>] [-AsJob] 
[-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-ConfigurationName 
<String>] [-Credential <PSCredential>] [-EnableNetworkAccess] [-HideComputerName] [-InDisconnectedSession] [-InputObject <PSObject>] 
[-JobName <String>] [-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [[-ComputerName] <String[]>] [-ScriptBlock] <ScriptBlock> [-ApplicationName <String>] [-ArgumentList <Object[]>] 
[-AsJob] [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] 
[-CertificateThumbprint <String>] [-ConfigurationName <String>] [-Credential <PSCredential>] [-EnableNetworkAccess] 
[-HideComputerName] [-InDisconnectedSession] [-InputObject <PSObject>] [-JobName <String>] [-Port <Int32>] [-SessionName <String[]>] 
[-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [-UseSSL] [<CommonParameters>]

Invoke-Command [[-ComputerName] <String[]>] [-FilePath] <String> [-ApplicationName <String>] [-ArgumentList <Object[]>] [-AsJob] 
[-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-ConfigurationName 
<String>] [-Credential <PSCredential>] [-EnableNetworkAccess] [-HideComputerName] [-InDisconnectedSession] [-InputObject <PSObject>] 
[-JobName <String>] [-Port <Int32>] [-SessionName <String[]>] [-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [-UseSSL] 
[<CommonParameters>]

Invoke-Command [[-Session] <PSSession[]>] [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsJob] [-HideComputerName] 
[-InputObject <PSObject>] [-JobName <String>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [[-Session] <PSSession[]>] [-FilePath] <String> [-ArgumentList <Object[]>] [-AsJob] [-HideComputerName] [-InputObject 
<PSObject>] [-JobName <String>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [-VMId] <Guid[]> [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] 
-Credential <PSCredential> [-HideComputerName] [-InputObject <PSObject>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] -Credential 
<PSCredential> [-HideComputerName] [-InputObject <PSObject>] [-ThrottleLimit <Int32>] -VMName <String[]> [<CommonParameters>]

Invoke-Command [-VMId] <Guid[]> [-FilePath] <String> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] -Credential 
<PSCredential> [-HideComputerName] [-InputObject <PSObject>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [-FilePath] <String> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] -Credential <PSCredential> 
[-HideComputerName] [-InputObject <PSObject>] [-ThrottleLimit <Int32>] -VMName <String[]> [<CommonParameters>]

Invoke-Command [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] -ContainerId <String[]> 
[-HideComputerName] [-InputObject <PSObject>] [-JobName <String>] [-RunAsAdministrator] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [-FilePath] <String> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] -ContainerId <String[]> 
[-HideComputerName] [-InputObject <PSObject>] [-JobName <String>] [-RunAsAdministrator] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-InputObject <PSObject>] [-NoNewScope] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-CommandInDesktopPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-DscResource`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-Expression`, [
        new Parameter(`Command`, `Specifies the command or expression to run. Type the command or expression or enter a variable that contains the command or 
expression. The Command parameter is required.`, `String`),
    ], `Runs commands or expressions on the local computer.`, `Invoke-Expression [-Command] <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-History`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies the ID of a command in the history. You can type the ID number of the command or the first few characters of the command.


If you type characters, Invoke-History matches the most recent commands first. If you omit this parameter, Invoke-History runs the 
last, or most recent, command. To find the ID number of a command, use the Get-History cmdlet.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Runs commands from the session history.`, `Invoke-History [[-Id] <String>] [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-Item`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation. The value of this parameter qualifies 
the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when retrieving the objects rather than having Windows PowerShell filter the objects after they are retrieved.`, `String`),
        new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value of this parameter qualifies the 
Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path to the item. Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. No characters are 
interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell 
Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the path to the selected item.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Performs the default action on the specified item.`, `Invoke-Item [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] -LiteralPath 
<String[]> [-UseTransaction] [-WhatIf] [<CommonParameters>]

Invoke-Item [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-RestMethod`, [
        new Parameter(`Body`, `Specifies the body of the request. The body is the content of the request that follows the headers. You can also pipe a body value to 
Invoke-RestMethod .


The Body parameter can be used to specify a list of query parameters or specify the content of the response.


When the input is a GET request, and the body is an IDictionary (typically, a hash table), the body is added to the URI as query 
parameters. For other request types (such as POST), the body is set as the value of the request body in the standard name=value 
format.


When the body is a form, or it is the output of another Invoke-WebRequest call, Windows PowerShell sets the request content to the 
form fields.


For example:


"$R = Invoke-WebRequest http://website.com/login.aspx" "$R.Forms[0].Name = "MyName"" "$R.Forms[0].Password = "MyPassword"" 
"Invoke-RestMethod http://website.com/service.aspx -Body $R"


- or -


"Invoke-RestMethod http://website.com/service.aspx -Body $R.Forms[0]"`, `Object`),
        new Parameter(`Certificate`, `Specifies the client certificate that is used for a secure web request. Enter a variable that contains a certificate or a command or 
expression that gets the certificate.


To find a certificate, use Get-PfxCertificate or use the Get-ChildItem cmdlet in the Certificate (Cert:) drive. If the certificate is 
not valid or does not have sufficient authority, the command fails.`, `X509Certificate`),
        new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to send the request. Enter the certificate 
thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they do not work 
with domain accounts.


To get a certificate thumbprint, use the Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
        new Parameter(`ContentType`, `Specifies the content type of the web request.


If this parameter is omitted and the request method is POST, Invoke-RestMethod sets the content type to 
application/x-www-form-urlencoded. Otherwise, the content type is not specified in the call.`, `String`),
        new Parameter(`Credential`, `Specifies a user account that has permission to send the request. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet.`, `PSCredential`),
        new Parameter(`DisableKeepAlive`, `Indicates that the cmdlet sets the KeepAlive value in the HTTP header to False. By default, KeepAlive is True. KeepAlive establishes 
a persistent connection to the server to facilitate subsequent requests.`, `SwitchParameter`),
        new Parameter(`Headers`, `Specifies the headers of the web request. Enter a hash table or dictionary.


To set UserAgent headers, use the UserAgent parameter. You cannot use this parameter to specify UserAgent or cookie headers.`, `IDictionary`),
        new Parameter(`InFile`, `Specifies the file for which this cmdlet gets the content of the web request.


Enter a path and file name. If you omit the path, the default is the current location.`, `String`),
        new Parameter(`MaximumRedirection`, `Specifies how many times Windows PowerShell redirects a connection to an alternate Uniform Resource Identifier (URI) before the 
connection fails. The default value is 5. A value of 0 (zero) prevents all redirection.`, `Int32`),
        new Parameter(`Method`, `Specifies the method used for the web request. The acceptable values for this parameter are:


- Default


- Delete


- Get


- Head


- Merge


- Options


- Patch


- Post


- Put


- Trace`, `WebRequestMethod`),
        new Parameter(`OutFile`, `Specifies the output file that this cmdlet saves the response body. Enter a path and file name. If you omit the path, the default is 
the current location.


By default, Invoke-RestMethod returns the results to the pipeline. To send the results to a file and to the pipeline, use the 
Passthru parameter.`, `String`),
        new Parameter(`PassThru`, `Indicates that the cmdlet returns the results, in addition to writing them to a file. This parameter is valid only when the OutFile 
parameter is also used in the command.`, `SwitchParameter`),
        new Parameter(`Proxy`, `Specifies that the cmdlet uses a proxy server for the request, rather than connecting directly to the Internet resource. Enter the 
URI of a network proxy server.`, `Uri`),
        new Parameter(`ProxyCredential`, `Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the 
current user.


Type a user name, such as "User01" or "Domain01\\User01", or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet.


This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and 
ProxyUseDefaultCredentials parameters in the same command.`, `PSCredential`),
        new Parameter(`ProxyUseDefaultCredentials`, `Indicates that the cmdlet uses the credentials of the current user to access the proxy server that is specified by the Proxy 
parameter.


This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and 
ProxyUseDefaultCredentials parameters in the same command.`, `SwitchParameter`),
        new Parameter(`SessionVariable`, `Specifies a variable for which this cmdlet creates a web request session and saves it in the value. Enter a variable name without the 
dollar sign ($) symbol.


When you specify a session variable, Invoke-RestMethod creates a web request session object and assigns it to a variable with the 
specified name in your Windows PowerShell session. You can use the variable in your session as soon as the command completes.


Unlike a remote session, the web request session is not a persistent connection. It is an object that contains information about the 
connection and the request, including cookies, credentials, the maximum redirection value, and the user agent string. You can use it 
to share state and data among web requests.


To use the web request session in subsequent web requests, specify the session variable in the value of the WebSession parameter. 
Windows PowerShell uses the data in the web request session object when establishing the new connection. To override a value in the 
web request session, use a cmdlet parameter, such as UserAgent or Credential . Parameter values take precedence over values in the 
web request session.


You cannot use the SessionVariable and WebSession parameters in the same command.`, `String`),
        new Parameter(`TimeoutSec`, `Specifies how long the request can be pending before it times out. Enter a value in seconds. The default value, 0, specifies an 
indefinite time-out.


A Domain Name System (DNS) query can take up to 15 seconds to return or time out. If your request contains a host name that requires 
resolution, and you set TimeoutSec to a value greater than zero, but less than 15 seconds, it can take 15 seconds or more before a 
WebException is thrown, and your request times out.`, `Int32`),
        new Parameter(`TransferEncoding`, `Specifies a value for the transfer-encoding HTTP response header. The acceptable values for this parameter are:


- Chunked


- Compress


- Deflate


- GZip


- Identity`, `String`),
        new Parameter(`Uri`, `Specifies the Uniform Resource Identifier (URI) of the Internet resource to which the web request is sent. This parameter supports 
HTTP, HTTPS, FTP, and FILE values.


This parameter is required. The parameter name ( Uri ) is optional.`, `Uri`),
        new Parameter(`UseBasicParsing`, `Indicates that the cmdlet uses basic parsing.


The Body parameter can be used to specify a list of query parameters or specify the content of the response.


When the input is a GET request, and the body is an IDictionary (typically, a hash table), the body is added to the URI as query 
parameters. For other request types (such as POST), the body is set as the value of the request body in the standard name=value 
format.


When the body is a form, or it is the output of another Invoke-WebRequest call, Windows PowerShell sets the request content to the 
form fields.


For example:


"$R = Invoke-WebRequest http://website.com/login.aspx" "$R.Forms[0].Name = "MyName"" "$R.Forms[0].Password = "MyPassword"" 
"Invoke-RestMethod http://website.com/service.aspx -Body $R"


- or -


"Invoke-RestMethod http://website.com/service.aspx -Body $R.Forms[0]"`, `SwitchParameter`),
        new Parameter(`UseDefaultCredentials`, `Indicates that the cmdlet uses the credentials of the current user to send the web request.`, `SwitchParameter`),
        new Parameter(`UserAgent`, `Specifies a user agent string for the web request.


The default user agent is similar to Mozilla/5.0 (Windows NT; Windows NT 6.1; en-US) WindowsPowerShell/3.0 with slight variations for 
each operating system and platform.


To test a website with the standard user agent string that is used by most Internet browsers, use the properties of the 
PSUserAgenthttp://msdn.microsoft.com/en-us/library/windows/desktop/hh484857(v=vs.85).aspx class, such as Chrome, FireFox, 
InternetExplorer, Opera, and Safari.


For example, the following command uses the user agent string for Internet.


"Invoke-WebRequest -Uri http://website.com/ -UserAgent ([Microsoft.PowerShell.Commands.PSUserAgent]::InternetExplorer)"`, `String`),
        new Parameter(`WebSession`, `Specifies a web request session. Enter the variable name, including the dollar sign ($).


To override a value in the web request session, use a cmdlet parameter, such as UserAgent or Credential . Parameter values take 
precedence over values in the web request session.


Unlike a remote session, the web request session is not a persistent connection. It is an object that contains information about the 
connection and the request, including cookies, credentials, the maximum redirection value, and the user agent string. You can use it 
to share state and data among web requests.


To create a web request session, enter a variable name (without a dollar sign) in the value of the SessionVariable parameter of an 
Invoke-RestMethod command. Invoke-RestMethod creates the session and saves it in the variable. In subsequent commands, use the 
variable as the value of the WebSession parameter.


You cannot use the SessionVariable and WebSession parameters in the same command.`, `WebRequestSession`),
    ], `Sends an HTTP or HTTPS request to a RESTful web service.`, `Invoke-RestMethod [-Uri] <Uri> [-Body <Object>] [-Certificate <X509Certificate>] [-CertificateThumbprint <String>] [-ContentType 
<String>] [-Credential <PSCredential>] [-DisableKeepAlive] [-Headers <IDictionary>] [-InFile <String>] [-MaximumRedirection <Int32>] 
[-Method {Default | Get | Head | Post | Put | Delete | Trace | Options | Merge | Patch}] [-OutFile <String>] [-PassThru] [-Proxy 
<Uri>] [-ProxyCredential <PSCredential>] [-ProxyUseDefaultCredentials] [-SessionVariable <String>] [-TimeoutSec <Int32>] 
[-TransferEncoding {chunked | compress | deflate | gzip | identity}] [-UseBasicParsing] [-UseDefaultCredentials] [-UserAgent 
<String>] [-WebSession <WebRequestSession>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-TroubleshootingPack`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-WebRequest`, [
        new Parameter(`Body`, `Specifies the body of the request. The body is the content of the request that follows the headers. You can also pipe a body value to 
Invoke-WebRequest .


The Body parameter can be used to specify a list of query parameters or specify the content of the response.


When the input is a GET request and the body is an IDictionary (typically, a hash table), the body is added to the URI as query 
parameters. For other GET requests, the body is set as the value of the request body in the standard name=value format.


When the body is a form, or it is the output of an Invoke-WebRequest call, Windows PowerShell sets the request content to the form 
fields.


For example:


"$R = Invoke-WebRequest http://website.com/login.aspx" "$R.Forms[0].Name = "MyName"" "$R.Forms[0].Password = "MyPassword"" 
"Invoke-RestMethod http://website.com/service.aspx -Body $R"


- or -


"Invoke-RestMethod http://website.com/service.aspx -Body $R.Forms[0]"`, `Object`),
        new Parameter(`Certificate`, `Specifies the client certificate that is used for a secure web request. Enter a variable that contains a certificate or a command or 
expression that gets the certificate.


To find a certificate, use Get-PfxCertificate or use the Get-ChildItem cmdlet in the Certificate (Cert:) drive. If the certificate is 
not valid or does not have sufficient authority, the command fails.`, `X509Certificate`),
        new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to send the request. Enter the certificate 
thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they do not work 
with domain accounts.


To get a certificate thumbprint, use the Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
        new Parameter(`ContentType`, `Specifies the content type of the web request.


If this parameter is omitted and the request method is POST, Invoke-WebRequest sets the content type to 
application/x-www-form-urlencoded. Otherwise, the content type is not specified in the call.`, `String`),
        new Parameter(`Credential`, `Specifies a user account that has permission to send the request. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet.`, `PSCredential`),
        new Parameter(`DisableKeepAlive`, `Indicates that the cmdlet sets the KeepAlive value in the HTTP header to False. By default, KeepAlive is True. KeepAlive establishes 
a persistent connection to the server to facilitate subsequent requests.`, `SwitchParameter`),
        new Parameter(`Headers`, `Specifies the headers of the web request. Enter a hash table or dictionary.


To set UserAgent headers, use the UserAgent parameter. You cannot use this parameter to specify UserAgent or cookie headers.`, `IDictionary`),
        new Parameter(`InFile`, `Gets the content of the web request from a file.


Enter a path and file name. If you omit the path, the default is the current location.`, `String`),
        new Parameter(`MaximumRedirection`, `Specifies how many times Windows PowerShell redirects a connection to an alternate Uniform Resource Identifier (URI) before the 
connection fails. The default value is 5. A value of 0 (zero) prevents all redirection.`, `Int32`),
        new Parameter(`Method`, `Specifies the method used for the web request. The acceptable values for this parameter are:


- Default


- Delete


- Get


- Head


- Merge


- Options


- Patch


- Post


- Put


- Trace`, `WebRequestMethod`),
        new Parameter(`OutFile`, `Specifies the output file for which this cmdlet saves the response body. Enter a path and file name. If you omit the path, the 
default is the current location.


By default, Invoke-WebRequest returns the results to the pipeline. To send the results to a file and to the pipeline, use the 
Passthru parameter.`, `String`),
        new Parameter(`PassThru`, `Indicates that the cmdlet returns the results, in addition to writing them to a file. This parameter is valid only when the OutFile 
parameter is also used in the command.`, `SwitchParameter`),
        new Parameter(`Proxy`, `Specifies a proxy server for the request, rather than connecting directly to the Internet resource. Enter the URI of a network proxy 
server.`, `Uri`),
        new Parameter(`ProxyCredential`, `Specifies a user account that has permission to use the proxy server that is specified by the Proxy parameter. The default is the 
current user.


Type a user name, such as "User01" or "Domain01\\User01", or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet.


This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and 
ProxyUseDefaultCredentials parameters in the same command.`, `PSCredential`),
        new Parameter(`ProxyUseDefaultCredentials`, `Indicates that the cmdlet uses the credentials of the current user to access the proxy server that is specified by the Proxy 
parameter.


This parameter is valid only when the Proxy parameter is also used in the command. You cannot use the ProxyCredential and 
ProxyUseDefaultCredentials parameters in the same command.`, `SwitchParameter`),
        new Parameter(`SessionVariable`, `Specifies a variable for which this cmdlet creates a web request session and saves it in the value. Enter a variable name without the 
dollar sign ($) symbol.


When you specify a session variable, Invoke-WebRequest creates a web request session object and assigns it to a variable with the 
specified name in your Windows PowerShell session. You can use the variable in your session as soon as the command completes.


Unlike a remote session, the web request session is not a persistent connection. It is an object that contains information about the 
connection and the request, including cookies, credentials, the maximum redirection value, and the user agent string. You can use it 
to share state and data among web requests.


To use the web request session in subsequent web requests, specify the session variable in the value of the WebSession parameter. 
Windows PowerShell uses the data in the web request session object when establishing the new connection. To override a value in the 
web request session, use a cmdlet parameter, such as UserAgent or Credential . Parameter values take precedence over values in the 
web request session.


You cannot use the SessionVariable and WebSession parameters in the same command.`, `String`),
        new Parameter(`TimeoutSec`, `Specifies how long the request can be pending before it times out. Enter a value in seconds. The default value, 0, specifies an 
indefinite time-out.


A Domain Name System (DNS) query can take up to 15 seconds to return or time out. If your request contains a host name that requires 
resolution, and you set TimeoutSec to a value greater than zero, but less than 15 seconds, it can take 15 seconds or more before a 
WebException is thrown, and your request times out.`, `Int32`),
        new Parameter(`TransferEncoding`, `Specifies a value for the transfer-encoding HTTP response header. The acceptable values for this parameter are:


- Chunked


- Compress


- Deflate


- GZip


- Identity`, `String`),
        new Parameter(`Uri`, `Specifies the Uniform Resource Identifier (URI) of the Internet resource to which the web request is sent. Enter a URI. This 
parameter supports HTTP, HTTPS, FTP, and FILE values.


This parameter is required. The parameter name ( Uri ) is optional.`, `Uri`),
        new Parameter(`UseBasicParsing`, `Indicates that the cmdlet uses the response object for HTML content without Document Object Model (DOM) parsing.


This parameter is required when Internet Explorer is not installed on the computers, such as on a Server Core installation of a 
Windows Server operating system.`, `SwitchParameter`),
        new Parameter(`UseDefaultCredentials`, `Indicates that the cmdet uses the credentials of the current user to send the web request.`, `SwitchParameter`),
        new Parameter(`UserAgent`, `Specifies a user agent string for the web request.


The default user agent is similar to Mozilla/5.0 (Windows NT; Windows NT 6.1; en-US) WindowsPowerShell/3.0 with slight variations for 
each operating system and platform.


To test a website with the standard user agent string that is used by most Internet browsers, use the properties of the 
PSUserAgenthttp://msdn.microsoft.com/en-us/library/windows/desktop/hh484857(v=vs.85).aspx class, such as Chrome, FireFox, 
InternetExplorer, Opera, and Safari.


For example, the following command uses the user agent string for Internet


"Invoke-WebRequest -Uri http://website.com/ -UserAgent ([Microsoft.PowerShell.Commands.PSUserAgent]::InternetExplorer)"`, `String`),
        new Parameter(`WebSession`, `Specifies a web request session. Enter the variable name, including the dollar sign ($).


To override a value in the web request session, use a cmdlet parameter, such as UserAgent or Credential . Parameter values take 
precedence over values in the web request session.


Unlike a remote session, the web request session is not a persistent connection. It is an object that contains information about the 
connection and the request, including cookies, credentials, the maximum redirection value, and the user agent string. You can use it 
to share state and data among web requests.


To create a web request session, enter a variable name (without a dollar sign) in the value of the SessionVariable parameter of an 
Invoke-WebRequest command. Invoke-WebRequest creates the session and saves it in the variable. In subsequent commands, use the 
variable as the value of the WebSession parameter.


You cannot use the SessionVariable and WebSession parameters in the same command.`, `WebRequestSession`),
    ], `Gets content from a web page on the Internet.`, `Invoke-WebRequest [-Uri] <Uri> [-Body <Object>] [-Certificate <X509Certificate>] [-CertificateThumbprint <String>] [-ContentType 
<String>] [-Credential <PSCredential>] [-DisableKeepAlive] [-Headers <IDictionary>] [-InFile <String>] [-MaximumRedirection <Int32>] 
[-Method {Default | Get | Head | Post | Put | Delete | Trace | Options | Merge | Patch}] [-OutFile <String>] [-PassThru] [-Proxy 
<Uri>] [-ProxyCredential <PSCredential>] [-ProxyUseDefaultCredentials] [-SessionVariable <String>] [-TimeoutSec <Int32>] 
[-TransferEncoding {chunked | compress | deflate | gzip | identity}] [-UseBasicParsing] [-UseDefaultCredentials] [-UserAgent 
<String>] [-WebSession <WebRequestSession>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-WmiMethod`, [
        new Parameter(`ArgumentList`, `Specifies the parameters to pass to the called method. The value of this parameter must be an array of objects, and they must appear 
in the order required by the called method. The Invoke-CimCommand cmdlet does not have these limitations.


To determine the order in which to list those objects, run the GetMethodParameters() method on the WMI class, as illustrated in 
Example 1, near the end of this topic.


Important: If the first value is an array that contains more than one element, a second value of $null is required. Otherwise, the 
command generates an error, such as "Unable to cast object of type 'System.Byte' to type 'System.Array'.".


An example using an array of objects ($binSD) followed by a null value ($null) follows:


PS C:\>$acl = get-acl test.txt


PS C:\>$binSD = $acl.GetSecurityDescriptorBinaryForm()


PS C:\>invoke-wmimethod -class Win32_SecurityDescriptorHelper -Name BinarySDToSDDL -argumentlist $binSD, $null`, `Object[]`),
        new Parameter(`AsJob`, `Indicates that this cmdlet runs the command as a background job. Use this parameter to run commands that take a long time to finish.


When you use the AsJob parameter, the command returns an object that represents the background job and then displays the command 
prompt. You can continue to work in the session while the job finishes. If Invoke-WmiMethod is used against a remote computer, the 
job is created on the local computer, and the results from remote computers are automatically returned to the local computer. To 
manage the job, use the cmdlets that contain the Job noun (the Job cmdlets). To get the job results, use the Receive-Job cmdlet.


To use this parameter with remote computers, the local and remote computers must be configured for remoting. Additionally, you must 
start Windows PowerShell by using the Run as administrator option in Windows Vista and later versions of Windows. For more 
information, see about_Remote_Requirements.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
        new Parameter(`Authentication`, `Specifies the authentication level to be used with the WMI connection. The acceptable values for this parameter are:


-1: Unchanged


0: Default


1: None (No authentication in performed.)


2: Connect (Authentication is performed only when the client establishes a relationship with the application.)


3: Call (Authentication is performed only at the beginning of each call when the application receives the request.)


4: Packet (Authentication is performed on all the data that is received from the client.)


5: PacketIntegrity (All the data that is transferred between the client  and the application is authenticated and verified.)


6: PacketPrivacy (The properties of the other authentication levels are used, and all the data is encrypted.)`, `AuthenticationLevel`),
        new Parameter(`Authority`, `Specifies the authority to use to authenticate the WMI connection. You can specify standard Windows NT LAN Manager (NTLM) or Kerberos 
authentication. To use NTLM, set the authority setting to ntlmdomain:<DomainName>, where <DomainName> identifies a valid NTLM domain 
name. To use Kerberos, specify kerberos:<DomainName\\ServerName>. You cannot include the authority setting when you connect to the 
local computer.`, `String`),
        new Parameter(`Class`, `Specifies the WMI class that contains a static method to call.`, `String`),
        new Parameter(`ComputerName`, `Specifies, as a string array, the computers that this cmdlet runs the command on. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more computers. To specify the local computer, type 
the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your computer is not 
configured to run remote commands.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user. Type a user name, such as 
User01, Domain01\\User01, or User@Contoso.com. Or, enter a PSCredential object, such as an object that is returned by the 
Get-Credential cmdlet. When you type a user name, you will be prompted for a password.`, `PSCredential`),
        new Parameter(`EnableAllPrivileges`, `Indicates that this cmdlet enables all the privileges of the current user before the command makes the WMI call.`, `SwitchParameter`),
        new Parameter(`Impersonation`, `Specifies the impersonation level to use. The acceptable values for this parameter are:


0: Default (Reads the local registry for the default impersonation level, which is usually set to "3: Impersonate".)


1: Anonymous (Hides the credentials of the caller.)


2: Identify (Allows objects to query the credentials of the caller.)


3: Impersonate (Allows objects to use the credentials of the caller.)


4: Delegate (Allows objects to permit other objects to use the credentials of the caller.)`, `ImpersonationLevel`),
        new Parameter(`InputObject`, `Specifies a ManagementObject object to use as input. When this parameter is used, all other parameters except the Flag and Argument 
parameters are ignored.`, `ManagementObject`),
        new Parameter(`Locale`, `Specifies the preferred locale for WMI objects. Specify the value of the Locale parameter as an array in the MS_<LCID> format in the 
preferred order.`, `String`),
        new Parameter(`Name`, `Specifies the name of the method to be invoked. This parameter is mandatory and cannot be null or empty.`, `String`),
        new Parameter(`Namespace`, `When used with the Class parameter, this parameter specifies the WMI repository namespace where the referenced WMI class or object is 
located.`, `String`),
        new Parameter(`Path`, `Specifies the WMI object path of a WMI class, or specifies the WMI object path of an instance of a WMI class. The class or the 
instance that you specify must contain the method that is specified in the Name parameter.`, `String`),
        new Parameter(`ThrottleLimit`, `Specifies a throttle value for the number of WMI operations that can be executed simultaneously. This parameter is used together with 
the AsJob parameter. The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Calls WMI methods.`, `Invoke-WmiMethod [-Class] <String> [-Name] <String> [-ArgumentList <Object[]>] [-AsJob] [-Authentication {Default | None | Connect | 
Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] 
[-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] 
[-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-ArgumentList <Object[]>] [-AsJob] [-Confirm] -InputObject <ManagementObject> [-ThrottleLimit 
<Int32>] [-WhatIf] [<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-ArgumentList <Object[]>] [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | 
PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential 
<PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] 
[-Namespace <String>] -Path <String> [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | 
PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace 
<String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | 
PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace 
<String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | 
PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace 
<String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Invoke-WSManAction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Join-DtcDiagnosticResourceManager`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Join-Path`, [
        new Parameter(`ChildPath`, `Specifies the elements to append to the value of the Path parameter. Wildcards are permitted. The ChildPath parameter is required, 
although the parameter name ("ChildPath") is optional.`, `String`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01. Or, enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Path`, `Specifies the main path (or paths) to which the child-path is appended. Wildcards are permitted.


The value of Path determines which provider joins the paths and adds the path delimiters. The Path parameter is required, although 
the parameter name ("Path") is optional.`, `String[]`),
        new Parameter(`Resolve`, `Indicates that this cmdlet displays the items that are referenced by the joined path.`, `SwitchParameter`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Combines a path and a child path into a single path.`, `Join-Path [-Path] <String[]> [-ChildPath] <String> [-Credential <PSCredential>] [-Resolve] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Limit-EventLog`, [
        new Parameter(`ComputerName`, `Specifies remote computers. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name (FQDN) of a remote computer. To specify 
the local computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Limit-EventLog even if your 
computer is not configured to run remote commands.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`LogName`, `Specifies the event logs. Enter the log name (the value of the Log property; not the LogDisplayName) of one or more event logs, 
separated by commas.  Wildcard characters are not permitted. This parameter is required.`, `String[]`),
        new Parameter(`MaximumSize`, `Specifies the maximum size of the event logs in bytes. Enter a value between 64 kilobytes (KB) and 4 gigabytes (GB). The value must 
be divisible by 64 KB (65536).


This parameter specifies the value of the MaximumKilobytes property of the System.Diagnostics.EventLog object that represents a 
classic event log.`, `Int64`),
        new Parameter(`OverflowAction`, `Specifies what happens when the event log reaches its maximum size.


The acceptable values for this parameter are:


- DoNotOverwrite:  Existing entries are retained and new entries are discarded.


- OverwriteAsNeeded:  Each new entry overwrites the oldest entry.


- OverwriteOlder:  New events overwrite events older than the value specified by the MinimumRetentionDays property. If there are no 
events older than specified by the MinimumRetentionDays property value, new events are discarded.


This parameter specifies the value of the OverflowAction property of the System.Diagnostics.EventLog object that represents a classic 
event log.`, `OverflowAction`),
        new Parameter(`RetentionDays`, `Specifies the minimum number of days that an event must remain in the event log.


This parameter specifies the value of the MinimumRetentionDays property of the System.Diagnostics.EventLog object that represents a 
classic event log.`, `Int32`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Sets the event log properties that limit the size of the event log and the age of its entries.`, `Limit-EventLog [-LogName] <String[]> [-ComputerName <String[]>] [-Confirm] [-MaximumSize <Int64>] [-OverflowAction {OverwriteOlder | 
OverwriteAsNeeded | DoNotOverwrite}] [-RetentionDays <Int32>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Measure-Command`, [
        new Parameter(`Expression`, `Specifies the expression that is being timed. Enclose the expression in braces ({}). The parameter name ("Expression") is optional.`, `ScriptBlock`),
        new Parameter(`InputObject`, `Specifies objects representing the expressions to be measured. Enter a variable that contains the objects or type a command or 
expression that gets the objects.`, `PSObject`),
    ], `Measures the time it takes to run script blocks and cmdlets.`, `Measure-Command [-Expression] <ScriptBlock> [-InputObject <PSObject>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Measure-Object`, [
        new Parameter(`Average`, `Indicates that the cmdlet displays the average value of the specified properties.`, `SwitchParameter`),
        new Parameter(`Character`, `Indicates that the cmdlet counts the number of characters in the input object.`, `SwitchParameter`),
        new Parameter(`IgnoreWhiteSpace`, `Indicates that the cmdlet ignores white space in word counts and character counts. By default, white space is not ignored.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the objects to be measured. Enter a variable that contains the objects, or type a command or expression that gets the 
objects.


When you use the InputObject parameter with Measure-Object , instead of piping command results to Measure-Object , the InputObject 
value-even if the value is a collection that is the result of a command, such as "-InputObject (Get-Process)"-is treated as a single 
object. Because InputObject cannot return individual properties from an array or collection of objects, it is recommended that if you 
use Measure-Object to measure a collection of objects for those objects that have specific values in defined properties, you use 
Measure-Object in the pipeline, as shown in the examples in this topic.`, `PSObject`),
        new Parameter(`Line`, `Indicates that the cmdlet counts the number of lines in the input object.`, `SwitchParameter`),
        new Parameter(`Maximum`, `Indicates that the cmdlet displays the maximum value of the specified properties.`, `SwitchParameter`),
        new Parameter(`Minimum`, `Indicates that the cmdlet displays the minimum value of the specified properties.`, `SwitchParameter`),
        new Parameter(`Property`, `Specifies one or more numeric properties to measure. The default is the Count property of the object.`, `String[]`),
        new Parameter(`Sum`, `Indicates that the cmdlet displays the sum of the values of the specified properties.`, `SwitchParameter`),
        new Parameter(`Word`, `Indicates that the cmdlet counts the number of words in the input object.`, `SwitchParameter`),
    ], `Calculates the numeric properties of objects, and the characters, words, and lines in string objects, such as files of text.`, `Measure-Object [[-Property] <String[]>] [-Average] [-InputObject <PSObject>] [-Maximum] [-Minimum] [-Sum] [<CommonParameters>]

Measure-Object [[-Property] <String[]>] [-Character] [-IgnoreWhiteSpace] [-InputObject <PSObject>] [-Line] [-Word] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Merge-CIPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Mount-AppvClientConnectionGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Mount-AppvClientPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Mount-AppxVolume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Mount-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Move-AppxPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Move-Item`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Destination`, `Specifies the path to the location where the items are being moved. The default is the current directory. Wildcards are permitted, 
but the result must specify a single location.


To rename the item being moved, specify a new name in the value of the Destination parameter.`, `String`),
        new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation. The value of this parameter qualifies 
the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when the cmdlet gets the objects, rather than having Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet moves in the operation. The value of this parameter qualifies the 
Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the path to the current location of the items. Unlike the Path parameter, the value of LiteralPath is used exactly as it is 
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to the current location of the items. The default is the current directory. Wildcards are permitted.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Moves an item from one location to another.`, `Move-Item [[-Destination] <String>] [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] 
[-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Move-Item [-Path] <String[]> [[-Destination] <String>] [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Move-ItemProperty`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Destination`, `Specifies the path to the destination location.`, `String`),
        new Parameter(`Exclude`, `Specifies, as a string array, a property or property that this cmdlet excludes from the operation. The value of this parameter 
qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the 
filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the 
provider applies them when this cmdlet gets the objects rather than having Windows PowerShell filter the objects after they are 
retrieved.`, `String`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies, as a string array, a property or property that this cmdlet moves in the operation. The value of this parameter qualifies 
the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the path to the current location of the property. Unlike the Path parameter, the value of LiteralPath is used exactly as it 
is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the property to be moved.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to the current location of the property. Wildcards are permitted.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Moves a property from one location to another.`, `Move-ItemProperty [-Destination] <String> [-Name] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Move-ItemProperty [-Path] <String[]> [-Destination] <String> [-Name] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Alias`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Description`, `Specifies a description of the alias. You can type any string. If the description includes spaces, enclose it in quotation marks.`, `String`),
        new Parameter(`Force`, `Indicates that the cmdlet acts like Set-Alias if the alias named already exists.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies the new alias. You can use any alphanumeric characters in an alias, but the first character cannot be a number.`, `String`),
        new Parameter(`Option`, `Specifies that the cmdlet sets the value of the Options property of the alias. The acceptable values for this parameter are:


- None. Sets no options. (None is the default.)  - ReadOnly. Can be deleted. Cannot be not changed, except by using the Force 
parameter. - Constant. Cannot be deleted or changed. - Private. The alias is available only in the current scope.  - AllScope. The 
alias is copied to any new scopes that are created.


To see the Options * * property of all aliases in the session, type "Get-Alias | Format-Table -Property name, options -autosize".`, `ScopedItemOptions`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Scope`, `Specifies the scope of the new alias. The acceptable values for this parameter are:


- Global


- Local


- Script


- A number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent).




Local is the default. For more information, see about_Scopes.`, `String`),
        new Parameter(`Value`, `Specifies the name of the cmdlet or command element that is being aliased.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates a new alias.`, `New-Alias [-Name] <String> [-Value] <String> [-Confirm] [-Description <String>] [-Force] [-Option {None | ReadOnly | Constant | 
Private | AllScope | Unspecified}] [-PassThru] [-Scope <String>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-AppLockerPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-CertificateNotificationTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-CimInstance`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-CimSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-CimSessionOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-CIPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-CIPolicyRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-DtcDiagnosticTransaction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Event`, [
        new Parameter(`EventArguments`, `Specifies an object that contains options for the event.`, `PSObject[]`),
        new Parameter(`MessageData`, `Specifies additional data associated with the event. The value of this parameter appears in the MessageData property of the event 
object.`, `PSObject`),
        new Parameter(`Sender`, `Specifies the object that raises the event. The default is the Windows PowerShell engine.`, `PSObject`),
        new Parameter(`SourceIdentifier`, `Specifies a name for the new event. This parameter is required, and it must be unique in the session.


The value of this parameter appears in the SourceIdentifier property of the events.`, `String`),
    ], `Creates a new event.`, `New-Event [-SourceIdentifier] <String> [[-Sender] <PSObject>] [[-EventArguments] <PSObject[]>] [[-MessageData] <PSObject>] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-EventLog`, [
        new Parameter(`CategoryResourceFile`, `Specifies the path of the file that contains category strings for the source events. This file is also known as the Category Message 
File.


The file must be present on the computer on which the event log is being created. This parameter does not create or move files.`, `String`),
        new Parameter(`ComputerName`, `Specifies the computers on which this cmdlet creates new event logs. The default is the local computer.


Type the NetBIOS name, an IP address or a fully qualified domain name of a remote computer. To specify the local computer, type the 
computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of New-EventLog even if your 
computer is not configured to run remote commands.`, `String[]`),
        new Parameter(`LogName`, `Specifies the name of the event log.


If the log does not exist, New-EventLog creates the log and uses this value for the Log and LogDisplayName properties of the new 
event log. If the log exists, New-EventLog registers a new source for the event log.`, `String`),
        new Parameter(`MessageResourceFile`, `Specifies the path of the file that contains message formatting strings for the source events. This file is also known as the Event 
Message File.


The file must be present on the computer on which the event log is being created. This parameter does not create or move files.`, `String`),
        new Parameter(`ParameterResourceFile`, `Specifies the path of the file that contains strings used for parameter substitutions in event descriptions. This file is also known 
as the Parameter Message File.


The file must be present on the computer on which the event log is being created. This parameter does not create or move files.`, `String`),
        new Parameter(`Source`, `Specifies the names of the event log sources, such as application programs that write to the event log. This parameter is required.`, `String[]`),
    ], `Creates a new event log and a new event source on a local or remote computer.`, `New-EventLog [-LogName] <String> [-Source] <String[]> [[-ComputerName] <String[]>] [-CategoryResourceFile <String>] 
[-MessageResourceFile <String>] [-ParameterResourceFile <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-FileCatalog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Item`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Force`, `Forces this cmdlet to create an item that writes over an existing read-only item. Implementation varies from provider to provider. 
For more information, see about_Providers. Even using the Force parameter, the cmdlet cannot override security restrictions.`, `SwitchParameter`),
        new Parameter(`ItemType`, `Specifies the provider-specified type of the new item. Starting in Windows PowerShell 5.0, you can create symbolic links by 
specifying SymbolicLink as the value of this parameter.`, `String`),
        new Parameter(`Name`, `Specifies the name of the new item.


You can specify the name of the new item in the Name or Path parameter value, and you can specify the path of the new item in Name or 
Path value.`, `String`),
        new Parameter(`Path`, `Specifies the path of the location of the new item. Wildcard characters are permitted.


You can specify the name of the new item in Name , or include it in Path .`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`Value`, `Specifies the value of the new item. You can also pipe a value to New-Item .`, `Object`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates a new item.`, `New-Item [[-Path] <String[]>] [-Confirm] [-Credential <PSCredential>] [-Force] [-ItemType <String>] -Name <String> [-UseTransaction] 
[-Value <Object>] [-WhatIf] [<CommonParameters>]

New-Item [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Force] [-ItemType <String>] [-UseTransaction] [-Value <Object>] 
[-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ItemProperty`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies items that this cmdlet omits. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path parameter.


The syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when it retrieves the objects instead of having Windows PowerShell filter the objects 
after they are retrieved.`, `String`),
        new Parameter(`Force`, `Forces the cmdlet to create a property on an object that cannot otherwise be accessed by the user. Implementation varies from 
provider to provider. For more information, see about_Providers.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies items that this cmdlet includes. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as *.txt. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path of the item property. The value of the LiteralPath parameter is used exactly as it is typed. No characters are 
interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation 
marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Name`, `Specifies a name for the new property. If the property is a registry entry, this parameter specifies the name of the entry.`, `String`),
        new Parameter(`Path`, `Specifies the path of the item. This parameter identifies the item to which this cmdlet adds the new property.`, `String[]`),
        new Parameter(`PropertyType`, `Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:


- String. Specifies a null-terminated string. Equivalent to REG_SZ.  - ExpandString. Specifies a null-terminated string that contains 
unexpanded references to environment variables that are expanded when the value is retrieved. Equivalent to REG_EXPAND_SZ.  - Binary. 
Specifies binary data in any form. Equivalent to REG_BINARY.  - DWord. Specifies a 32-bit binary number. Equivalent to REG_DWORD.  - 
MultiString. Specifies an array of null-terminated strings terminated by two null characters. Equivalent to REG_MULTI_SZ.  - Qword. 
Specifies a 64-bit binary number. Equivalent to REG_QWORD.  - Unknown. Indicates an unsupported registry data type, such as 
REG_RESOURCE_LIST.`, `String`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`Value`, `Specifies the property value. If the property is a registry entry, this parameter specifies the value of the entry.`, `Object`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates a new property for an item and sets its value.`, `New-ItemProperty [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] -LiteralPath <String[]> [-PropertyType <String>] [-UseTransaction] [-Value <Object>] [-WhatIf] [<CommonParameters>]

New-ItemProperty [-Path] <String[]> [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] [-PropertyType <String>] [-UseTransaction] [-Value <Object>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-JobTrigger`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-LocalGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-LocalUser`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Module`, [
        new Parameter(`ArgumentList`, `Specifies an array of arguments which are parameter values that are passed to the script block.`, `Object[]`),
        new Parameter(`AsCustomObject`, `Indicates that this cmdlet returns a custom object that represents the dynamic module. The module members are implemented as script 
methods of the custom object, but they are not imported into the session. You can save the custom object in a variable and use dot 
notation to invoke the members.


If the module has multiple members with the same name, such as a function and a variable that are both named A, only one member with 
each name can be accessed from the custom object.`, `SwitchParameter`),
        new Parameter(`Cmdlet`, `Specifies an array of cmdlets that this cmdlet exports from the module into the current session. Enter a comma-separated list of 
cmdlets. Wildcard characters are permitted. By default, all cmdlets in the module are exported.


You cannot define cmdlets in a script block, but a dynamic module can include cmdlets if it imports the cmdlets from a binary module.`, `String[]`),
        new Parameter(`Function`, `Specifies an array of functions that this cmdlet exports from the module into the current session. Enter a comma-separated list of 
functions. Wildcard characters are permitted. By default, all functions defined in a module are exported.`, `String[]`),
        new Parameter(`Name`, `Specifies a name for the new module. You can also pipe a module name to New-Module.


The default value is an autogenerated name that starts with " _DynamicModule " and is followed by a GUID that specifies the path of 
the dynamic module.`, `String`),
        new Parameter(`ReturnResult`, `Indicates that this cmdlet runs the script block and returns the script block results instead of returning a module object.`, `SwitchParameter`),
        new Parameter(`ScriptBlock`, `Specifies the contents of the dynamic module. Enclose the contents in braces ( { } ) to create a script block. This parameter is 
required.`, `ScriptBlock`),
    ], `Creates a new dynamic module that exists only in memory.`, `New-Module [-Name] <String> [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet <String[]>] [-Function 
<String[]>] [-ReturnResult] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ModuleManifest`, [
        new Parameter(`AliasesToExport`, `Specifies the aliases that the module exports. Wildcard characters are permitted.


You can use this parameter to restrict the aliases that are exported by the module. It can remove aliases from the list of exported 
aliases, but it cannot add aliases to the list.


If you omit this parameter, New-ModuleManifest creates an AliasesToExport key with a value of * (all), meaning that all aliases that 
are exported by the module are exported by the manifest.`, `String[]`),
        new Parameter(`Author`, `Specifies the module author.


If you omit this parameter, New-ModuleManifest creates an Author key with the name of the current user.`, `String`),
        new Parameter(`ClrVersion`, `Specifies the minimum version of the Common Language Runtime (CLR) of the Microsoft .NET Framework that the module requires.`, `Version`),
        new Parameter(`CmdletsToExport`, `Specifies the cmdlets that the module exports. Wildcard characters are permitted.


You can use this parameter to restrict the cmdlets that are exported by the module. It can remove cmdlets from the list of exported 
cmdlets, but it cannot add cmdlets to the list.


If you omit this parameter, New-ModuleManifest creates a CmdletsToExport key with a value of * (all), meaning that all cmdlets that 
are exported by the module are exported by the manifest.`, `String[]`),
        new Parameter(`CompanyName`, `Identifies the company or vendor who created the module.


If you omit this parameter, New-ModuleManifest creates a CompanyName key with a value of "Unknown".`, `String`),
        new Parameter(`CompatiblePSEditions`, `You can use this parameter to restrict the aliases that are exported by the module. It can remove aliases from the list of exported 
aliases, but it cannot add aliases to the list.


If you omit this parameter, New-ModuleManifest creates an AliasesToExport key with a value of * (all), meaning that all aliases that 
are exported by the module are exported by the manifest.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Copyright`, `Specifies a copyright statement for the module.


If you omit this parameter, New-ModuleManifest creates a Copyright key with a value of  "(c) <year> <username>. All rights reserved." 
where <year> is the current year and <username> is the value of the Author key (if one is specified) or the name of the current user.`, `String`),
        new Parameter(`DefaultCommandPrefix`, `Specifies a prefix that is prepended to the nouns of all commands in the module when they are imported into a session. Prefixes 
prevent command name conflicts in a user's session.


Module users can override this prefix by specifying the Prefix parameter of the Import-Module cmdlet.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`Description`, `Describes the contents of the module.`, `String`),
        new Parameter(`DotNetFrameworkVersion`, `Specifies the minimum version of the Microsoft .NET Framework that the module requires.`, `Version`),
        new Parameter(`DscResourcesToExport`, `@{Text=}`, `String[]`),
        new Parameter(`FileList`, `Specifies all items that are included in the module.


This key is designed to act as a module inventory. The files listed in the key are not automatically exported with the module.`, `String[]`),
        new Parameter(`FormatsToProcess`, `Specifies the formatting files (.ps1xml) that run when the module is imported.


When you import a module, Windows PowerShell runs the Update-FormatData cmdlet with the specified files. Because formatting files are 
not scoped, they affect all session states in the session.`, `String[]`),
        new Parameter(`FunctionsToExport`, `Specifies the functions that the module exports. Wildcard characters are permitted.


You can use this parameter to restrict the functions that are exported by the module. It can remove functions from the list of 
exported aliases, but it cannot add functions to the list.


If you omit this parameter, New-ModuleManifest creates an FunctionsToExport key with a value of * (all), meaning that all functions 
that are exported by the module are exported by the manifest.`, `String[]`),
        new Parameter(`Guid`, `Specifies a unique identifier for the module. The GUID can be used to distinguish among modules with the same name.


If you omit this parameter, New-ModuleManifest creates a GUID key in the manifest and generates a GUID for the value.


To create a new GUID in Windows PowerShell, type "[guid]::NewGuid()".`, `Guid`),
        new Parameter(`HelpInfoUri`, `Specifies the Internet address of the HelpInfo XML file for the module. Enter an Uniform Resource Identifier (URI) that starts with 
"http" or "https".


The HelpInfo XML file supports the Updatable Help feature that was introduced in Windows PowerShell 3.0. It contains information 
about the location of downloadable help files for the module and the version numbers of the newest help files for each supported 
locale. For information about Updatable Help, see about_Updatable_Help (http://go.microsoft.com/fwlink/?LinkID=235801). For 
information about the HelpInfo XML file, see "Supporting Updatable Help" in the Microsoft Developer Network (MSDN) library.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`IconUri`, `@{Text=}`, `Uri`),
        new Parameter(`LicenseUri`, `@{Text=}`, `Uri`),
        new Parameter(`ModuleList`, `Lists all modules that are included in this module.


Enter each module name as a string or as a hash table with ModuleName and ModuleVersion keys. The hash table can also have an 
optional GUID key. You can combine strings and hash tables in the parameter value. For more information, see the examples.


This key is designed to act as a module inventory. The modules that are listed in the value of this key are not automatically 
processed.`, `Object[]`),
        new Parameter(`ModuleVersion`, `Specifies the version of the module.


This parameter is not required by the cmdlet, but a ModuleVersion key is required in the manifest. If you omit this parameter, 
New-ModuleManifest creates a ModuleVersion key with a value of "1.0".`, `Version`),
        new Parameter(`NestedModules`, `Specifies script modules (.psm1) and binary modules (.dll) that are imported into the module's session state. The files in the 
NestedModules key run in the order in which they are listed in the value.


Enter each module name as a string or as a hash table with ModuleName and ModuleVersion keys. The hash table can also have an 
optional GUID key. You can combine strings and hash tables in the parameter value. For more information, see the examples.


Typically, nested modules contain commands that the root module needs for its internal processing. By default, the commands in nested 
modules are exported from the module's session state into the caller's session state, but the root module can restrict the commands 
that it exports, for example, by using an Export-ModuleMember command.


Nested modules in the module session state are available to the root module, but they are not returned by a Get-Module command in the 
caller's session state.


Scripts (.ps1) that are listed in the NestedModules key are run in the module's session state, not in the caller's session state. To 
run a script in the caller's session state, list the script file name in the value of the ScriptsToProcess key in the manifest.`, `Object[]`),
        new Parameter(`PassThru`, `Indicates that this cmdlet writes the resulting module manifest to the console, in addition to creating a .psd1 file. By default, 
this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path and file name of the new module manifest. Enter a path and file name with a .psd1 file name extension, such as 
"$pshome\\Modules\\MyModule\\MyModule.psd1". This parameter is required.


If you specify the path of an existing file, New-ModuleManifest replaces the file without warning unless the file has the read-only 
attribute.


The manifest should be located in the module's directory, and the manifest file name should be the same as the module directory name, 
but with a .psd1 file name extension.


You cannot use variables, such as $pshome or $home, in response to a prompt for a Path parameter value. To use a variable, include 
the Path parameter in the command.`, `String`),
        new Parameter(`PowerShellHostName`, `Specifies the name of the Windows PowerShell host program that the module requires. Enter the name of the host program, such as 
"Windows PowerShell ISE Host" or "ConsoleHost". Wildcard characters are not permitted.


To find the name of a host program, in the program, type "$host.name".`, `String`),
        new Parameter(`PowerShellHostVersion`, `Specifies the minimum version of the Windows PowerShell host program that works with the module. Enter a version number, such as 1.1.`, `Version`),
        new Parameter(`PowerShellVersion`, `Specifies the minimum version of Windows PowerShell that works with this module. For example, you can enter 3.0, 4.0, or 5.0 as the 
value of this parameter.`, `Version`),
        new Parameter(`PrivateData`, `Specifies data that is passed to the module when it is imported.`, `Object`),
        new Parameter(`ProcessorArchitecture`, `Specifies the processor architecture that the module requires. The acceptable values for this parameter are: x86, AMD64, IA64, and 
None. None indicates unknown or unspecified.`, `ProcessorArchitecture`),
        new Parameter(`ProjectUri`, `@{Text=}`, `Uri`),
        new Parameter(`ReleaseNotes`, `Specifies release notes.`, `String`),
        new Parameter(`RequiredAssemblies`, `Specifies the assembly (.dll) files that the module requires. Enter the assembly file names. Windows PowerShell loads the specified 
assemblies before updating types or formats, importing nested modules, or importing the module file that is specified in the value of 
the RootModule key.


Use this parameter to list all the assemblies that the module requires. This includes assemblies that must be loaded to update any 
formatting or type files that are listed in the FormatsToProcess or TypesToProcess keys, even if those assemblies are also listed as 
binary modules in the NestedModules key.`, `String[]`),
        new Parameter(`RequiredModules`, `Specifies modules that must be in the global session state. If the required modules are not in the global session state, Windows 
PowerShell imports them. If the required modules are not available, the Import-Module command fails.


Enter each module name as a string or as a hash table with ModuleName and ModuleVersion keys. The hash table can also have an 
optional GUID key. You can combine strings and hash tables in the parameter value. For more information, see the examples.


In Windows PowerShell 2.0, Import-Module does not import required modules automatically. It just verifies that the required modules 
are in the global session state.`, `Object[]`),
        new Parameter(`RootModule`, `Specifies the primary or root file of the module. Enter the file name of a script (.ps1), a script module (.psm1), a module manifest 
(.psd1), an assembly (.dll), a cmdlet definition XML file (.cdxml), or a workflow (.xaml). When the module is imported, the members 
that are exported from the root module file are imported into the caller's session state.


If a module has a manifest file and no root file has been designated in the RootModule key, the manifest becomes the primary file for 
the module, and the module becomes a manifest module (ModuleType = Manifest).


To export members from .psm1 or .dll files in a module that has a manifest, the names of those files must be specified in the values 
of the RootModule or NestedModules keys in the manifest. Otherwise, their members are not exported.


In Windows PowerShell 2.0, this key was called ModuleToProcess . You can use the RootModule parameter name or its ModuleToProcess 
alias.`, `String`),
        new Parameter(`ScriptsToProcess`, `Specifies script (.ps1) files that run in the caller's session state when the module is imported. You can use these scripts to 
prepare an environment, just as you might use a logon script.


To specify scripts that run in the module's session state, use the NestedModules key.`, `String[]`),
        new Parameter(`Tags`, `@{Text=}`, `String[]`),
        new Parameter(`TypesToProcess`, `Specifies the type files (.ps1xml) that run when the module is imported.


When you import the module, Windows PowerShell runs the Update-TypeData cmdlet with the specified files. Because type files are not 
scoped, they affect all session states in the session.`, `String[]`),
        new Parameter(`VariablesToExport`, `Specifies the variables that the module exports. Wildcard characters are permitted.


You can use this parameter to restrict the variables that are exported by the module. It can remove variables from the list of 
exported variables, but it cannot add variables to the list.


If you omit this parameter, New-ModuleManifest creates a VariablesToExport key with a value of * (all), meaning that all variables 
that are exported by the module are exported by the manifest.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates a new module manifest.`, `New-ModuleManifest [-Path] <String> [-AliasesToExport <String[]>] [-Author <String>] [-ClrVersion <Version>] [-CmdletsToExport 
<String[]>] [-CompanyName <String>] [-CompatiblePSEditions {Desktop | Core}] [-Confirm] [-Copyright <String>] [-DefaultCommandPrefix 
<String>] [-Description <String>] [-DotNetFrameworkVersion <Version>] [-DscResourcesToExport <String[]>] [-FileList <String[]>] 
[-FormatsToProcess <String[]>] [-FunctionsToExport <String[]>] [-Guid <Guid>] [-HelpInfoUri <String>] [-IconUri <Uri>] [-LicenseUri 
<Uri>] [-ModuleList <Object[]>] [-ModuleVersion <Version>] [-NestedModules <Object[]>] [-PassThru] [-PowerShellHostName <String>] 
[-PowerShellHostVersion <Version>] [-PowerShellVersion <Version>] [-PrivateData <Object>] [-ProcessorArchitecture {None | MSIL | X86 
| IA64 | Amd64 | Arm}] [-ProjectUri <Uri>] [-ReleaseNotes <String>] [-RequiredAssemblies <String[]>] [-RequiredModules <Object[]>] 
[-RootModule <String>] [-ScriptsToProcess <String[]>] [-Tags <String[]>] [-TypesToProcess <String[]>] [-VariablesToExport <String[]>] 
[-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecAuthProposal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecMainModeCryptoProposal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-NetIPsecQuickModeCryptoProposal`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Object`, [
        new Parameter(`ArgumentList`, `Specifies a list of arguments to pass to the constructor of the .NET Framework class. Separate elements in the list by using commas 
(,). The alias for ArgumentList is Args .`, `Object[]`),
        new Parameter(`ComObject`, `Specifies the programmatic identifier (ProgID) of the COM object.`, `String`),
        new Parameter(`Property`, `Sets property values and invokes methods of the new object.


Enter a hash table in which the keys are the names of properties or methods and the values are property values or method arguments. 
New-Object creates the object and sets each property value and invokes each method in the order that they appear in the hash table.


If the new object is derived from the PSObject class, and you specify a property that does not exist on the object, New-Object adds 
the specified property to the object as a NoteProperty. If the object is not a PSObject , the command generates a non-terminating 
error.`, `IDictionary`),
        new Parameter(`Strict`, `Indicates that the cmdlet generates a non-terminating error when a COM object that you attempt to create uses an interop assembly. 
This feature distinguishes actual COM objects from .NET Framework objects with COM-callable wrappers.`, `SwitchParameter`),
        new Parameter(`TypeName`, `Specifies the fully qualified name of the .NET Framework class. You cannot specify both the TypeName parameter and the ComObject 
parameter.`, `String`),
    ], `Creates an instance of a Microsoft .NET Framework or COM object.`, `New-Object [-TypeName] <String> [[-ArgumentList] <Object[]>] [-Property <IDictionary>] [<CommonParameters>]

New-Object [-ComObject] <String> [-Property <IDictionary>] [-Strict] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PmemDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ProvisioningRepro`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PSDrive`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


Starting in Windows PowerShell 3.0, when the value of the Root parameter is a UNC path, you can use credentials to create file system 
drives. This parameter is not supported by all Windows PowerShell providers.`, `PSCredential`),
        new Parameter(`Description`, `Specifies a brief text description of the drive. Type any string.


To see the descriptions of all of the drives in the session, type "Get-PSDrive | Format-Table Name, Description". To see the 
description of a particular drives, type "(Get-PSDrive <DriveName>).Description".`, `String`),
        new Parameter(`Name`, `Specifies a name for the new drive. For persistent mapped network drives, type a drive letter. For temporary Windows PowerShell 
drives, type any valid string; you are not limited to drive letters.`, `String`),
        new Parameter(`PSProvider`, `Specifies the Windows PowerShell provider that supports drives of this kind.


For example, if the drive is associated with a network share or file system directory, the Windows PowerShell provider is FileSystem. 
If the drive is associated with a registry key, the provider is Registry.


Temporary Windows PowerShell drives can be associated with any Windows PowerShell provider. Mapped network drives can be associated 
only with the FileSystem provider.


To see a list of the providers in your Windows PowerShell session, use the Get-PSProvider cmdlet.`, `String`),
        new Parameter(`Persist`, `Indicates that this cmdlet creates a Windows mapped network drive. Mapped network drives are saved in Windows on the local computer. 
They are persistent, not session-specific, and can be viewed and managed in File Explorer and other tools.


When you scope the command locally, that is, without dot-sourcing, the Persist parameter does not persist the creation of a PSDrive 
beyond the scope in which you run the command. If you run New-PSDrive inside a script, and you want the new drive to persist 
indefinitely, you must dot-source the script. For best results, to force a new drive to persist, specify Global as the value of the 
Scope parameterin addition to adding Persist to your command.


The name of the drive must be a letter, such as D or E. The value of Root parameter must be a UNC path of a different computer. The 
value of the PSProvider parameter must be FileSystem.


To disconnect a Windows mapped network drive, use the Remove-PSDrive cmdlet. When you disconnect a Windows mapped network drive, the 
mapping is permanently deleted from the computer, not just deleted from the current session.


Mapped network drives are specific to a user account. Mapped network drives that you create in sessions that are started by using the 
Run as administrator option or by using the credential of another user are not visible in a session that was started without explicit 
credentials, or by using the credentials of the current user.`, `SwitchParameter`),
        new Parameter(`Root`, `Specifies the data store location to which a Windows PowerShell drive is mapped.


For example, specify a network share, such as \\Server01\\Public, a local directory, such as C:\\Program Files, or a registry key, such 
as HKLM:\\Software\\Microsoft.


Temporary Windows PowerShell drives can be associated with a local or remote location on any supported provider drive. Mapped network 
drives can be associated only with a file system location on a remote computer.`, `String`),
        new Parameter(`Scope`, `Specifies a scope for the drive. The acceptable values for this parameter are: Global, Local, and Script, or a number relative to the 
current scope, which is 0 through the number of scopes, where 0 is the current scope and 1 is its parent. Local is the default. For 
more information, see about_Scopes (http://go.microsoft.com/fwlink/?LinkID=113260).`, `String`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates temporary and persistent mapped network drives.`, `New-PSDrive [-Name] <String> [-PSProvider] <String> [-Root] <String> [-Confirm] [-Credential <PSCredential>] [-Description <String>] 
[-Persist] [-Scope <String>] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PSRoleCapabilityFile`, [
        new Parameter(`AliasDefinitions`, `Adds the specified aliases to sessions that use the role capability file. Enter a hash table with the following keys:


- Name. Name of the alias. This key is required.  - Value. The command that the alias represents. This key is required.  - 
Description. A text string that describes the alias. This key is optional.  - Options. Alias options. This key is optional. The 
default value is None. The acceptable values for this parameter are: None, ReadOnly, Constant, Private, or AllScope.


For example: "@{Name="hlp";Value="Get-Help";Description="Gets help";Options="ReadOnly"}"`, `IDictionary[]`),
        new Parameter(`AssembliesToLoad`, `Specifies the assemblies to load into the sessions that use the role capability file.`, `String[]`),
        new Parameter(`Author`, `Specifies the user that created the role capability file.`, `String`),
        new Parameter(`CompanyName`, `Identifies the company that created the role capability file. The default value is Unknown.`, `String`),
        new Parameter(`Copyright`, `Specifies a copyright for the role capability file. If you omit this parameter, New-PSRoleCapabilityFile generates a copyright 
statement by using the value of the Author parameter.`, `String`),
        new Parameter(`Description`, `Specifies a description for the role capability file.`, `String`),
        new Parameter(`EnvironmentVariables`, `Specifies the environment variables for sessions that expose this role capability file. Enter a hash table in which the keys are the 
environment variable names and the values are the environment variable values.


For example: "EnvironmentVariables=@{TestShare="\\Server01\\TestShare"}"`, `IDictionary`),
        new Parameter(`FormatsToProcess`, `Specifies the formatting files (.ps1xml) that run in sessions that use the role capability file. The value of this parameter must be 
a full or absolute path of the formatting files.`, `String[]`),
        new Parameter(`FunctionDefinitions`, `Adds the specified functions to sessions that expose the role capability. Enter a hash table with the following keys:


- Name. Name of the function. This key is required.  - ScriptBlock. Function body. Enter a script block. This key is required.  - 
Options. Function options. This key is optional. The default value is None. The acceptable values for this parameter are: are None, 
ReadOnly, Constant, Private, or AllScope.


For example: "@{Name="Get-PowerShellProcess";ScriptBlock={Get-Process PowerShell};Options="AllScope"}"`, `IDictionary[]`),
        new Parameter(`Guid`, `Specifies a unique identifier for the role capability file. If you omit this parameter, New-PSRoleCapabilityFile generates a GUID for 
the file. To create a new GUID in Windows PowerShell, type "[guid]::NewGuid()".`, `Guid`),
        new Parameter(`ModulesToImport`, `Specifies the modules that are automatically imported into sessions that use the role capability file. By default, all of the 
commands in listed modules are visible. When used with VisibleCmdlets or VisibleFunctions , the commands visible from the specified 
modules can be restricted.


Each module used in the value of this parameter can be represented by a string or by a hash table. A module string consists only of 
the name of the module. A module hash table can include ModuleName , ModuleVersion , and GUID keys. Only the ModuleName key is 
required.


For example, the following value consists of a string and a hash table. Any combination of strings and hash tables, in any order, is 
valid.


""TroubleshootingPack", @{ModuleName="PSDiagnostics"; ModuleVersion="1.0.0.0";GUID="c61d6278-02a3-4618-ae37-a524d40a7f44"}"`, `Object[]`),
        new Parameter(`Path`, `Specifies the path and file name of the role capability file. The file must have a .psrc file name extension.`, `String`),
        new Parameter(`ScriptsToProcess`, `Specifies scripts to add to sessions that use the role capability file. Enter the path and file names of the scripts. The value of 
this parameter must be a full or absolute path of the script file names.`, `String[]`),
        new Parameter(`TypesToProcess`, `Specifies type files (.ps1xml) to add to sessions that use the role capability file. Enter the type file names. The value of this 
parameter must be a full or absolute path of the type file names.`, `String[]`),
        new Parameter(`VariableDefinitions`, `Specifies variables to add to sessions that use the role capability file. Enter a hash table with the following keys:


- Name. Name of the variable. This key is required.  - Value. Variable value. This key is required.  - Options. Variable options. 
This key is optional. The default value is None. The acceptable values for this parameter are: are None, ReadOnly, Constant, Private, 
or AllScope.


For example: "@{Name="WarningPreference";Value="SilentlyContinue";Options="AllScope"}"`, `Object`),
        new Parameter(`VisibleAliases`, `Limits the aliases in the session to those aliases specified in the value of this parameter, plus any aliases that you define in the 
AliasDefinition parameter. Wildcard characters are supported. By default, all aliases that are defined by the Windows PowerShell 
engine and all aliases that modules export are visible in the session.


For example, to limit the available aliases to gm and gcm use this syntax: "VisibleAliases="gcm", "gp""


When any Visible parameter is included in the role capability file, Windows PowerShell removes the Import-Module cmdlet and its ipmo 
alias from the session.`, `String[]`),
        new Parameter(`VisibleCmdlets`, `Limits the cmdlets in the session to those specified in the value of this parameter. Wildcard characters and Module Qualified Names 
are supported.


By default, all cmdlets that the modules in the session export are visible in the session. Use the SessionType and ModulesToImport 
parameters to determine which modules and snap-ins are imported into the session. If no modules in ModulesToImport expose the cmdlet, 
New-PSRoleCapabilityFile will try load the appropriate module.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module cmdlet and its 
ipmo alias from the session.`, `Object[]`),
        new Parameter(`VisibleExternalCommands`, `Limits the external binaries, scripts and commands that can be executed in the session to those specified in the value of this 
parameter. Wildcard characters are supported.


By default, no external commands are visible in this session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module cmdlet and its 
ipmo alias from the session.`, `String[]`),
        new Parameter(`VisibleFunctions`, `Limits the functions in the session to those specified in the value of this parameter, plus any functions that you define in the 
FunctionDefinitions parameter. Wildcard characters are supported.


By default, all functions exported by modules in the session are visible in that session. Use the SessionType and ModulesToImport 
parameters to determine which modules are imported into the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module cmdlet and its 
ipmo alias from the session.`, `Object[]`),
        new Parameter(`VisibleProviders`, `Limits the Windows PowerShell providers in the session to those specified in the value of this parameter. Wildcard characters are 
supported.


By default, all providers exported by a module in the session are visible in the session. Use the SessionType and ModulesToImport 
parameters to determine which modules are imported into the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module cmdlet and its 
ipmo alias from the session.`, `String[]`),
    ], `Creates a file that defines a set of capabilities to be exposed through a session configuration.`, `New-PSRoleCapabilityFile [-Path] <String> [-AliasDefinitions <IDictionary[]>] [-AssembliesToLoad <String[]>] [-Author <String>] 
[-CompanyName <String>] [-Copyright <String>] [-Description <String>] [-EnvironmentVariables <IDictionary>] [-FormatsToProcess 
<String[]>] [-FunctionDefinitions <IDictionary[]>] [-Guid <Guid>] [-ModulesToImport <Object[]>] [-ScriptsToProcess <String[]>] 
[-TypesToProcess <String[]>] [-VariableDefinitions <Object>] [-VisibleAliases <String[]>] [-VisibleCmdlets <Object[]>] 
[-VisibleExternalCommands <String[]>] [-VisibleFunctions <Object[]>] [-VisibleProviders <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PSSession`, [
        new Parameter(`AllowRedirection`, `Indicates that this cmdlet allows redirection of this connection to an alternate Uniform Resource Identifier (URI).


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different URI. By 
default, Windows PowerShell does not redirect connections, but you can use this parameter to enable it to redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount session option 
value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the MaximumConnectionRedirectionCount property 
of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
        new Parameter(`ApplicationName`, `Specifies the application name segment of the connection URI. Use this parameter to specify the application name when you are not 
using the ConnectionURI parameter in the command.


The default value is the value of the $PSSessionApplicationName preference variable on the local computer. If this preference 
variable is not defined, the default value is WSMAN. This value is appropriate for most uses. For more information, see 
about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248).


The WinRM service uses the application name to select a listener to service the connection request. The value of this parameter 
should match the value of the URLPrefix property of a listener on the remote computer.`, `String`),
        new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate the user's credentials. The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest
- Kerberos
- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


For more information about the values of this parameter, see the description of the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the Microsoft Developer 
Network (MSDN) library.

Caution: Credential Security Support Provider (CredSSP) authentication, in which the user credentials are passed to a remote computer 
to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a remote 
network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
        new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to perform this action. Enter the 
certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they do not work 
with domain accounts.


To get a certificate, use the Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
        new Parameter(`ComputerName`, `Specifies an array of names of computers. This cmdlet creates a persistent connection ( PSSession ) to the specified computer. If you 
enter multiple computer names, New-PSSession creates multiple PSSession objects, one for each computer. The default is the local 
computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more remote computers. To specify the local 
computer, type the computer name, localhost, or a dot (.). When the computer is in a different domain than the user, the fully 
qualified domain name is required. You can also pipe a computer name, in quotation marks, to New-PSSession .


To use an IP address in the value of the ComputerName parameter, the command must include the Credential parameter. Also, the 
computer must be configured for HTTPS transport or the IP address of the remote computer must be included in the WinRM TrustedHosts 
list on the local computer. For instructions for adding a computer name to the TrustedHosts list, see "How to Add a Computer to the 
Trusted Host List" in about_Remote_Troubleshooting (http://go.microsoft.com/fwlink/?LinkID=135188).


To include the local computer in the value of the ComputerName parameter, start Windows PowerShell by using the Run as administrator 
option.`, `String[]`),
        new Parameter(`ConfigurationName`, `Specifies the session configuration that is used for the new PSSession .


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the configuration 
name, the following schema URI is prepended: http://schemas.microsoft.com/PowerShell.


The session configuration for a session is located on the remote computer. If the specified session configuration does not exist on 
the remote computer, the command fails.


The default value is the value of the $PSSessionConfigurationName preference variable on the local computer. If this preference 
variable is not set, the default is Microsoft.PowerShell. For more information, see about_Preference_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113248).`, `String`),
        new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint for the session. The URI must be fully qualified. The format of this string is 
as follows:


<Transport>://<ComputerName>:<Port>/<ApplicationName>


The default value is as follows:


"http://localhost:5985/WSMAN"


If you do not specify a ConnectionURI , you can use the UseSSL , ComputerName , Port , and ApplicationName parameters to specify the 
ConnectionURI values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport segment, but 
do not specify a port, the session is created with standards ports: 80 for HTTP and 443 for HTTPS. To use the default ports for 
Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection unless you use 
the AllowRedirection parameter in the command.`, `Uri[]`),
        new Parameter(`ContainerId`, `Specifies an array of IDs of containers. This cmdlet starts an interactive session with each of the specified containers. To see the 
containers that are available to you, use the Get-Container cmdlet.`, `String[]`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01, Domain01\\User01, or User@Domain.com, or enter a PSCredential object, such as one returned by the 
Get-Credential cmdlet.


When you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
        new Parameter(`EnableNetworkAccess`, `Indicates that this cmdlet adds an interactive security token to loopback sessions. The interactive token lets you run commands in 
the loopback session that get data from other computers. For example, you can run a command in the session that copies XML files from 
a remote computer to the local computer.


A loopback session is a PSSession that originates and ends on the same computer. To create a loopback session, omit the ComputerName 
parameter or set its value to dot (.), localhost, or the name of the local computer.


By default, this cmdlet creates loopback sessions by using a network token, which might not provide sufficient permission to 
authenticate to remote computers.


The EnableNetworkAccess parameter is effective only in loopback sessions. If you use EnableNetworkAccess when you create a session on 
a remote computer, the command succeeds, but the parameter is ignored.


You can also enable remote access in a loopback session by using the CredSSP value of the Authentication parameter, which delegates 
the session credentials to other computers.


To protect the computer from malicious access, disconnected loopback sessions that have interactive tokens, which are those created 
by using the EnableNetworkAccess parameter, can be reconnected only from the computer on which the session was created. Disconnected 
sessions that use CredSSP authentication can be reconnected from other computers. For more information, see Disconnect-PSSession.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies a friendly name for the PSSession .


You can use the name to refer to the PSSession when you use other cmdlets, such as Get-PSSession and Enter-PSSession. The name is not 
required to be unique to the computer or the current session.`, `String[]`),
        new Parameter(`Port`, `Specifies the network port on the remote computer that is used for this connection. To connect to a remote computer, the remote 
computer must be listening on the port that the connection uses. The default ports are 5985, which is the WinRM port for HTTP, and 
5986, which is the WinRM port for HTTPS.


Before using another port, you must configure the WinRM listener on the remote computer to listen at that port. Use the following 
commands to configure the listener:


1. "winrm delete winrm/config/listener?Address=*+Transport=HTTP"


2. "winrm create winrm/config/listener?Address=*+Transport=HTTP @{Port="<port-number>"}"


Do not use the Port parameter unless you must. The port setting in the command applies to all computers or sessions on which the 
command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
        new Parameter(`RunAsAdministrator`, `When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different URI. By 
default, Windows PowerShell does not redirect connections, but you can use this parameter to enable it to redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount session option 
value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the MaximumConnectionRedirectionCount property 
of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
        new Parameter(`Session`, `Specifies an array of PSSession objects that this cmdlet uses as a model for the new PSSession . This parameter creates new PSSession 
objects that have the same properties as the specified PSSession objects.


Enter a variable that contains the PSSession objects or a command that creates or gets the PSSession objects, such as a New-PSSession 
or Get-PSSession command.


The resulting PSSession objects have the same computer name, application name, connection URI, port, configuration name, throttle 
limit, and Secure Sockets Layer (SSL) value as the originals, but they have a different display name, ID, and instance ID (GUID).`, `PSSession[]`),
        new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is set. Otherwise, 
the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference variable and in the 
session configuration. However, they do not take precedence over maximum values, quotas or limits set in the session configuration.


For a description of the session options that includes the default values, see New-PSSessionOption. For information about the 
$PSSessionOption preference variable, see about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248). For more 
information about session configurations, see about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this parameter or 
enter a value of 0 (zero), the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`UseSSL`, `Indicates that this cmdlet uses the SSL protocol to establish a connection to the remote computer. By default, SSL is not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter offers an additional 
protection that sends the data across an HTTPS connection instead of an HTTP connection.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
        new Parameter(`VMId`, `Specifies an array of ID of virtual machines. This cmdlet starts an interactive session with each of the specified virtual machines. 
To see the virtual machines that are available to you, use the following command:


"Get-VM | Select-Object -Property Name, ID"`, `Guid[]`),
        new Parameter(`VMName`, `Specifies an array of names of virtual machines. This cmdlet starts an interactive session with each of the specified virtual 
machines. To see the virtual machines that are available to you, use the Get-VM cmdlet.`, `String[]`),
    ], `Creates a persistent connection to a local or remote computer.`, `New-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Credential <PSCredential>] [-EnableNetworkAccess] [-Name <String[]>] [-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] 
[<CommonParameters>]

New-PSSession [[-ComputerName] <String[]>] [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Credential <PSCredential>] [-EnableNetworkAccess] [-Name <String[]>] [-Port <Int32>] [-SessionOption <PSSessionOption>] 
[-ThrottleLimit <Int32>] [-UseSSL] [<CommonParameters>]

New-PSSession [-VMId] <Guid[]> [-ConfigurationName <String>] -Credential <PSCredential> [-Name <String[]>] [-ThrottleLimit <Int32>] 
[<CommonParameters>]

New-PSSession [-ConfigurationName <String>] -Credential <PSCredential> [-Name <String[]>] [-ThrottleLimit <Int32>] -VMName <String[]> 
[<CommonParameters>]

New-PSSession [-ConfigurationName <String>] -ContainerId <String[]> [-Name <String[]>] [-RunAsAdministrator] [-ThrottleLimit <Int32>] 
[<CommonParameters>]

New-PSSession [[-Session] <PSSession[]>] [-EnableNetworkAccess] [-Name <String[]>] [-ThrottleLimit <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PSSessionConfigurationFile`, [
        new Parameter(`AliasDefinitions`, `Adds the specified aliases to sessions that use the session configuration. Enter a hash table with the following keys:


- Name. Name of the alias. This key is required.  - Value. The command that the alias represents. This key is required.  - 
Description. A text string that describes the alias. This key is optional.  - Options. Alias options. This key is optional. The 
default value is None. The acceptable values for this parameter are: None, ReadOnly, Constant, Private, or AllScope.


For example: "@{Name="hlp";Value="Get-Help";Description="Gets help";Options="ReadOnly"}"`, `IDictionary[]`),
        new Parameter(`AssembliesToLoad`, `Specifies the assemblies to load into the sessions that use the session configuration.`, `String[]`),
        new Parameter(`Author`, `Specifies the author of the session configuration or the configuration file. The default is the current user. The value of this 
parameter is visible in the session configuration file, but it is not a property of the session configuration object.`, `String`),
        new Parameter(`CompanyName`, `Specifies the company that created the session configuration or the configuration file. The default value is Unknown. The value of 
this parameter is visible in the session configuration file, but it is not a property of the session configuration object.`, `String`),
        new Parameter(`Copyright`, `Specifies a copyright the session configuration file. The value of this parameter is visible in the session configuration file, but 
it is not a property of the session configuration object.


If you omit this parameter, New-PSSessionConfigurationFile generates a copyright statement by using the value of the Author parameter.`, `String`),
        new Parameter(`Description`, `Specifies a description of the session configuration or the session configuration file. The value of this parameter is visible in the 
session configuration file, but it is not a property of the session configuration object.`, `String`),
        new Parameter(`EnvironmentVariables`, `Adds environment variables to the session. Enter a hash table in which the keys are the environment variable names and the values are 
the environment variable values.


For example: "EnvironmentVariables=@{TestShare="\\Server01\\TestShare"}"`, `IDictionary`),
        new Parameter(`ExecutionPolicy`, `Specifies the execution policy of sessions that use the session configuration. If you omit this parameter, the value of the 
ExecutionPolicy key in the session configuration file is Restricted. For information about execution policies in Windows PowerShell, 
see about_Execution_Policies (http://go.microsoft.com/fwlink/?LinkID=135170).`, `ExecutionPolicy`),
        new Parameter(`FormatsToProcess`, `Specifies the formatting files (.ps1xml) that run in sessions that use the session configuration. The value of this parameter must be 
a full or absolute path of the formatting files.`, `String[]`),
        new Parameter(`Full`, `Indicates that this operation includes all possible configuration properties in the session configuration file.`, `SwitchParameter`),
        new Parameter(`FunctionDefinitions`, `Adds the specified functions to sessions that use the session configuration. Enter a hash table with the following keys:


- Name. Name of the function. This key is required.  - ScriptBlock. Function body. Enter a script block. This key is required.  - 
Options. Function options. This key is optional. The default value is None. The acceptable values for this parameter are: None, 
ReadOnly, Constant, Private, or AllScope.


For example: "@{Name="Get-PowerShellProcess";ScriptBlock={Get-Process PowerShell};Options="AllScope"}"`, `IDictionary[]`),
        new Parameter(`GroupManagedServiceAccount`, `For example: "@{Name="hlp";Value="Get-Help";Description="Gets help";Options="ReadOnly"}"`, `String`),
        new Parameter(`Guid`, `Specifies a unique identifier for the session configuration file. If you omit this parameter, New-PSSessionConfigurationFile 
generates a GUID for the file.To create a new GUID in Windows PowerShell, type ""[guid]::NewGuid()"".`, `Guid`),
        new Parameter(`LanguageMode`, `Determines which elements of the Windows PowerShell language are permitted in sessions that use this session configuration. You can 
use this parameter to restrict the commands that particular users can run on the computer.


The acceptable values for this parameter are:


- FullLanguage. All language elements are permitted.  - ConstrainedLanguage. Commands that contain scripts to be evaluated are not 
allowed. The ConstrainedLanguage mode restricts user access to Microsoft .NET Framework types, objects, or methods.  - NoLanguage. 
Users may run cmdlets and functions, but are not permitted to use any language elements, such as script blocks, variables, or 
operators.  - RestrictedLanguage. Users may run cmdlets and functions, but are not permitted to use script blocks or variables except 
for the following permitted variables: $PSCulture, $PSUICulture, $True, $False, and $Null. Users may use only the basic comparison 
operators (-eq, -gt, -lt). Assignment statements, property references, and method calls are not permitted.


The default value of the LanguageMode parameter depends on the value of the SessionType parameter.


- Empty. NoLanguage


- RestrictedRemoteServer. NoLanguage


- Default. FullLanguage`, `PSLanguageMode`),
        new Parameter(`ModulesToImport`, `Specifies the modules and snap-ins that are automatically imported into sessions that use the session configuration.


By default, only the Microsoft.PowerShell.Core snap-in is imported into remote sessions, but unless the cmdlets are excluded, users 
can use the Import-Module and Add-PSSnapin cmdlets to add modules and snap-ins to the session.


Each module or snap-in in the value of this parameter can be represented by a string or as a hash table. A module string consists 
only of the name of the module or snap-in. A module hash table can include ModuleName , ModuleVersion , and GUID keys. Only the 
ModuleName key is required.


For example, the following value consists of a string and a hash table. Any combination of strings and hash tables, in any order, is 
valid.


""TroubleshootingPack", @{ModuleName="PSDiagnostics"; ModuleVersion="1.0.0.0";GUID="c61d6278-02a3-4618-ae37-a524d40a7f44"},"


The value of the ModulesToImport parameter of the Register-PSSessionConfiguration cmdlet takes precedence over the value of the 
ModulesToImport key in the session configuration file.`, `Object[]`),
        new Parameter(`MountUserDrive`, `@{Text=}`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path and file name of the session configuration file. The file must have a .pssc file name extension.`, `String`),
        new Parameter(`PowerShellVersion`, `Specifies the version of the Windows PowerShell engine in sessions that use the session configuration. The acceptable values for this 
parameter are: 2.0 and 3.0. If you omit this parameter, the PowerShellVersion key is commented-out and newest version of Windows 
PowerShell runs in the session.


The value of the PSVersion parameter of the Register-PSSessionConfiguration cmdlet takes precedence over the value of the 
PowerShellVersion key in the session configuration file.`, `Version`),
        new Parameter(`RequiredGroups`, `For example: "@{Name="hlp";Value="Get-Help";Description="Gets help";Options="ReadOnly"}"`, `IDictionary`),
        new Parameter(`RoleDefinitions`, `Specifies the role capabilities that should be applied to user roles. or security groups, when connected to a session using this 
session configuration.


Enter a hash table in which the keys are the name of the security group and the values are hash tables that contain a list of role 
capabilities that should be made available to the security group.


For example: "@{'Contoso\\Level 2 Helpdesk Users' = @{ RoleCapabilities = 'Maintenance', 'ADHelpDesk' }}"`, `IDictionary`),
        new Parameter(`RunAsVirtualAccount`, `Configures sessions using this session configuration to be run as the computer's (virtual) administrator account.`, `SwitchParameter`),
        new Parameter(`RunAsVirtualAccountGroups`, `Specifies the security groups to be associated with the virtual account when a session that uses the session configuration is run as 
a virtual account. If omitted, the virtual account belongs to Domain Admins on domain controllers and Administrators on all other 
computers.`, `String[]`),
        new Parameter(`SchemaVersion`, `Specifies the version of the session configuration file schema. The default value is "1.0.0.0".`, `Version`),
        new Parameter(`ScriptsToProcess`, `Adds the specified scripts to sessions that use the session configuration. Enter the path and file names of the scripts. The value of 
this parameter must be a full or absolute path of script file names.`, `String[]`),
        new Parameter(`SessionType`, `Specifies the type of session that is created by using the session configuration. The default value is Default. The acceptable values 
for this parameter are:


- Empty. No modules or snap-ins are added to session by default. Use the parameters of this cmdlet to add modules, functions, 
scripts, and other features to the session. This option is designed for you to create custom sessions by adding selected command. If 
you do not add commands to an empty session, the session is limited to expressions and might not be usable.  - Default. Adds the 
Microsoft.PowerShell.Core snap-in to the session. This snap-in includes the Import-Module and Add-PSSnapin cmdlets that users can use 
to import other modules and snap-ins unless you explicitly prohibit the use of the cmdlets.  - RestrictedRemoteServer. Includes only 
the following proxy functions:  Exit-PSSession, Get-Command, Get-FormatData, Get-Help, Measure-Object, Out-Default, and 
Select-Object. Use the parameters of this cmdlet to add modules, functions, scripts, and other features to the session.`, `SessionType`),
        new Parameter(`TranscriptDirectory`, `Specifies the directory to place session transcripts for sessions using this session configuration.`, `String`),
        new Parameter(`TypesToProcess`, `Adds the specified type files (.ps1xml) to sessions that use the session configuration. Enter the type file names. The value of this 
parameter must be a full or absolute path of type file names.`, `String[]`),
        new Parameter(`UserDriveMaximumSize`, `@{Text=}`, `Int64`),
        new Parameter(`VariableDefinitions`, `Adds the specified variables to sessions that use the session configuration. Enter a hash table with the following keys:


- Name. Name of the variable. This key is required.  - Value. Variable value. This key is required.  - Options. Variable options. 
This key is optional. The default value is None. The acceptable values for this parameter are: None, ReadOnly, Constant, Private, or 
AllScope.


For example: "@{Name="WarningPreference";Value="SilentlyContinue";Options="AllScope"}"`, `Object`),
        new Parameter(`VisibleAliases`, `Limits the aliases in the session to those specified in the value of this parameter, plus any aliases that you define in the 
AliasDefinition parameter. Wildcard characters are supported. By default, all aliases that are defined by the Windows PowerShell 
engine and all aliases that modules export are visible in the session.


For example: "VisibleAliases="gcm", "gp""


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module cmdlet and its 
ipmo alias from the session.`, `String[]`),
        new Parameter(`VisibleCmdlets`, `Limits the cmdlets in the session to those specified in the value of this parameter. Wildcard characters and Module Qualified Names 
are supported.


By default, all cmdlets that modules in the session export are visible in the session. Use the SessionType and ModulesToImport 
parameters to determine which modules and snap-ins are imported into the session. If no modules in ModulesToImport expose the cmdlet, 
the appropriate module will attempt to be autoloaded.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module cmdlet and its 
ipmo alias from the session.`, `Object[]`),
        new Parameter(`VisibleExternalCommands`, `Limits the external binaries, scripts, and commands that can be executed in the session to those specified in the value of this 
parameter. Wildcard characters are supported.


By default, no external commands are visible in the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell, removes the Import-Module cmdlet and 
its ipmo alias from the session.`, `String[]`),
        new Parameter(`VisibleFunctions`, `Limits the functions in the session to those specified in the value of this parameter, plus any functions that you define in the 
FunctionDefinition parameter. Wildcard characters are supported.


By default, all functions that modules in the session export are visible in the session. Use the SessionType and ModulesToImport 
parameters to determine which modules and snap-ins are imported into the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module cmdlet and its 
ipmo alias from the session.`, `Object[]`),
        new Parameter(`VisibleProviders`, `Limits the Windows PowerShell providers in the session to those specified in the value of this parameter. Wildcard characters are 
supported.


By default, all providers that modules in the session export are visible in the session. Use the SessionType and ModulesToImport 
parameters to determine which modules and snap-ins are imported into the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module cmdlet and its 
ipmo alias from the session.`, `String[]`),
    ], `Creates a file that defines a session configuration.`, `New-PSSessionConfigurationFile [-Path] <String> [-AliasDefinitions <IDictionary[]>] [-AssembliesToLoad <String[]>] [-Author <String>] 
[-CompanyName <String>] [-Copyright <String>] [-Description <String>] [-EnvironmentVariables <IDictionary>] [-ExecutionPolicy 
{Unrestricted | RemoteSigned | AllSigned | Restricted | Default | Bypass | Undefined}] [-FormatsToProcess <String[]>] [-Full] 
[-FunctionDefinitions <IDictionary[]>] [-GroupManagedServiceAccount <String>] [-Guid <Guid>] [-LanguageMode {FullLanguage | 
RestrictedLanguage | NoLanguage | ConstrainedLanguage}] [-ModulesToImport <Object[]>] [-MountUserDrive] [-PowerShellVersion 
<Version>] [-RequiredGroups <IDictionary>] [-RoleDefinitions <IDictionary>] [-RunAsVirtualAccount] [-RunAsVirtualAccountGroups 
<String[]>] [-SchemaVersion <Version>] [-ScriptsToProcess <String[]>] [-SessionType {Empty | RestrictedRemoteServer | Default}] 
[-TranscriptDirectory <String>] [-TypesToProcess <String[]>] [-UserDriveMaximumSize <Int64>] [-VariableDefinitions <Object>] 
[-VisibleAliases <String[]>] [-VisibleCmdlets <Object[]>] [-VisibleExternalCommands <String[]>] [-VisibleFunctions <Object[]>] 
[-VisibleProviders <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PSSessionOption`, [
        new Parameter(`ApplicationArguments`, `Specifies a primitive dictionary that is sent to the remote session. Commands and scripts in the remote session, including startup 
scripts in the session configuration, can find this dictionary in the ApplicationArguments property of the $PSSenderInfo automatic 
variable. You can use this parameter to send data to the remote session.


A primitive dictionary is like a hash table, but it contains keys that are case-insensitive strings and values that can be serialized 
and deserialized during Windows PowerShell remoting handshakes. If you enter a hash table for the value of this parameter, Windows 
PowerShell converts it to a primitive dictionary.


For more information, see about_Hash_Tables (http://go.microsoft.com/fwlink/?LinkID=135175), about_Session_Configurations 
(http://go.microsoft.com/fwlink/?LinkID=145152), and about_Automatic_Variables (http://go.microsoft.com/fwlink/?LinkID=113212).`, `PSPrimitiveDictionary`),
        new Parameter(`CancelTimeout`, `Determines how long Windows PowerShell waits for a cancel operation (CTRL + C) to finish before ending it. Enter a value in 
milliseconds.


The default value is 60000 (one minute). A value of 0 (zero) means no time-out; the command continues indefinitely.`, `Int32`),
        new Parameter(`Culture`, `Specifies the culture to use for the session. Enter a culture name in <languagecode2>-<country/regioncode2> format, such as ja-jP, a 
variable that contains a CultureInfo object, or a command that gets a CultureInfo object, such as Get-Culture.


The default value is $Null, and the culture that is set in the operating system is used in the session.`, `CultureInfo`),
        new Parameter(`IdleTimeout`, `Determines how long the session stays open if the remote computer does not receive any communication from the local computer. This 
includes the heartbeat signal. When the interval expires, the session closes.


The idle time-out value is of significant importance if you intend to disconnect and reconnect to a session. You can reconnect only 
if the session has not timed out.


Enter a value in milliseconds. The minimum value is 60000 (1 minute). The maximum is the value of the MaxIdleTimeoutms property of 
the session configuration. The default value, -1, does not set an idle time-out.


The session uses the idle time-out that is set in the session options, if any. If none is set (-1), the session uses the value of the 
IdleTimeoutMs property of the session configuration or the WSMan shell time-out value ("WSMan:\<ComputerName>\\Shell\\IdleTimeout"), 
whichever is shortest.


If the idle timeout set in the session options exceeds the value of the MaxIdleTimeoutMs property of the session configuration, the 
command to create a session fails.


The IdleTimeoutMs value of the default Microsoft.PowerShell session configuration is 7200000 milliseconds (2 hours). Its 
MaxIdleTimeoutMs value is 2147483647 milliseconds (>24 days). The default value of the WSMan shell idle time-out 
("WSMan:\<ComputerName>\\Shell\\IdleTimeout") is 7200000 milliseconds (2 hours).


The idle time-out value of a session can also be changed when disconnecting from a session or reconnecting to a session. For more 
information, see Disconnect-PSSession and Connect-PSSession.


In Windows PowerShell 2.0, the default value of the IdleTimeout parameter is 240000 (4 minutes).`, `Int32`),
        new Parameter(`IncludePortInSPN`, `Includes the port number in the Service Principal Name (SPN) used for Kerberos authentication, for example, 
"HTTP/<ComputerName>:5985". This option allows a client that uses a non-default SPN to authenticate against a remote computer that 
uses Kerberos authentication.


The option is designed for enterprises where multiple services that support Kerberos authentication are running under different user 
accounts. For example, an IIS application that allows for Kerberos authentication can require the default SPN to be registered to a 
user account that differs from the computer account. In such cases, Windows PowerShell remoting cannot use Kerberos to authenticate 
because it requires an SPN that is registered to the computer account. To resolve this problem, administrators can create different 
SPNs, such as by using Setspn.exe, that are registered to different user accounts and can distinguish between them by including the 
port number in the SPN.


For more information about SetSPN.exe, see SetSPN Overviewhttp://go.microsoft.com/fwlink/?LinkID=189413 
(http://go.microsoft.com/fwlink/?LinkID=189413).


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`MaxConnectionRetryCount`, `Specifies the number of times that PowerShell attempts to make a connection to a target machine if the current attempt fails due to 
network issues. The default value is 5.


This parameter was added for PowerShell version 5.0.`, `Int32`),
        new Parameter(`MaximumReceivedDataSizePerCommand`, `Specifies the maximum number of bytes that the local computer can receive from the remote computer in a single command. Enter a value 
in bytes. By default, there is no data size limit.


This option is designed to protect the resources on the client computer.`, `Int32`),
        new Parameter(`MaximumReceivedObjectSize`, `Specifies the maximum size of an object that the local computer can receive from the remote computer. This option is designed to 
protect the resources on the client computer. Enter a value in bytes.


In Windows PowerShell 2.0, if you omit this parameter, there is no object size limit. Beginning in Windows PowerShell 3.0, if you 
omit this parameter, the default value is 200 MB.`, `Int32`),
        new Parameter(`MaximumRedirection`, `Determines how many times Windows PowerShell redirects a connection to an alternate Uniform Resource Identifier (URI) before the 
connection fails. The default value is 5. A value of 0 (zero) prevents all redirection.


This option is used in the session only when the AllowRedirection parameter is used in the command that creates the session.`, `Int32`),
        new Parameter(`NoCompression`, `Turns off packet compression in the session. Compression uses more processor cycles, but it makes transmission faster.`, `SwitchParameter`),
        new Parameter(`NoEncryption`, `Turns off data encryption.`, `SwitchParameter`),
        new Parameter(`NoMachineProfile`, `Prevents loading the user's Windows user profile. As a result, the session might be created faster, but user-specific registry 
settings, items such as environment variables, and certificates are not available in the session.`, `SwitchParameter`),
        new Parameter(`OpenTimeout`, `Determines how long the client computer waits for the session connection to be established. When the interval expires, the command to 
establish the connection fails. Enter a value in milliseconds.


The default value is 180000 (3 minutes). A value of 0 (zero) means no time-out; the command continues indefinitely.`, `Int32`),
        new Parameter(`OperationTimeout`, `Determines the maximum time that any operation in the session can run. When the interval expires, the operation fails. Enter a value 
in milliseconds.


The default value is 180000 (3 minutes). A value of 0 (zero) means no time-out; the operation continues indefinitely.`, `Int32`),
        new Parameter(`OutputBufferingMode`, `Determines how command output is managed in disconnected sessions when the output buffer becomes full.


If the output buffering mode is not set in the session or in the session configuration, the default value is Block . Users can also 
change the output buffering mode when disconnecting the session.


If you omit this parameter, the value of the OutputBufferingMode of the session option object is None. A value of Block or Drop 
overrides the output buffering mode transport option set in the session configuration. The acceptable values for this parameter are:


- Block. When the output buffer is full, execution is suspended until the buffer is clear.  - Drop. When the output buffer is full, 
execution continues. As new output is saved, the oldest output is discarded.  - None. No output buffering mode is specified.


For more information about the output buffering mode transport option, see New-PSTransportOption.


This parameter was introduced in Windows PowerShell 3.0.`, `OutputBufferingMode`),
        new Parameter(`ProxyAccessType`, `Determines which mechanism is used to resolve the host name. The acceptable values for this parameter are:


- IEConfig


- WinHttpConfig


- AutoDetect


- NoProxyServer


- None




The default value is None.

For information about the values of this parameter, see the description of the 
System.Management.Automation.Remoting.ProxyAccessTypehttp://go.microsoft.com/fwlink/?LinkId=144756 
(http://go.microsoft.com/fwlink/?LinkId=144756) enumeration in the Microsoft Developer Network (MSDN) library.`, `ProxyAccessType`),
        new Parameter(`ProxyAuthentication`, `Specifies the authentication method that is used for proxy resolution. The acceptable values for this parameter are: Basic,  Digest, 
and Negotiate. The default value is Negotiate.


For information about the values of this parameter, see the description of the 
System.Management.Automation.Runspaces.AuthenticationMechanismhttp://go.microsoft.com/fwlink/?LinkID=144382 enumeration 
(http://go.microsoft.com/fwlink/?LinkID=144382) in the MSDN library.`, `AuthenticationMechanism`),
        new Parameter(`ProxyCredential`, `Specifies the credentials to use for proxy authentication. Enter a variable that contains a PSCredential object or a command that 
gets a PSCredential object, such as a Get-Credential command. If this option is not set, no credentials are specified.`, `PSCredential`),
        new Parameter(`SkipCACheck`, `Specifies that when it connects over HTTPS, the client does not validate that the server certificate is signed by a trusted 
certification authority (CA).


Use this option only when the remote computer is trusted by using another mechanism, such as when the remote computer is part of a 
network that is physically secure and isolated or when the remote computer is listed as a trusted host in a WinRM configuration.`, `SwitchParameter`),
        new Parameter(`SkipCNCheck`, `Specifies that the certificate common name (CN) of the server does not have to match the host name of the server. This option is used 
only in remote operations that use the HTTPS protocol.


Use this option only for trusted computers.`, `SwitchParameter`),
        new Parameter(`SkipRevocationCheck`, `Does not validate the revocation status of the server certificate.`, `SwitchParameter`),
        new Parameter(`UICulture`, `Specifies the UI culture to use for the session.


Enter a culture name in <languagecode2>-<country/regioncode2> format, such as ja-jP, a variable that contains a CultureInfo object, 
or a command that gets a CultureInfo object, such as Get-Culture .


The default value is $Null, and the UI culture that is set in the operating system when the session is created is used in the session.`, `CultureInfo`),
        new Parameter(`UseUTF16`, `Indicates that this cmdlet encodes the request in UTF16 format instead of UTF8 format.`, `SwitchParameter`),
    ], `Creates an object that contains advanced options for a PSSession.`, `New-PSSessionOption [-ApplicationArguments <PSPrimitiveDictionary>] [-CancelTimeout <Int32>] [-Culture <CultureInfo>] [-IdleTimeout 
<Int32>] [-IncludePortInSPN] [-MaxConnectionRetryCount <Int32>] [-MaximumReceivedDataSizePerCommand <Int32>] 
[-MaximumReceivedObjectSize <Int32>] [-MaximumRedirection <Int32>] [-NoCompression] [-NoEncryption] [-NoMachineProfile] [-OpenTimeout 
<Int32>] [-OperationTimeout <Int32>] [-OutputBufferingMode {None | Drop | Block}] [-ProxyAccessType {None | IEConfig | WinHttpConfig 
| AutoDetect | NoProxyServer}] [-ProxyAuthentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | 
Digest | Kerberos}] [-ProxyCredential <PSCredential>] [-SkipCACheck] [-SkipCNCheck] [-SkipRevocationCheck] [-UICulture <CultureInfo>] 
[-UseUTF16] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PSTransportOption`, [
        new Parameter(`IdleTimeoutSec`, `Determines how long each session stays open if the remote computer does not receive any communication from the local computer. This 
includes the heartbeat signal. When the interval expires, the session closes.


The idle time-out value is of significant importance when the user intends to disconnect and reconnect to a session. The user can 
reconnect only if the session has not timed out.


The IdleTimeoutSec parameter corresponds to the IdleTimeoutMs property of a session configuration.


Enter a value in seconds. The default value is 7200 (2 hours). The minimum value is 60 (1 minute). The maximum is the value of the 
IdleTimeout property of Shell objects in the WSMan configuration ("WSMan:\<ComputerName>\\Shell\\IdleTimeout"). The default value is 
7200000 milliseconds (2 hours).


If an idle time-out value is set in the session options and in the session configuration, value set in the session options takes 
precedence, but it cannot exceed the value of the MaxIdleTimeoutMs property of the session configuration. To set the value of the 
MaxIdleTimeoutMs property, use the MaxIdleTimeoutSec parameter.`, `Int32`),
        new Parameter(`MaxConcurrentCommandsPerSession`, `Limits the number of commands that can run at the same time in each session to the specified value. The default value is 1000.


The MaxConcurrentCommandsPerSession parameter corresponds to the MaxConcurrentCommandsPerShell property of a session configuration.`, `Int32`),
        new Parameter(`MaxConcurrentUsers`, `Limits the number of users who can run commands at the same time in each session to the specified value. The default value is 5.`, `Int32`),
        new Parameter(`MaxIdleTimeoutSec`, `Limits the idle time-out set for each session to the specified value. The default value is [Int]::MaxValue (~25 days).


The idle time-out value is of significant importance when the user intends to disconnect and reconnect to a session. The user can 
reconnect only if the session has not timed out.


The MaxIdleTimeoutSec parameter corresponds to the MaxIdleTimeoutMs property of a session configuration.`, `Int32`),
        new Parameter(`MaxMemoryPerSessionMB`, `Limits the memory used by each session to the specified value. Enter a value in megabytes. The default value is 1024 megabytes (1 GB).


The MaxMemoryPerSessionMB parameter corresponds to the MaxMemoryPerShellMB property of a session configuration.`, `Int32`),
        new Parameter(`MaxProcessesPerSession`, `Limits the number of processes running in each session to the specified value. The default value is 15.


The MaxProcessesPerSession parameter corresponds to the MaxProcessesPerShell property of a session configuration.`, `Int32`),
        new Parameter(`MaxSessions`, `Limits the number of sessions that use the session configuration. The default value is 25.


The MaxSessions parameter corresponds to the MaxShells property of a session configuration.`, `Int32`),
        new Parameter(`MaxSessionsPerUser`, `Limits the number of sessions that use the session configuration and run with the credentials of a given user to the specified value. 
The default value is 25.


When you specify this value, consider that many users might be using the credentials of a run as user.


The MaxSessionsPerUser parameter corresponds to the MaxShellsPerUser property of a session configuration.`, `Int32`),
        new Parameter(`OutputBufferingMode`, `Determines how command output is managed in disconnected sessions when the output buffer becomes full. The acceptable values for this 
parameter are:


- Block. When the output buffer is full, execution is suspended until the buffer is clear.  - Drop. When the output buffer is full, 
execution continues. As new output is saved, the oldest output is discarded.  - None. No output buffering mode is specified.


The default value of the OutputBufferingMode property of sessions is Block.`, `OutputBufferingMode`),
        new Parameter(`ProcessIdleTimeoutSec`, `Limits the time-out for each host process to the specified value. The default value, 0, means that there is no time-out value for the 
process.


Other session configurations have per-process time-out values. For example, the Microsoft.PowerShell.Workflow session configuration 
has a per-process time-out value of 28800 seconds (8 hours).`, `Int32`),
    ], `Creates an object that contains advanced options for a session configuration.`, `New-PSTransportOption [-IdleTimeoutSec <Int32>] [-MaxConcurrentCommandsPerSession <Int32>] [-MaxConcurrentUsers <Int32>] 
[-MaxIdleTimeoutSec <Int32>] [-MaxMemoryPerSessionMB <Int32>] [-MaxProcessesPerSession <Int32>] [-MaxSessions <Int32>] 
[-MaxSessionsPerUser <Int32>] [-OutputBufferingMode {None | Drop | Block}] [-ProcessIdleTimeoutSec <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-PSWorkflowExecutionOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-ScheduledJobOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-SelfSignedCertificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Service`, [
        new Parameter(`BinaryPathName`, `Specifies the path of the executable file for the service. This parameter is required.`, `String`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
        new Parameter(`DependsOn`, `Specifies the names of other services upon which the new service depends. To enter multiple service names, use a comma to separate 
the names.`, `String[]`),
        new Parameter(`Description`, `Specifies a description of the service.`, `String`),
        new Parameter(`DisplayName`, `Specifies a display name for the service.`, `String`),
        new Parameter(`Name`, `Specifies the name of the service. This parameter is required.`, `String`),
        new Parameter(`StartupType`, `Sets the startup type of the service. The acceptable values for this parameter are:


- Manual. The service is started only manually, by a user, using the Service Control Manager, or by an application.  - Automatic. The 
service is started or was started by the operating system, at system start-up. If an automatically started service depends on a 
manually started service, the manually started service is also started automatically at system startup.  - Disabled. The service is 
disabled and cannot be started by a user or application.


The default value is Automatic.`, `ServiceStartMode`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates a new Windows service.`, `New-Service [-Name] <String> [-BinaryPathName] <String> [-Confirm] [-Credential <PSCredential>] [-DependsOn <String[]>] [-Description 
<String>] [-DisplayName <String>] [-StartupType {Boot | System | Automatic | Manual | Disabled}] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-TimeSpan`, [
        new Parameter(`Days`, `Specifies the days in the time span. The default value is 0.`, `Int32`),
        new Parameter(`End`, `Specifies the end of a time span. The default value is the current date and time.`, `DateTime`),
        new Parameter(`Hours`, `Specifies the hours in the time span. The default value is zero.`, `Int32`),
        new Parameter(`Minutes`, `Specifies the minutes in the time span. The default value is 0.`, `Int32`),
        new Parameter(`Seconds`, `Specifies the length of the time span in seconds. The default value is 0.`, `Int32`),
        new Parameter(`Start`, `Specifies the start of a time span. Enter a string that represents the date and time, such as "3/15/09" or a DateTime object, such as 
one from a Get-Date command. The default value is the current date and time.


You can use Start or its alias, LastWriteTime. The LastWriteTime alias lets you pipe objects that have a LastWriteTime property, such 
as files in the file system (System.Io.FileIO), to the Start parameter of New-TimeSpan .`, `DateTime`),
    ], `Creates a TimeSpan object.`, `New-TimeSpan [-Days <Int32>] [-Hours <Int32>] [-Minutes <Int32>] [-Seconds <Int32>] [<CommonParameters>]

New-TimeSpan [[-Start] <DateTime>] [[-End] <DateTime>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-TlsSessionTicketKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-Variable`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Description`, `Specifies a description of the variable.`, `String`),
        new Parameter(`Force`, `Indicates that the cmdlet creates a variable with the same name as an existing read-only variable.


By default, you can overwrite a variable unless the variable has an option value of ReadOnly or Constant. For more information, see 
the Option parameter.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies a name for the new variable.`, `String`),
        new Parameter(`Option`, `Specifies the value of the Options property of the variable.The acceptable values for this parameter are:


- None. Sets no options. (None is the default.) - ReadOnly. Can be deleted. Cannot be not changed, except by using the Force 
parameter. - Private. The variable is available only in the current scope. - AllScope. The variable is copied to any new scopes that 
are created. - Constant. Cannot be deleted or changed. Constant is valid only when you are creating a variable. You cannot change the 
options of an existing variable to Constant.


To see the Options property of all variables in the session, type "Get-Variable | Format-Table -Property name, options -autosize".`, `ScopedItemOptions`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Scope`, `Specifies the scope of the new variable. The acceptable values for this parameter are:


- Global


- Local


- Script


- A number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent).


Local is the default.


For more information, see about_Scopes.`, `String`),
        new Parameter(`Value`, `Specifies the initial value of the variable.`, `Object`),
        new Parameter(`Visibility`, `Determines whether the variable is visible outside of the session in which it was created. This parameter is designed for  use in 
scripts and commands that will be delivered to other users. The acceptable values for this parameter are:


- Public. The variable is visible. (Public is the default.) - Private. The variable is not visible.


When a variable is private, it does not appear in lists of variables, such as those returned by Get-Variable, or in displays of the 
Variable: drive. Commands to read or change the value of a private variable return an error. However, the user can run commands that 
use a private variable if the commands were written in the session in which the variable was defined.`, `SessionStateEntryVisibility`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates a new variable.`, `New-Variable [-Name] <String> [[-Value] <Object>] [-Confirm] [-Description <String>] [-Force] [-Option {None | ReadOnly | Constant | 
Private | AllScope | Unspecified}] [-PassThru] [-Scope <String>] [-Visibility {Public | Private}] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-WebServiceProxy`, [
        new Parameter(`Class`, `Specifies a name for the proxy class that the cmdlet creates for the Web service. The value of this parameter is used together with 
the Namespace parameter to provide a fully qualified name for the class. The default value is generated from the Uniform Resource 
Identifier (URI).`, `String`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user. This is an alternative to using 
the UseDefaultCredential parameter.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
        new Parameter(`Namespace`, `Specifies a namespace for the new class.


The value of this parameter is used together with the value of the Class parameter to generate a fully qualified name for the class. 
The default value is Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes plus a type that is generated from the URI.


You can set the value of the Namespace parameter so that you can access multiple Web services that have the same name.`, `String`),
        new Parameter(`Uri`, `Specifies the URI of the Web service. Enter a URI or the path and file name of a file that contains a service description.


The URI must refer to an .asmx page or to a page that returns a service description. To return a service description of a Web service 
that was created by using ASP.NET, append "?WSDL" to the URL of the Web service, for example: 
http://www.contoso.com/MyWebService.asmx?WSDL.`, `Uri`),
        new Parameter(`UseDefaultCredential`, `Indicates that this cmdlet uses the default credential. This cmdlet sets the UseDefaultCredential property in the resulting proxy 
object to True. This is an alternative to using the Credential parameter.`, `SwitchParameter`),
    ], `Creates a Web service proxy object that lets you use and manage the Web service in Windows PowerShell.`, `New-WebServiceProxy [-Uri] <Uri> [[-Class] <String>] [[-Namespace] <String>] [-Credential <PSCredential>] [<CommonParameters>]

New-WebServiceProxy [-Uri] <Uri> [[-Class] <String>] [[-Namespace] <String>] [-UseDefaultCredential] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-WindowsCustomImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-WinEvent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-WinUserLanguageList`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-WSManInstance`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`New-WSManSessionOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Optimize-AppxProvisionedPackages`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Optimize-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Out-Default`, [
        new Parameter(`InputObject`, `Accepts input to the cmdlet.`, `PSObject`),
        new Parameter(`Transcript`, `@{Text=}`, `SwitchParameter`),
    ], `Sends the output to the default formatter and to the default output cmdlet.`, `Out-Default [-InputObject <PSObject>] [-Transcript] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Out-File`, [
        new Parameter(`Append`, `Indicates that the cmdlet adds the output to the end of an existing file, instead of replacing the file contents.`, `SwitchParameter`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Encoding`, `Specifies the type of character encoding used in the file. The acceptable values for this parameter are:


- Unknown


- String


- Unicode


- BigEndianUnicode


- UTF8


- UTF7


- UTF32


- ASCII


- Default


- OEM




Unicode is the default.


Default uses the encoding of the system's current ANSI code page.

OEM uses the current original equipment manufacturer code page identifier for the operating system.`, `String`),
        new Parameter(`FilePath`, `Specifies the path to the output file.`, `String`),
        new Parameter(`Force`, `Indicates that the cmdlet overwrites an existing read-only file. Even using the Force parameter, the cmdlet cannot override security 
restrictions.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the objects to be written to the file. Enter a variable that contains the objects or type a command or expression that gets 
the objects.`, `PSObject`),
        new Parameter(`LiteralPath`, `Specifies the path to the output file. Unlike FilePath , the value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`NoClobber`, `Indicates that the cmdlet will not overwrite an existing file. By default, if a file exists in the specified path, Out-File 
overwrites the file without warning. If both Append and NoClobber are used, the output is appended to the existing file.`, `SwitchParameter`),
        new Parameter(`NoNewline`, `@{Text=}`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        new Parameter(`Width`, `Specifies the number of characters in each line of output. Any additional characters are truncated, not wrapped. If you omit this 
parameter, the width is determined by the characteristics of the host. The default for the Windows PowerShell console is 80 
characters.`, `Int32`),
    ], `Sends output to a file.`, `Out-File [-FilePath] <String> [[-Encoding] {unknown | string | unicode | bigendianunicode | utf8 | utf7 | utf32 | ascii | default | 
oem}] [-Append] [-Confirm] [-Force] [-InputObject <PSObject>] [-NoClobber] [-NoNewline] [-WhatIf] [-Width <Int32>] 
[<CommonParameters>]

Out-File [[-Encoding] {unknown | string | unicode | bigendianunicode | utf8 | utf7 | utf32 | ascii | default | oem}] [-Append] 
[-Confirm] [-Force] [-InputObject <PSObject>] -LiteralPath <String> [-NoClobber] [-NoNewline] [-WhatIf] [-Width <Int32>] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Out-GridView`, [
        new Parameter(`InputObject`, `Specifies that the cmdlet accepts input for Out-GridView .


When you use the InputObject parameter to send a collection of objects to Out-GridView , Out-GridView treats the collection as one 
collection object, and it displays one row that represents the collection. To display the each object in the collection, use a 
pipeline operator (|) to send objects to Out-GridView .`, `PSObject`),
        new Parameter(`OutputMode`, `Specifies the items that the interactive window sends down the pipeline as input to other commands. By default, this cmdlet does not 
generate any output. To send items from the interactive window down the pipeline, click to select the items and then click OK.


The values of this parameter determine how many items you can send down the pipeline.


- None.  No items. This is the default value.


- Single.  Zero items or one item. Use this value when the next command can take only one input object.


- Multiple.  Zero, one, or many items.  Use this value when the next command can take multiple input objects. This value is 
equivalent to the Passthru parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `OutputModeOption`),
        new Parameter(`PassThru`, `Indicates that the cmdlet sends items from the interactive window down the pipeline as input to other commands. By default, this 
cmdlet does not generate any output. This parameter is equivalent to using the Multiple value of the OutputMode parameter.


To send items from the interactive window down the pipeline, click to select the items and then click OK. Shift-click and Ctrl-click 
are supported.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Title`, `Specifies the text that appears in the title bar of the Out-GridView window.


By default, the title bar displays the command that invokes Out-GridView .`, `String`),
        new Parameter(`Wait`, `Indicates that the cmdlet suppresses the command prompt and prevents Windows PowerShell from closing until the Out-GridView window is 
closed. By default, the command prompt returns when the Out-GridView window opens.


This feature lets you use the Out-GridView cmdlets in Windows shortcuts. When Out-GridView is used in a shortcut without the Wait 
parameter, the Out-GridView window appears only momentarily before Windows PowerShell closes.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
    ], `Sends output to an interactive table in a separate window.`, `Out-GridView [-InputObject <PSObject>] [-OutputMode {None | Single | Multiple}] [-Title <String>] [<CommonParameters>]

Out-GridView [-InputObject <PSObject>] [-PassThru] [-Title <String>] [<CommonParameters>]

Out-GridView [-InputObject <PSObject>] [-Title <String>] [-Wait] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Out-Host`, [
        new Parameter(`InputObject`, `Specifies the objects that are written to the console. Enter a variable that contains the objects, or type a command or expression 
that gets the objects.`, `PSObject`),
        new Parameter(`Paging`, `Indicates that this cmdlet displays one page of output at a time, and waits for user input before it displays the remaining pages, 
much like the traditional more command. By default, all of the output is displayed on a single page. The page size is determined by 
the characteristics of the host.`, `SwitchParameter`),
    ], `Sends output to the command line.`, `Out-Host [-InputObject <PSObject>] [-Paging] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Out-Null`, [
        new Parameter(`InputObject`, `Specifies the object that was sent to null, or deleted. Enter a variable that contains the objects, or type a command or expression 
that gets the objects.`, `PSObject`),
    ], `Deletes output instead of sending it down the pipeline.`, `Out-Null [-InputObject <PSObject>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Out-Printer`, [
        new Parameter(`InputObject`, `Specifies the objects to be sent to the printer. Enter a variable that contains the objects, or type a command or expression that 
gets the objects.`, `PSObject`),
        new Parameter(`Name`, `Specifies the alternate printer. The parameter name Name is optional.`, `String`),
    ], `Sends output to a printer.`, `Out-Printer [[-Name] <String>] [-InputObject <PSObject>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Out-String`, [
        new Parameter(`InputObject`, `Specifies the objects to be written to a string. Enter a variable that contains the objects, or type a command or expression that 
gets the objects.`, `PSObject`),
        new Parameter(`Stream`, `Indicates that the cmdlet sends the strings for each object separately. By default, the strings for each object are accumulated and 
sent as a single string.


To use the Stream parameter, type "-Stream" or its alias, "ost".`, `SwitchParameter`),
        new Parameter(`Width`, `Specifies the number of characters in each line of output. Any additional characters are truncated, not wrapped. If you omit this 
parameter, the width is determined by the characteristics of the host program. The default value for the Windows PowerShell console 
is 80 (characters).`, `Int32`),
    ], `Sends objects to the host as a series of strings.`, `Out-String [-InputObject <PSObject>] [-Stream] [-Width <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Pop-Location`, [
        new Parameter(`PassThru`, `Passes an object that represents the location to the pipeline. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`StackName`, `Specifies the location stack from which the location is popped. Enter a location stack name.


Without this parameter, Pop-Location pops a location from the current location stack. By default, the current location stack is the 
unnamed default location stack that Windows PowerShell creates. To make a location stack the current location stack, use the 
StackName parameter of Set-Location . Pop-Location cannot pop a location from the unnamed default stack unless it is the current 
location stack.`, `String`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Changes the current location to the location most recently pushed onto the stack.`, `Pop-Location [-PassThru] [-StackName <String>] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Protect-CmsMessage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Publish-AppvClientPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Publish-DscConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Push-Location`, [
        new Parameter(`LiteralPath`, `Specifies the path of the new location. Unlike the Path parameter, the value of the LiteralPath parameter is used exactly as it is 
typed. No characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation 
marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`PassThru`, `Passes an object that represents the location to the pipeline. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path of the new location. This cmdlet your location to the location specified by this path after it adds, or pushes, 
the current location onto the top of the stack. Enter a path of any location whose provider supports this cmdlet. Wildcard characters 
are permitted.`, `String`),
        new Parameter(`StackName`, `Specifies the location stack to which the current location is added. Enter a location stack name. If the stack does not exist, 
Push-Location creates it.


Without this parameter, Push-Location adds the location to the current location stack. By default, the current location stack is the 
unnamed default location stack that Windows PowerShell creates. To make a location stack the current location stack, use the 
StackName parameter of the Set-Location cmdlet.  For more information about location stacks, see the Notes. Push-Location cannot add 
a location to the unnamed default stack unless it is the current location stack.`, `String`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Adds the current location to the top of a location stack.`, `Push-Location [-LiteralPath <String>] [-PassThru] [-StackName <String>] [-UseTransaction] [<CommonParameters>]

Push-Location [[-Path] <String>] [-PassThru] [-StackName <String>] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Read-Host`, [
        new Parameter(`AsSecureString`, `Indicates that the cmdlet displays asterisks (*) in place of the characters that the user types as input.


When you use this parameter, the output of the Read-Host cmdlet is a SecureString object ( System.Security.SecureString ).`, `SwitchParameter`),
        new Parameter(`Prompt`, `Specifies the text of the prompt. Type a string. If the string includes spaces, enclose it in quotation marks. Windows PowerShell 
appends a colon (:) to the text that you enter.`, `Object`),
    ], `Reads a line of input from the console.`, `Read-Host [[-Prompt] <Object>] [-AsSecureString] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Receive-DtcDiagnosticTransaction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Receive-Job`, [
        new Parameter(`AutoRemoveJob`, `Indicates that this cmdlet deletes the job after it returns the job results. If the job has more results, the job is still deleted, 
but Receive-Job displays a message.


This parameter works only on custom job types. It is designed for instances of job types that save the job or the type outside of the 
session, such as instances of scheduled jobs.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`ComputerName`, `Specifies an array of names of computers. This cmdlet gets the results of jobs that were run on the specified computers. Enter the 
computer names. Wildcard characters are supported. The default is all jobs in the current session.


This parameter selects from among the job results that are stored on the local computer. It does not get data from remote computers. 
To get job results that are stored on remote computers, use the Invoke-Command cmdlet to run a Receive-Job command remotely.`, `String[]`),
        new Parameter(`Force`, `Indicates that this cmdlet continues waiting if jobs are in the Suspended or Disconnected state. By default, the Wait parameter of 
Receive-Job returns, or terminates the wait, when jobs are in one of the following states:  Completed, Failed, Stopped, Suspended, or 
Disconnected.


The Force parameter is valid only when the Wait parameter is also used in the command.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies an array of IDs. This cmdlet gets the results of jobs with the specified IDs. The default is all jobs in the current 
session.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and type than the instance ID, 
but it is unique only in the current session. You can type one or more IDs separated by commas. To find the ID of a job, type 
"Get-Job" without parameters.`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies an array of instance IDs. This cmdlet gets the results of jobs with the specified instance IDs. The default is all jobs in 
the current session.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use the Get-Job cmdlet.`, `Guid[]`),
        new Parameter(`Job`, `Specifies the job for which results are being retrieved. This parameter is required in a Receive-Job command. Enter a variable that 
contains the job or a command that gets the job. You can also pipe a job object to Receive-Job .`, `Job[]`),
        new Parameter(`Keep`, `Indicates that this cmdlet saves the job results in the system, even after you have received them. By default, the job results are 
deleted when they are retrieved.


To delete the results, use Receive-Job to receive them again without specifying Keep parameter, close the session, or use the 
Remove-Job cmdlet to delete the job from the session.`, `SwitchParameter`),
        new Parameter(`Location`, `Specifies an array of locations. This cmdlet gets only the results of jobs in the specified locations. The default is all jobs in the 
current session.`, `String[]`),
        new Parameter(`Name`, `Specifies an array of friendly names. This cmdlet gets the results of jobs that have the specified names. Wildcard characters are 
supported. The default is all jobs in the current session.`, `String[]`),
        new Parameter(`NoRecurse`, `Indicates that this cmdlet gets results only from the specified job. By default, Receive-Job also gets the results of all child jobs 
of the specified job.`, `SwitchParameter`),
        new Parameter(`Session`, `Specifies an array of sessions. This cmdlet gets the results of jobs that were run in the specified Windows PowerShell session ( 
PSSession ). Enter a variable that contains the PSSession or a command that gets the PSSession , such as a Get-PSSession command. The 
default is all jobs in the current session.`, `PSSession[]`),
        new Parameter(`Wait`, `Indicates that this cmdlet suppresses the command prompt until all job results are received. By default, Receive-Job immediately 
returns the available results.


By default, the Wait parameter waits until the job is in one of the following states: Completed, Failed, Stopped, Suspended, or 
Disconnected. To direct the Wait parameter to continue waiting if the job state is Suspended or Disconnected, use the Force parameter 
together with the Wait parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`WriteEvents`, `Indicates that this cmdlet reports changes in the job state while it waits for the job to finish.


This parameter is valid only when the Wait parameter is used in the command and the Keep parameter is omitted.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`WriteJobInResults`, `Indicates that this cmdlet returns the job object followed by the results.


This parameter is valid only when the Wait parameter is used in the command and the Keep parameter is omitted.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
    ], `Gets the results of the Windows PowerShell background jobs in the current session.`, `Receive-Job [-Job] <Job[]> [[-ComputerName] <String[]>] [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] [-WriteEvents] 
[-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Id] <Int32[]> [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] [-WriteEvents] [-WriteJobInResults] 
[<CommonParameters>]

Receive-Job [-InstanceId] <Guid[]> [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] [-WriteEvents] [-WriteJobInResults] 
[<CommonParameters>]

Receive-Job [-Job] <Job[]> [[-Location] <String[]>] [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] [-WriteEvents] 
[-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Job] <Job[]> [[-Session] <PSSession[]>] [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] [-WriteEvents] 
[-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Name] <String[]> [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] [-WriteEvents] [-WriteJobInResults] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Receive-PSSession`, [
        new Parameter(`AllowRedirection`, `Indicates that this cmdlet allows redirection of this connection to an alternate Uniform Resource Identifier (URI).


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different URI. By 
default, Windows PowerShell does not redirect connections, but you can use this parameter to enable it to redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount session option 
value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the MaximumConnectionRedirectionCount property 
of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
        new Parameter(`ApplicationName`, `Specifies an application. This cmdlet connects only to sessions that use the specified application.


Enter the application name segment of the connection URI. For example, in the following connection URI, the application name is 
WSMan: "http://localhost:5985/WSMAN". The application name of a session is stored in the Runspace.ConnectionInfo.AppName property of 
the session.


The value of this parameter is used to select and filter sessions. It does not change the application that the session uses.`, `String`),
        new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate the credentials of the user in the command to reconnect to the disconnected 
session. The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


For information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the Microsoft Developer 
Network (MSDN) library.

CAUTION: Credential Security Support Provider (CredSSP) authentication, in which the user credentials are passed to a remote computer 
to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a remote 
network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
        new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to connect to the disconnected session. 
Enter the certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts. They do not work 
with domain accounts.


To get a certificate thumbprint, use a Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
        new Parameter(`ComputerName`, `Specifies the computer on which the disconnected session is stored. Sessions are stored on the computer that is at the server-side, 
or receiving end of a connection. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one computer. Wildcard characters are not permitted. To 
specify the local computer, type the computer name, localhost, or a dot (.)`, `String`),
        new Parameter(`ConfigurationName`, `Specifies the name of a session configuration. This cmdlet connects only to sessions that use the specified session configuration.


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the configuration 
name, the following schema URI is prepended: http://schemas.microsoft.com/powershell. The configuration name of a session is stored 
in the ConfigurationName property of the session.


The value of this parameter is used to select and filter sessions. It does not change the session configuration that the session uses.


For more information about session configurations, see about_Session_Configurations.`, `String`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint that is used to reconnect to the disconnected session.


The URI must be fully qualified. The format of this string is as follows:


<Transport>://<ComputerName>:<Port>/<ApplicationName>


The default value is as follows:


"http://localhost:5985/WSMAN"


"http://localhost:5985/WSMAN"


If you do not specify a connection URI, you can use the UseSSL , ComputerName , Port , and ApplicationName parameters to specify the 
connection URI values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport segment, but 
do not specify a port, the session is created with standards ports: 80 for HTTP and 443 for HTTPS. To use the default ports for 
Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection unless you use 
the AllowRedirection parameter in the command.`, `Uri`),
        new Parameter(`Credential`, `Specifies a user account that has permission to connect to the disconnected session. The default is the current user.


Type a user name, such as User01 or Domain01\\User01. Or, enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
        new Parameter(`Id`, `Specifies the ID of the disconnected session. The Id parameter works only when the disconnected session was previously connected to 
the current session.


This parameter is valid, but not effective, when the session is stored on the local computer, but was not connected to the current 
session.`, `Int32`),
        new Parameter(`InstanceId`, `Specifies the instance ID of the disconnected session.


The instance ID is a GUID that uniquely identifies a PSSession on a local or remote computer.


The instance ID is stored in the InstanceID property of the PSSession .`, `Guid`),
        new Parameter(`JobName`, `Specifies a friendly name for the job that Receive-PSSession returns. Receive-PSSession returns a job when the value of the OutTarget 
parameter is Job or the job that is running in the disconnected session was started in the current session.


If the job that is running in the disconnected session was started in the current session, Windows PowerShell reuses the original job 
object in the session and ignores the value of the JobName parameter.


If the job that is running in the disconnected session was started in a different session, Windows PowerShell creates a new job 
object. It uses a default name, but you can use this parameter to change the name.


If the default value or explicit value of the OutTarget parameter is not Job, the command succeeds, but the JobName parameter has no 
effect.`, `String`),
        new Parameter(`Name`, `Specifies the friendly name of the disconnected session.`, `String`),
        new Parameter(`OutTarget`, `Determines how the session results are returned. The acceptable values for this parameter are:


- Job. Returns the results asynchronously in a job object. You can use the JobName parameter to specify a name or new name for the 
job.  - Host. Returns the results to the command line (synchronously). If the command is being resumed or the results consist of a 
large number of objects, the response might be delayed.


The default value of the OutTarget parameter is Host. However, if the command that is being received in disconnected session was 
started in the current session, the default value of the OutTarget parameter is the form in which the command was started. If the 
command was started as a job, it is returned as a job by default. Otherwise, it is returned to the host program by default.


Typically, the host program displays returned objects at the command line without delay, but this behavior can vary.`, `OutTarget`),
        new Parameter(`Port`, `Specifies the network port on the remote computer that is used to reconnect to the session. To connect to a remote computer, the 
remote computer must be listening on the port that the connection uses. The default ports are 5985, which is the WinRM port for HTTP, 
and 5986, which is the WinRM port for HTTPS.


Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that port. To configure the 
listener, type the following two commands at the Windows PowerShell prompt:


"Remove-Item -Path WSMan:\\Localhost\\listener\\listener* -Recurse"


"New-Item -Path WSMan:\\Localhost\\listener -Transport http -Address * -Port <port-number>"


Do not use the Port parameter unless you must. The port that is set in the command applies to all computers or sessions on which the 
command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
        new Parameter(`Session`, `Specifies the disconnected session. Enter a variable that contains the PSSession or a command that creates or gets the PSSession , 
such as a Get-PSSession command.`, `PSSession`),
        new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is set. Otherwise, 
the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference variable and in the 
session configuration. However, they do not take precedence over maximum values, quotas or limits set in the session configuration.


For a description of the session options that includes the default values, see New-PSSessionOption. For information about the 
$PSSessionOption preference variable, see about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248). For more 
information about session configurations, see about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
        new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to connect to the disconnected session. By default, SSL is 
not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. UseSSL is an additional protection that sends the 
data across an HTTPS connection instead of an HTTP connection.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Gets results of commands in disconnected sessions.`, `Receive-PSSession [-ConnectionUri] <Uri> [-Name] <String> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Confirm] [-Credential <PSCredential>] [-JobName <String>] [-OutTarget {Default | Host | Job}] [-SessionOption <PSSessionOption>] 
[-WhatIf] [<CommonParameters>]

Receive-PSSession [-ConnectionUri] <Uri> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Confirm] [-Credential <PSCredential>] -InstanceId <Guid> [-JobName <String>] [-OutTarget {Default | Host | Job}] [-SessionOption 
<PSSessionOption>] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-ComputerName] <String> [-Name] <String> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate 
| NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Confirm] [-Credential <PSCredential>] [-JobName <String>] [-OutTarget {Default | Host | Job}] [-Port <Int32>] [-SessionOption 
<PSSessionOption>] [-UseSSL] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-ComputerName] <String> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] 
[-Confirm] [-Credential <PSCredential>] -InstanceId <Guid> [-JobName <String>] [-OutTarget {Default | Host | Job}] [-Port <Int32>] 
[-SessionOption <PSSessionOption>] [-UseSSL] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-Id] <Int32> [-Confirm] [-JobName <String>] [-OutTarget {Default | Host | Job}] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-Confirm] -InstanceId <Guid> [-JobName <String>] [-OutTarget {Default | Host | Job}] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-Name] <String> [-Confirm] [-JobName <String>] [-OutTarget {Default | Host | Job}] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-Session] <PSSession> [-Confirm] [-JobName <String>] [-OutTarget {Default | Host | Job}] [-WhatIf] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-ArgumentCompleter`, [
        new Parameter(`CommandName`, `Specifies the name of the command as an array.`, `String[]`),
        new Parameter(`Native`, `Indicates that the argument completer is for a native command where Windows PowerShell cannot complete parameter names.`, `SwitchParameter`),
        new Parameter(`ParameterName`, `Specifies the name of the parameter whose argument is being completed.`, `String`),
        new Parameter(`ScriptBlock`, `Specifies the commands to run. Enclose the commands in braces ( { } ) to create a script block. This parameter is required.`, `ScriptBlock`),
    ], `Registers a custom argument completer.`, `Register-ArgumentCompleter [-CommandName <String[]>] -ParameterName <String> -ScriptBlock <ScriptBlock> [<CommonParameters>]

Register-ArgumentCompleter -CommandName <String[]> [-Native] -ScriptBlock <ScriptBlock> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-CimIndicationEvent`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-EngineEvent`, [
        new Parameter(`Action`, `Specifies commands to handle the events. The commands in the Action run when an event is raised, instead of sending the event to the 
event queue. Enclose the commands in braces ( { } ) to create a script block.


The value of the Action parameter can include the $Event, $EventSubscriber, $Sender, $EventArgs, and $Args automatic variables, which 
provide information about the event to the Action script block. For more information, see about_Automatic_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113212).


When you specify an action, Register-EngineEvent returns an event job object that represents that action. You can use the Job cmdlets 
to manage the event job.`, `ScriptBlock`),
        new Parameter(`Forward`, `Indicates that the cmdlet sends events for this subscription to the session on the local computer. Use this parameter when you are 
registering for events on a remote computer or in a remote session.`, `SwitchParameter`),
        new Parameter(`MaxTriggerCount`, `Specifies the max trigger count.


The value of the Action parameter can include the $Event, $EventSubscriber, $Sender, $EventArgs, and $Args automatic variables, which 
provide information about the event to the Action script block. For more information, see about_Automatic_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113212).


When you specify an action, Register-EngineEvent returns an event job object that represents that action. You can use the Job cmdlets 
to manage the event job.`, `Int32`),
        new Parameter(`MessageData`, `Specifies additional data associated with the event. The value of this parameter appears in the MessageData property of the event 
object.`, `PSObject`),
        new Parameter(`SourceIdentifier`, `Specifies the source identifier of the event to which you are subscribing. The source identifier must be unique in the current 
session. This parameter is required.


The value of this parameter appears in the value of the SourceIdentifier property of the subscriber object and of all event objects 
associated with this subscription.


Supported EngineEvent values include PowerShell.Exiting, PowerShell.OnIdle, and PowerShell.OnScriptBlockInvoke.`, `String`),
        new Parameter(`SupportEvent`, `Indicates that the cmdlet hides the event subscription. Add this parameter when the current subscription is part of a more complex 
event registration mechanism and it should not be discovered independently.


To view or cancel a subscription that was created with the SupportEvent parameter, add the Force parameter to the Get-EventSubscriber 
or Unregister-Event cmdlets.`, `SwitchParameter`),
    ], `Subscribes to events that are generated by the Windows PowerShell engine and by the New-Event cmdlet.`, `Register-EngineEvent [-SourceIdentifier] <String> [[-Action] <ScriptBlock>] [-Forward] [-MaxTriggerCount <Int32>] [-MessageData 
<PSObject>] [-SupportEvent] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-ObjectEvent`, [
        new Parameter(`Action`, `Specifies commands to handle the events. The commands in the Action run when an event is raised, instead of sending the event to the 
event queue. Enclose the commands in braces ( { } ) to create a script block.


The value of the Action parameter can include the $Event, $EventSubscriber, $Sender, $EventArgs, and $Args automatic variables, which 
provide information about the event to the Action script block. For more information, see about_Automatic_Variables.


When you specify an action, Register-ObjectEvent returns an event job object that represents that action. You can use the Job cmdlets 
to manage the event job.`, `ScriptBlock`),
        new Parameter(`EventName`, `Specifies the event to which you are subscribing. Enter the event name. This parameter is required.


The value of this parameter is not a name that you select for the event subscription. It is the name of an event that the .NET 
Framework object exposes. For example, the ManagementEventWatcher class has events named EventArrived and Stopped. To find the event 
name of an event, use the Get-Member cmdlet.`, `String`),
        new Parameter(`Forward`, `Indicates that the cmdlet sends events for this subscription to a remote session. Use this parameter when you are registering for 
events on a remote computer or in a remote session.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the .NET Framework object that generates the events. Enter a variable that contains the object, or type a command or 
expression that gets the object. This parameter is required.`, `PSObject`),
        new Parameter(`MaxTriggerCount`, `Specifies the max trigger count.


The value of the Action parameter can include the $Event, $EventSubscriber, $Sender, $EventArgs, and $Args automatic variables, which 
provide information about the event to the Action script block. For more information, see about_Automatic_Variables.


When you specify an action, Register-ObjectEvent returns an event job object that represents that action. You can use the Job cmdlets 
to manage the event job.`, `Int32`),
        new Parameter(`MessageData`, `Specifies any additional data to be associated with this event subscription. The value of this parameter appears in the MessageData 
property of all events associated with this subscription.`, `PSObject`),
        new Parameter(`SourceIdentifier`, `Specifies a name that you select for the subscription. The name that you select must be unique in the current session. The default 
value is the GUID that Windows PowerShell assigns.


The value of this parameter appears in the value of the SourceIdentifier property of the subcriber object and of all event objects 
associated with this subscription.`, `String`),
        new Parameter(`SupportEvent`, `Indicates that the cmdlet hides the event subscription. Use this parameter when the current subscription is part of a more complex 
event registration mechanism and it should not be discovered independently.


To view or cancel a subscription that was created with the SupportEvent parameter, use the Force parameter of the Get-EventSubscriber 
and Unregister-Event cmdlets.`, `SwitchParameter`),
    ], `Subscribes to the events that are generated by a Microsoft .NET Framework object.`, `Register-ObjectEvent [-InputObject] <PSObject> [-EventName] <String> [[-SourceIdentifier] <String>] [[-Action] <ScriptBlock>] 
[-Forward] [-MaxTriggerCount <Int32>] [-MessageData <PSObject>] [-SupportEvent] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-PackageSource`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-PSSessionConfiguration`, [
        new Parameter(`AccessMode`, `Enables and disables the session configuration and determines whether it can be used for remote or local sessions on the computer. 
The acceptable values for this parameter are:


- Disabled. Disables the session configuration. It cannot be used for remote or local access to the computer.  - Local. Allows users 
of the local computer to use the session configuration to create a local loopback session on the same computer, but denies access to 
remote users.  - Remote. Allows local and remote users to use the session configuration to create sessions and run commands on this 
computer.


The default value is Remote.


Other cmdlets can override the value of this parameter later. For example, the Enable-PSRemoting cmdlet allows for remote access to 
all session configurations, the Enable-PSSessionConfiguration cmdlet enables session configurations, and the Disable-PSRemoting 
cmdlet prevents remote access to all session configurations.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionConfigurationAccessMode`),
        new Parameter(`ApplicationBase`, `Specifies the path of the assembly file ( .dll) that is specified in the value of the AssemblyName* parameter. Use this parameter 
when the value of the AssemblyName parameter does not include a path. The default is the current directory.`, `String`),
        new Parameter(`AssemblyName`, `Specifies the name of an assembly file (*.dll) in which the configuration type is defined. You can specify the path of the .dll in 
this parameter or in the value of the ApplicationBase parameter.


This parameter is required when you specify the ConfigurationTypeName parameter.`, `String`),
        new Parameter(`ConfigurationTypeName`, `Specifies the fully qualified name of the Microsoft .NET Framework type that is used for this configuration. The type that you 
specify must implement the System.Management.Automation.Remoting.PSSessionConfiguration class.


To specify the assembly file (.dll) that implements the configuration type, specify the AssemblyName and ApplicationBase parameters.


Creating a type lets you control more aspects of the session configuration, such as exposing or hiding certain parameters of cmdlets, 
or setting data size and object size limits that users cannot override.


If you omit this parameter, the DefaultRemotePowerShellConfiguration class is used for the session configuration.`, `String`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Suppresses all user prompts and restarts the WinRM service without prompting. Restarting the service makes the configuration change 
effective.


To prevent a restart and suppress the restart prompt, specify the NoServiceRestart parameter.`, `SwitchParameter`),
        new Parameter(`MaximumReceivedDataSizePerCommandMB`, `Specifies a limit for the amount of data that can be sent to this computer in any single remote command. Enter the data size in 
megabytes (MB). The default is 50 MB.


If a data size limit is defined in the configuration type that is specified in the ConfigurationTypeName parameter, the limit in the 
configuration type is used and the value of this parameter is ignored.`, `Double`),
        new Parameter(`MaximumReceivedObjectSizeMB`, `Specifies a limit for the amount of data that can be sent to this computer in any single object. Enter the data size in megabytes. 
The default is 10 MB.


If an object size limit is defined in the configuration type that is specified in the ConfigurationTypeName parameter, the limit in 
the configuration type is used and the value of this parameter is ignored.`, `Double`),
        new Parameter(`ModulesToImport`, `Specifies the modules and snap-ins that are automatically imported into sessions that use the session configuration.


By default, only the Microsoft.PowerShell.Core snap-in is imported into sessions. Unless the cmdlets are excluded, you can use the 
Import-Module and Add-PSSnapin cmdlets to add modules and snap-ins to the session.


The modules specified in this parameter value are imported in additions to modules that are specified by the SessionType parameter 
and those listed in the ModulesToImport key in the session configuration file (New-PSSessionConfigurationFile). However, settings in 
the session configuration file can hide the commands exported by modules or prevent users from using them.


This parameter was introduced in Windows PowerShell 3.0.`, `Object[]`),
        new Parameter(`Name`, `Specifies a name for the session configuration. This parameter is required.`, `String`),
        new Parameter(`NoServiceRestart`, `Does not restart the WinRM service, and suppresses the prompt to restart the service.


By default, when you run a Register-PSSessionConfiguration command, you are prompted to restart the WinRM service to make the new 
session configuration effective. Until the WinRM service is restarted, the new session configuration is not effective.


To restart the WinRM service without prompting, specify the Force parameter. To restart the WinRM service manually, use the 
Restart-Service cmdlet.`, `SwitchParameter`),
        new Parameter(`PSVersion`, `Specifies the version of Windows PowerShell in sessions that use this session configuration.


The value of this parameter takes precedence over the value of the PowerShellVersion key in the session configuration file.


This parameter was introduced in Windows PowerShell 3.0.`, `Version`),
        new Parameter(`Path`, `Specifies the path and file name of a session configuration file (.pssc), such as one created by the New-PSSessionConfigurationFile 
cmdlet. If you omit the path, the default is the current directory.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`ProcessorArchitecture`, `Determines whether a 32-bit or 64-bit version of the Windows PowerShell process is started in sessions that use this session 
configuration. The acceptable values for this parameter are: x86 (32-bit) and AMD64 (64-bit). The default value is determined by the 
processor architecture of the computer that hosts the session configuration.


You can use this parameter to create a 32-bit session on a 64-bit computer. Attempts to create a 64-bit process on a 32-bit computer 
fail.`, `String`),
        new Parameter(`RunAsCredential`, `Specifies credentials for commands in the session. By default, commands run with the permissions of the current user.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
        new Parameter(`SecurityDescriptorSddl`, `Specifies a Security Descriptor Definition Language (SDDL) string for the configuration.


This string determines the permissions that are required to use the new session configuration. To use a session configuration in a 
session, users must have at least Execute(Invoke) permission for the configuration.


If the security descriptor is complex, consider using the ShowSecurityDescriptorUI parameter instead of this parameter. You cannot 
use both parameters in the same command.


If you omit this parameter, the root SDDL for the WinRM service is used for this configuration. To view or change the root SDDL, use 
the WSMan provider. For example "Get-Item wsman:\\localhost\\service\\rootSDDL". For more information about the WSMan provider, type 
"Get-Help wsman".`, `String`),
        new Parameter(`SessionType`, `Specifies the type of session that is created by using the session configuration. The acceptable values for this parameter are:


- Empty. No modules or snap-ins are added to session by default. Use the parameters of this cmdlet to add modules, functions, 
scripts, and other features to the session.  - Default. Adds the Microsoft.PowerShell.Core snap-in to the session. This module 
includes the Import-Module and Add-PSSnapin cmdlets that users can use to import other modules and snap-ins unless you explicitly 
prohibit the use of the cmdlets.  - RestrictedRemoteServer. Includes only the following cmdlets: Exit-PSSession, Get-Command, 
Get-FormatData, Get-Help, Measure-Object, Out-Default, and Select-Object. Use a script or assembly, or the keys in the session 
configuration file, to add modules, functions, scripts, and other features to the session.


The default value is Default.


The value of this parameter takes precedence over the value of the SessionType key in the session configuration file.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionType`),
        new Parameter(`SessionTypeOption`, `Specifies type-specific options for the session configuration. Enter a session type options object, such as the 
PSWorkflowExecutionOption object that the New-PSWorkflowExecutionOption cmdlet returns.


The options of sessions that use the session configuration are determined by the values of session options and the session 
configuration options. Unless specified, options set in the session, such as by using the New-PSSessionOption cmdlet, take precedence 
over options set in the session configuration. However, session option values cannot exceed maximum values set in the session 
configuration.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionTypeOption`),
        new Parameter(`ShowSecurityDescriptorUI`, `Indicates that this cmdlet displays a property sheet that helps you create the SDDL for the session configuration. The property sheet 
appears after you enter the Register-PSSessionConfiguration command and then restart the WinRM service.


When setting the permissions for the configuration, remember that users must have at least Execute(Invoke) permission to use the 
session configuration in a session.


You cannot use the SecurityDescriptorSDDL parameter and this parameter in the same command.`, `SwitchParameter`),
        new Parameter(`StartupScript`, `Specifies the fully qualified path of a Windows PowerShell script. The specified script runs in the new session that uses the session 
configuration.


You can use the script to additionally configure the session. If the script generates an error, even a non-terminating error, the 
session is not created and the New-PSSession command fails.`, `String`),
        new Parameter(`ThreadApartmentState`, `Specifies the apartment state of the threads in the session. The acceptable values for this parameter are: STA, MTA, and Unknown. The 
default value is Unknown.`, `ApartmentState`),
        new Parameter(`ThreadOptions`, `Specifies how threads are created and used when a command runs in the session. The acceptable values for this parameter are:


- Default


- ReuseThread


- UseCurrentThread


- UseNewThread




The default value is UseCurrentThread.

For more information, see "PSThreadOptions Enumeration" in the Microsoft Developer Network (MSDN) library.`, `PSThreadOptions`),
        new Parameter(`TransportOption`, `Specifies the transport option.


This parameter was introduced in Windows PowerShell 3.0.`, `PSTransportOption`),
        new Parameter(`UseSharedProcess`, `Use only one process to host all sessions that are started by the same user and use the same session configuration. By default, each 
session is hosted in its own process.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates and registers a new session configuration.`, `Register-PSSessionConfiguration [-Name] <String> [-AccessMode {Disabled | Local | Remote}] [-ApplicationBase <String>] [-Confirm] 
[-Force] [-MaximumReceivedDataSizePerCommandMB <Double>] [-MaximumReceivedObjectSizeMB <Double>] [-ModulesToImport <Object[]>] 
[-NoServiceRestart] [-PSVersion <Version>] [-ProcessorArchitecture {x86 | amd64}] [-RunAsCredential <PSCredential>] 
[-SecurityDescriptorSddl <String>] [-SessionType {DefaultRemoteShell | Workflow}] [-SessionTypeOption <PSSessionTypeOption>] 
[-ShowSecurityDescriptorUI] [-StartupScript <String>] [-ThreadApartmentState {STA | MTA | Unknown}] [-ThreadOptions {Default | 
UseNewThread | ReuseThread | UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] [-WhatIf] 
[<CommonParameters>]

Register-PSSessionConfiguration [-Name] <String> [-AssemblyName] <String> [-ConfigurationTypeName] <String> [-AccessMode {Disabled | 
Local | Remote}] [-ApplicationBase <String>] [-Confirm] [-Force] [-MaximumReceivedDataSizePerCommandMB <Double>] 
[-MaximumReceivedObjectSizeMB <Double>] [-ModulesToImport <Object[]>] [-NoServiceRestart] [-PSVersion <Version>] 
[-ProcessorArchitecture {x86 | amd64}] [-RunAsCredential <PSCredential>] [-SecurityDescriptorSddl <String>] [-SessionTypeOption 
<PSSessionTypeOption>] [-ShowSecurityDescriptorUI] [-StartupScript <String>] [-ThreadApartmentState {STA | MTA | Unknown}] 
[-ThreadOptions {Default | UseNewThread | ReuseThread | UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] 
[-WhatIf] [<CommonParameters>]

Register-PSSessionConfiguration [-Name] <String> [-AccessMode {Disabled | Local | Remote}] [-Confirm] [-Force] 
[-MaximumReceivedDataSizePerCommandMB <Double>] [-MaximumReceivedObjectSizeMB <Double>] [-NoServiceRestart] -Path <String> 
[-ProcessorArchitecture {x86 | amd64}] [-RunAsCredential <PSCredential>] [-SecurityDescriptorSddl <String>] 
[-ShowSecurityDescriptorUI] [-StartupScript <String>] [-ThreadApartmentState {STA | MTA | Unknown}] [-ThreadOptions {Default | 
UseNewThread | ReuseThread | UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] [-WhatIf] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-ScheduledJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-UevTemplate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Register-WmiEvent`, [
        new Parameter(`Action`, `Specifies commands that handle the events. The commands in the Action parameter run when an event is raised instead of sending the 
event to the event queue. Enclose the commands in braces ( { } ) to create a script block.


The value of Action can include the $Event, $EventSubscriber, $Sender, $EventArgs, and $Args automatic variables, which provide 
information about the event to the Action script block. For more information, see about_Automatic_Variables.


When you specify an action, Register-WmiEvent returns an event job object that represents that action. You can use the cmdlets that 
contain the Job noun (the Job cmdlets) to manage the event job.`, `ScriptBlock`),
        new Parameter(`Class`, `Specifies the event to which you are subscribing. Enter the WMI class that generates the events. A Class or Query parameter is 
required in every command.`, `String`),
        new Parameter(`ComputerName`, `Specifies the name of the computer on which the command runs. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of the computer. To specify the local computer, type the 
computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your computer is not 
configured to run remote commands.`, `String`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
        new Parameter(`Forward`, `Indicates that this cmdlet sends events for this subscription to the session on the local computer. Use this parameter when you are 
registering for events on a remote computer or in a remote session.`, `SwitchParameter`),
        new Parameter(`MaxTriggerCount`, `Specifies the maximum trigger count.`, `Int32`),
        new Parameter(`MessageData`, `Specifies any additional data to be associated with this event subscription. The value of this parameter appears in the MessageData 
property of all events associated with this subscription.`, `PSObject`),
        new Parameter(`Namespace`, `Specifies the namespace of the WMI class.`, `String`),
        new Parameter(`Query`, `Specifies a query in WMI Query Language (WQL) that identifies the WMI event class, such as: "select * from __InstanceDeletionEvent".`, `String`),
        new Parameter(`SourceIdentifier`, `Specifies a name that you select for the subscription. The name that you select must be unique in the current session. The default 
value is the GUID that Windows PowerShell assigns.


The value of this parameter appears in the value of the SourceIdentifier property of the subscriber object and of all event objects 
associated with this subscription.`, `String`),
        new Parameter(`SupportEvent`, `Indicates that this cmdlet hides the event subscription. Use this parameter when the current subscription is part of a more complex 
event registration mechanism and it should not be discovered independently.


To view or cancel a subscription that was created by using the SupportEvent parameter, specify the Force parameter of the 
Get-EventSubscriber and Unregister-Event cmdlets.`, `SwitchParameter`),
        new Parameter(`Timeout`, `Specifies how long Windows PowerShell waits for this command to finish.


The default value, 0 (zero), means that there is no time-out, and it causes Windows PowerShell to wait indefinitely.`, `Int64`),
    ], `Subscribes to a Windows Management Instrumentation (WMI) event.`, `Register-WmiEvent [-Class] <String> [[-SourceIdentifier] <String>] [[-Action] <ScriptBlock>] [-ComputerName <String>] [-Credential 
<PSCredential>] [-Forward] [-MaxTriggerCount <Int32>] [-MessageData <PSObject>] [-Namespace <String>] [-SupportEvent] [-Timeout 
<Int64>] [<CommonParameters>]

Register-WmiEvent [-Query] <String> [[-SourceIdentifier] <String>] [[-Action] <ScriptBlock>] [-ComputerName <String>] [-Credential 
<PSCredential>] [-Forward] [-MaxTriggerCount <Int32>] [-MessageData <PSObject>] [-Namespace <String>] [-SupportEvent] [-Timeout 
<Int64>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-AppvClientConnectionGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-AppvClientPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-AppvPublishingServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-AppxPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-AppxProvisionedPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-AppxVolume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-BitsTransfer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-CertificateEnrollmentPolicyServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-CertificateNotificationTask`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-CimInstance`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-CimSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-CIPolicyRule`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-Computer`, [
        new Parameter(`ComputerName`, `Specifies the computers to be removed from their domains. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of the remote computers. To specify the local computer, type 
the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Remove-Computer even if your 
computer is not configured to run remote commands.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Suppresses the user prompt. By default, Remove-Computer prompts you for confirmation before removing each computer.`, `SwitchParameter`),
        new Parameter(`LocalCredential`, `Specifies a user account that has permission to connect to the computers that the ComputerName parameter specifies. The default is 
the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password. To specify a user account that has permission to remove the 
computer from its current domain, use the UnjoinDomainCredential parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
        new Parameter(`PassThru`, `Returns the results of the command. Otherwise, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Restart`, `Indicates that this cmdlet restarts the computers that were removed after the removal is completed. A restart is often required to 
make the change effective.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`UnjoinDomainCredential`, `Specifies a user account that has permission to remove the computers from their current domains. Explicit credentials, as provided by 
this parameter, are required to remove remote computers from a domain, even when the value is the credentials of the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by Get-Credential . If you 
type a user name, this cmdlet prompts you for a password.


You can refer to this parameter by its name, UnjoinDomainCredential , or its alias, Credential .


To specify a user account that has permission to connect to the remote computers, use the LocalCredential parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        new Parameter(`WorkgroupName`, `Specifies the name of a workgroup to which the computers are added when they are removed from their domains. The default value is 
WORKGROUP. When you remove a computer from a domain, you must add it to a workgroup.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
    ], `Removes the local computer from its domain.`, `Remove-Computer [-UnjoinDomainCredential] <PSCredential> [-ComputerName <String[]>] [-Confirm] [-Force] [-LocalCredential 
<PSCredential>] [-PassThru] [-Restart] [-WhatIf] [-WorkgroupName <String>] [<CommonParameters>]

Remove-Computer [[-UnjoinDomainCredential] <PSCredential>] [-Confirm] [-Force] [-PassThru] [-Restart] [-WhatIf] [-WorkgroupName 
<String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-Event`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`EventIdentifier`, `Specifies the event identifier for which the cmdlet deletes. An EventIdentifier or SourceIdentifier parameter is required in every 
command.`, `Int32`),
        new Parameter(`SourceIdentifier`, `Specifies the source identifier for which this cmdlet deletes events from. Wildcards are not permitted. An EventIdentifier or 
SourceIdentifier parameter is required in every command.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes events from the event queue.`, `Remove-Event [-EventIdentifier] <Int32> [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-Event [-SourceIdentifier] <String> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-EventLog`, [
        new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer. To specify the local computer, type the 
computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Remove-EventLog even if your 
computer is not configured to run remote commands.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`LogName`, `Specifies the event logs. Enter the log name of one or more event logs, separated by commas. The log name is the value of the Log 
property, not the LogDisplayName , Wildcard characters are not permitted. This parameter is required.`, `String[]`),
        new Parameter(`Source`, `Specifies the event sources that this cmdlet unregisters. Enter the source names, not the executable name, separated by commas.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes an event log or unregisters an event source.`, `Remove-EventLog [-LogName] <String[]> [[-ComputerName] <String[]>] [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-EventLog [[-ComputerName] <String[]>] [-Confirm] [-Source <String[]>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-Item`, [
        new Parameter(`Stream`, `Deletes the specified alternate data stream from a file, but does not delete the file. Enter the stream name. Wildcards are 
supported. This parameter is not valid on folders.

Stream is a dynamic parameter that the FileSystem provider adds to the Remove-Item cmdlet. This parameter works only in file system 
drives.

You can use the Remove-Item cmdlet to delete an alternate data stream. However, it is not the recommended way to eliminate security 
checks that block files that are downloaded from the Internet. If you verify that a downloaded file is safe, use the Unblock-File 
cmdlet.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as *.txt. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path parameter. The syntax of 
the filter, including the use of wildcard characters, depends on the provider. Filters are more efficient than other parameters, 
because the provider applies them when it retrieves the objects, instead of having Windows PowerShell filter the objects after they 
are retrieved.`, `String`),
        new Parameter(`Force`, `Forces the cmdlet to remove items that cannot otherwise be changed, such as hidden or read-only files or read-only aliases or 
variables. The cmdlet cannot remove constant aliases or variables. Implementation varies from provider to provider. For more 
information, see about_Providers. Even using the Force parameter, the cmdlet cannot override security restrictions.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies items to delete. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as *.txt. 
Wildcard characters are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path of the items being removed. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies a path of the items being removed. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Recurse`, `Indicates that this cmdlet deletes the items in the specified locations and in all child items of the locations.


When it is used with the Include parameter, the Recurse parameter might not delete all subfolders or all child items. This is a known 
issue. As a workaround, try piping results of the "Get-ChildItem -Recurse" command to Remove-Item , as described in Example 4 in this 
topic.`, `SwitchParameter`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes files and folders.`, `Remove-Item [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] 
-LiteralPath <String[]> [-Recurse] [-Stream <String[]>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Remove-Item [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] [-Recurse] [-Stream <String[]>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Remove-Item [-Stream <string>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-ItemProperty`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as *.txt. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path parameter. The syntax of 
the filter, including the use of wildcard characters, depends on the provider. Filters are more efficient than other parameters, 
because the provider applies them when it retrieves the objects instead of having Windows PowerShell filter the objects after they 
are retrieved.`, `String`),
        new Parameter(`Force`, `Forces the cmdlet to remove a property of an object that cannot otherwise be accessed by the user. Implementation varies from 
provider to provider. For more information, see about_Providers.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies items to delete. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as *.txt. 
Wildcard characters are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path of the item property. The value of the LiteralPath parameter is used exactly as it is typed. No characters are 
interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation 
marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Name`, `Specifies the names of the properties to remove.`, `String[]`),
        new Parameter(`Path`, `Specifies the path of the item whose properties are being removed. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes the property and its value from an item.`, `Remove-ItemProperty [-Name] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] 
[-Include <String[]>] -LiteralPath <String[]> [-UseTransaction] [-WhatIf] [<CommonParameters>]

Remove-ItemProperty [-Path] <String[]> [-Name] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-Job`, [
        new Parameter(`Command`, `Specifies an array of words that appear in commands. This cmdlet deletes jobs that include the specified words.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet deletes jobs that satisfy all of the conditions. Enter a hash table where the keys 
are job properties and the values are job property values.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs. It does not work on standard background 
jobs, such as those created by using the Start-Job cmdlet. For information about support for this parameter, see the help topic for 
the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Hashtable`),
        new Parameter(`Force`, `Indicates that this cmdlet deletes a job even if the status is Running. By default, this cmdlet does not delete running jobs.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies an array of IDs of background jobs that this cmdlet deletes.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and type than the instance ID, 
but it is unique only in the current session. You can type one or more IDs, separated by commas. To find the ID of a job, type 
"Get-Job".`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies an array of instance IDs of jobs that this cmdlet deletes.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use the Get-Job cmdlet 
or display the job object.`, `Guid[]`),
        new Parameter(`Job`, `Specifies the jobs to be deleted. Enter a variable that contains the jobs or a command that gets the jobs. You can also use a 
pipeline operator to submit jobs to this cmdlet.`, `Job[]`),
        new Parameter(`Name`, `Specifies an array of friendly names of jobs that this cmdlet deletes. Wildcard characters are permitted.


Because the friendly name is not guaranteed to be unique, even in the session, use the WhatIf and Confirm parameters when you delete 
jobs by name.`, `String[]`),
        new Parameter(`State`, `Specifies the state of jobs to delete. The acceptable values for this parameter are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Disconnected


- Suspending


- Stopping


- Suspended




To delete jobs with a state of Running, use the Force parameter.`, `JobState`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes a Windows PowerShell background job.`, `Remove-Job [-Command <String[]>] [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-Job [-Filter] <Hashtable> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-Id] <Int32[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-Job] <Job[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-Name] <String[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-InstanceId] <Guid[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping 
| AtBreakpoint} [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-JobTrigger`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-LocalGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-LocalGroupMember`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-LocalUser`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-Module`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Indicates that this cmdlet removes read-only modules. By default, Remove-Module removes only read-write modules.


The ReadOnly and ReadWrite values are stored in AccessMode property of a module.`, `SwitchParameter`),
        new Parameter(`FullyQualifiedName`, `Specifies the fully qualified names of modules to remove.`, `ModuleSpecification[]`),
        new Parameter(`ModuleInfo`, `Specifies the module objects to remove. Enter a variable that contains a module object ( PSModuleInfo ) or a command that gets a 
module object, such as a Get-Module command. You can also pipe module objects to Remove-Module .`, `PSModuleInfo[]`),
        new Parameter(`Name`, `Specifies the names of modules to remove. Wildcard characters are permitted. You can also pipe name strings to Remove-Module .`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Removes modules from the current session.`, `Remove-Module [-FullyQualifiedName] <ModuleSpecification[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Module [-ModuleInfo] <PSModuleInfo[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Module [-Name] <String[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PmemDisk`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PSBreakpoint`, [
        new Parameter(`Breakpoint`, `Specifies the breakpoints to delete. Enter a variable that contains breakpoint objects or a command that gets breakpoint objects, 
such as a Get-PSBreakpoint command. You can also pipe breakpoint objects to Remove-PSBreakpoint .`, `Breakpoint[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies breakpoint IDs for which this cmdlet deletes breakpoints.`, `Int32[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes breakpoints from the current console.`, `Remove-PSBreakpoint [-Breakpoint] <Breakpoint[]> [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-PSBreakpoint [-Id] <Int32[]> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PSDrive`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Removes the current Windows PowerShell drive.`, `SwitchParameter`),
        new Parameter(`LiteralName`, `Specifies the name of the drive.


The value of LiteralName is used exactly as typed. No characters are interpreted as wildcard characters. If the name includes escape 
characters, enclose it in single quotation marks. Single quotation marks instruct Windows PowerShell not to interpret any characters 
as escape sequences.`, `String[]`),
        new Parameter(`Name`, `Specifies the names of the drives to remove. Do not type a colon (:) after the drive name.`, `String[]`),
        new Parameter(`PSProvider`, `Specifies an array of PSProvider objects. This cmdlet removes and disconnects all of the drives associated with the specified Windows 
PowerShell provider.`, `String[]`),
        new Parameter(`Scope`, `Specifies an index that identifies the scope from which the drive is being removed.`, `String`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes temporary Windows PowerShell drives and disconnects mapped network drives.`, `Remove-PSDrive [-LiteralName] <String[]> [-Confirm] [-Force] [-PSProvider <String[]>] [-Scope <String>] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]

Remove-PSDrive [-Name] <String[]> [-Confirm] [-Force] [-PSProvider <String[]>] [-Scope <String>] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PSReadLineKeyHandler`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PSSession`, [
        new Parameter(`ComputerName`, `Specifies an array of names of computers. This cmdlet closes the PSSessions that are connected to the specified computers. Wildcard 
characters are permitted.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more remote computers. To specify the local 
computer, type the computer name, localhost, or a dot (.).`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`ContainerId`, `Specifies an array of IDs of containers. This cmdlet starts an interactive session with each of the specified containers. To see the 
containers that are available to you, use the Get-Container cmdlet.`, `String[]`),
        new Parameter(`Id`, `Specifies an array of IDs of sessions. This cmdlet closes the PSSessions with the specified IDs. Type one or more IDs, separated by 
commas, or use the range operator (..) to specify a range of IDs.


An ID is an integer that uniquely identifies the PSSession in the current session. It is easier to remember and type than the 
InstanceId , but it is unique only in the current session. To find the ID of a PSSession , run the Get-PSSession cmdlet without 
parameters.`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies an array of instance IDs. This cmdlet closes the PSSessions that have the specified instance IDs.


The instance ID is a GUID that uniquely identifies a PSSession in the current session. The instance ID is unique, even when you have 
multiple sessions running on a single computer.


The instance ID is stored in the InstanceID property of the object that represents a PSSession . To find the InstanceID of the 
PSSessions in the current session, type "Get-PSSession | Format-Table Name, ComputerName, InstanceId".`, `Guid[]`),
        new Parameter(`Name`, `Specifies an array of friendly names of sessions. This cmdlet closes the PSSessions that have the specified friendly names. Wildcard 
characters are permitted.


Because the friendly name of a PSSession might not be unique, when you use the Name parameter, consider also using the WhatIf or 
Confirm parameter in the Remove-PSSession command.`, `String[]`),
        new Parameter(`Session`, `Specifies the session objects of the PSSessions to close. Enter a variable that contains the PSSessions or a command that creates or 
gets the PSSessions , such as a New-PSSession or Get-PSSession command. You can also pipe one or more session objects to 
Remove-PSSession .`, `PSSession[]`),
        new Parameter(`VMId`, `Specifies an array of ID of virtual machines. This cmdlet starts an interactive session with each of the specified virtual machines. 
To see the virtual machines that are available to you, use the following command:


"Get-VM | Select-Object -Property Name, ID"`, `Guid[]`),
        new Parameter(`VMName`, `Specifies an array of names of virtual machines. This cmdlet starts an interactive session with each of the specified virtual 
machines. To see the virtual machines that are available to you, use the Get-VM cmdlet.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Closes one or more Windows PowerShell sessions (PSSessions).`, `Remove-PSSession [-ComputerName] <String[]> [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -ContainerId <String[]> [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Id] <Int32[]> [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -InstanceId <Guid[]> [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -Name <String[]> [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Session] <PSSession[]> [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -VMId <Guid[]> [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -VMName <String[]> [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-PSSnapin`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies the names of Windows PowerShell snap-ins to remove from the current session. Wildcard characters (*) are permitted.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object that represents the snap-in. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Removes Windows PowerShell snap-ins from the current session.`, `Remove-PSSnapin [-Name] <String[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-TypeData`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies an array of files that this cmdlet deletes from the session extended type data. This parameter is required.


Enter the paths and file names of one or more Types.ps1xml files. Wildcards are not supported. If you omit the path, the default 
location is the current directory.`, `String[]`),
        new Parameter(`TypeData`, `Specifies the type data that this cmdlet deletes from the session. This parameter is required. Enter a variable that contains 
TypeData objects ( System.Management.Automation.Runspaces.TypeData ) or a command that gets TypeData objects, such as a Get-TypeData 
command. You can also pipe TypeData objects to Remove-TypeData .`, `TypeData`),
        new Parameter(`TypeName`, `Specifies the types that this cmdlet deletes all extended type data for. For For types in the System namespace, enter the short name. 
Otherwise, the full type name is required. Wildcards are not supported.


You can pipe type names to Remove-TypeData . When you pipe an object to Remove-TypeData , Remove-TypeData gets the type name of the 
object and removes all type data for the object type.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes extended types from the current session.`, `Remove-TypeData [-Confirm] -Path <String[]> [-WhatIf] [<CommonParameters>]

Remove-TypeData [-Confirm] -TypeData <TypeData> [-WhatIf] [<CommonParameters>]

Remove-TypeData [-TypeName] <String> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-Variable`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Exclude`, `Specifies an array of items that this cmdlet omits from the operation. The value of this parameter qualifies the Name parameter. 
Enter a name element or pattern, such as "s*". Wildcards are permitted.`, `String[]`),
        new Parameter(`Force`, `Indicates that the cmdlet removes a variable even if it is read-only. Even using the Force parameter, the cmdlet cannot remove a 
constant.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies an array of items that this cmdlet deletes in the operation. The value of this parameter qualifies the Name parameter. 
Enter a name element or pattern, such as s*. Wildcards are permitted.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the variable to be removed. The parameter name ( Name ) is optional.`, `String[]`),
        new Parameter(`Scope`, `Gets only the variables in the specified scope. The acceptable values for this parameter are:


- Global


- Local


- Script


- A number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent)




Local is the default. For more information, see about_Scopes.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes a variable and its value.`, `Remove-Variable [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] [-Scope <String>] [-WhatIf] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-WindowsCapability`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-WindowsDriver`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-WindowsPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-WmiObject`, [
        new Parameter(`AsJob`, `Indicates that this cmdlet run as a background job. Use this parameter to run commands that take a long time to finish.


New CIM cmdlets, introduced Windows PowerShell 3.0, perform the same tasks as the WMI cmdlets. The CIM cmdlets comply with 
WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets to use the same 
techniques to manage computers that run the Windows operating system and those running other operating systems. Instead of using 
Remove-WmiObject , consider using the Remove-CimInstancehttp://go.microsoft.com/fwlink/?LinkId=227964 cmdlet.


When you use the AsJob parameter, the command returns an object that represents the background job and then displays the command 
prompt. You can continue to work in the session while the job finishes. If Remove-WmiObject is used against a remote computer, the 
job is created on the local computer, and the results from remote computers are automatically returned to the local computer. To 
manage the job, use the cmdlets that contain the Job noun (the Job cmdlets). To get the job results, use the Receive-Job cmdlet.


To use this parameter for remote computers, the local and remote computers must be configured for remoting. Start Windows PowerShell 
by using the Run as administrator option. For more information, see about_Remote_Requirements.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
        new Parameter(`Authentication`, `Specifies the authentication level to use for the WMI connection. The acceptable values for this parameter are:


- -1: Unchanged.


- 0: Default.


- 1: None.


No authentication in performed.  - 2: Connect. Authentication is performed only when the client establishes a relationship with the 
application.  - 3: Call. Authentication is performed only at the start of each call when the application receives the request.  - 4: 
Packet. Authentication is performed on all the data that is received from the client.  - 5: PacketIntegrity. All the data that is 
transferred between the client and the application is authenticated and verified.  - 6: PacketPrivacy. The properties of the other 
authentication levels are used, and all the data is encrypted.`, `AuthenticationLevel`),
        new Parameter(`Authority`, `Specifies the authority to use to authenticate the WMI connection. You can specify standard NTLM or Kerberos authentication. To use 
NTLM, set the authority setting to ntlmdomain:<DomainName>, where <DomainName> identifies a valid NTLM domain name. To use Kerberos, 
specify kerberos:<DomainName>\<ServerName>. You cannot include the authority setting when you connect to the local computer.`, `String`),
        new Parameter(`Class`, `Specifies the name of a WMI class that this cmdlet deletes.`, `String`),
        new Parameter(`ComputerName`, `Specifies the name of the computer on which this cmdlet runs. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more computers. To specify the local computer, type 
the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your computer is not 
configured to run remote commands.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
        new Parameter(`EnableAllPrivileges`, `Indicates that this cmdlet enables all the permissions of the current user before the command it makes the WMI call.`, `SwitchParameter`),
        new Parameter(`Impersonation`, `Specifies the impersonation level to use. The acceptable values for this parameter are:


- 0: Default. Reads the local registry for the default impersonation level, which is usually set to 3: Impersonate. - 1: Anonymous. 
Hides the credentials of the caller.  - 2: Identify. Allows objects to query the credentials of the caller.  - 3: Impersonate. Allows 
objects to use the credentials of the caller.  - 4: Delegate. Allows objects to permit other objects to use the credentials of the 
caller.`, `ImpersonationLevel`),
        new Parameter(`InputObject`, `Specifies a ManagementObject object to use as input. When this parameter is used, all other parameters are ignored.`, `ManagementObject`),
        new Parameter(`Locale`, `Specifies the preferred locale for WMI objects. The Locale parameter is specified as an array in the MS_<LCID> format in the 
preferred order.`, `String`),
        new Parameter(`Namespace`, `Specifies the WMI repository namespace where the referenced WMI class is located when it is used with the Class parameter.`, `String`),
        new Parameter(`Path`, `Specifies the WMI object path of a WMI class, or specifies the WMI object path of an instance of a WMI class to delete.`, `String`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. This parameter is used together 
with the AsJob parameter. The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes an instance of an existing Windows Management Instrumentation (WMI) class.`, `Remove-WmiObject [-Class] <String> [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | 
PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace 
<String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] 
[-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] -Path <String> [-ThrottleLimit 
<Int32>] [-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] 
[-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] 
[-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] 
[-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] 
[-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] 
[-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] 
[-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Confirm] -InputObject <ManagementObject> [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Remove-WSManInstance`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-Computer`, [
        new Parameter(`ComputerName`, `Renames the specified remote computer. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer. To specify the local computer, type the 
computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Rename-Computer even if your 
computer is not configured to run remote commands.`, `String`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`DomainCredential`, `Specifies a user account that has permission to connect to the domain. Explicit credentials are required to rename a computer that is 
joined to a domain.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


To specify a user account that has permission to connect to the computer that is specified by the ComputerName parameter, use the 
LocalCredential parameter.`, `PSCredential`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
        new Parameter(`LocalCredential`, `Specifies a user account that has permission to connect to the computer specified by the ComputerName parameter. The default is the 
current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


To specify a user account that has permission to connect to the domain, use the DomainCredential parameter.`, `PSCredential`),
        new Parameter(`NewName`, `Specifies a new name for the computer. This parameter is required. The name cannot include control characters, leading or trailing 
spaces, or any of the following characters: / \\ [ ].`, `String`),
        new Parameter(`PassThru`, `Returns the results of the command. Otherwise, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Protocol`, `Specifies which protocol to use to rename the computer. The acceptable values for this parameter are: WSMan and DCOM. The default 
value is DCOM.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`Restart`, `Indicates that this cmdlet restarts the computer that was renamed. A restart is often required to make the change effective.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        new Parameter(`WsmanAuthentication`, `Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the WSMan protocol. The acceptable 
values for this parameter are:


- Basic


- CredSSP


- Default


- Digest


- Kerberos


- Negotiate




The default value is Default.


For more information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235230 (http://go.microsoft.com/fwlink/?LinkID=235230) in the Microsoft Developer 
Network (MSDN) library.


Caution: Credential Security Service Provider (CredSSP) authentication, in which the user credentials are passed to a remote computer 
to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a remote 
network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.

This parameter was introduced in Windows PowerShell 3.0.`, `String`),
    ], `Renames a computer.`, `Rename-Computer [-NewName] <String> [-ComputerName <String>] [-Confirm] [-DomainCredential <PSCredential>] [-Force] [-LocalCredential 
<PSCredential>] [-PassThru] [-Protocol {DCOM | WSMan}] [-Restart] [-WhatIf] [-WsmanAuthentication {Default | Basic | Negotiate | 
CredSSP | Digest | Kerberos}] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-Item`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Force`, `Forces the cmdlet to rename items that cannot otherwise be changed, such as hidden or read-only files or read-only aliases or 
variables. The cmdlet cannot change constant aliases or variables. Implementation varies from provider to provider. For more 
information, see about_Providers.


Even using the Force parameter, the cmdlet cannot override security restrictions.`, `SwitchParameter`),
        new Parameter(`LiteralPath`, `Specifies the path of the item to rename.


Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcard 
characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows 
PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`NewName`, `Specifies the new name of the item. Enter only a name, not a path and name. If you enter a path that differs from the path that is 
specified in the Path parameter, Rename-Item generates an error. To rename and move an item, use Move-Item .


You cannot use wildcard characters in the value of the NewName parameter. To specify a name for multiple files, use the Replace 
operator in a regular expression. For more information about the Replace operator, see about_Comparison_Operators.`, `String`),
        new Parameter(`PassThru`, `Returns an object that represents the item to the pipeline. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path of the item to rename.`, `String`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Renames an item in a Windows PowerShell provider namespace.`, `Rename-Item [-NewName] <String> [-Confirm] [-Credential <PSCredential>] [-Force] -LiteralPath <String> [-PassThru] [-UseTransaction] 
[-WhatIf] [<CommonParameters>]

Rename-Item [-Path] <String> [-NewName] <String> [-Confirm] [-Credential <PSCredential>] [-Force] [-PassThru] [-UseTransaction] 
[-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-ItemProperty`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies items that this cmdlet omits. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path parameter. The syntax of 
the filter, including the use of wildcard characters, depends on the provider. Filters are more efficient than other parameters, 
because the provider applies them when it retrieves the objects instead of having Windows PowerShell filter the objects after they 
are retrieved.`, `String`),
        new Parameter(`Force`, `Forces the cmdlet to rename a property of an object that cannot otherwise be accessed by the user. Implementation varies from 
provider to provider. For more information, see about_Providers.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies only those items upon which the cmdlet acts, excluding all others.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path of the item property. This cmdlet uses the value of the LiteralPath cmdlet exactly as it is typed. No characters are 
interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation 
marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`Name`, `Specifies the current name of the property to rename.`, `String`),
        new Parameter(`NewName`, `Specifies the new name for the property.`, `String`),
        new Parameter(`PassThru`, `Returns an object that represents the item property. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path of the item to rename.`, `String`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Renames a property of an item.`, `Rename-ItemProperty [-Name] <String> [-NewName] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] -LiteralPath <String> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Rename-ItemProperty [-Path] <String> [-Name] <String> [-NewName] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-LocalGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Rename-LocalUser`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Repair-AppvClientConnectionGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Repair-AppvClientPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Repair-UevTemplateIndex`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Repair-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Reset-ComputerMachinePassword`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
        new Parameter(`Server`, `Specifies the name of a domain controller to use when this cmdlet sets the computer account password.


This parameter is optional. If you omit this parameter, a domain controller is chosen to service the command.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Resets the machine account password for the computer.`, `Reset-ComputerMachinePassword [-Confirm] [-Credential <PSCredential>] [-Server <String>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resolve-DnsName`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resolve-Path`, [
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`LiteralPath`, `Specifies the path to be resolved. The value of the LiteralPath parameter is used exactly as it is typed. No characters are 
interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation 
marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the Windows PowerShell path to resolve. This parameter is required. You can also pipe a path string to Resolve-Path .`, `String[]`),
        new Parameter(`Relative`, `Indicates that this cmdlet returns a relative path.`, `SwitchParameter`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Resolves the wildcard characters in a path, and displays the path contents.`, `Resolve-Path [-Credential <PSCredential>] -LiteralPath <String[]> [-Relative] [-UseTransaction] [<CommonParameters>]

Resolve-Path [-Path] <String[]> [-Credential <PSCredential>] [-Relative] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restart-Computer`, [
        new Parameter(`AsJob`, `Indicates that this cmdlet runs as a background job.


To use this parameter, the local and remote computers must be configured for remoting and, on Windows Vista and later versions of the 
Windows operating system, you must open Windows PowerShell by using the Run as administrator option. For more information, see 
about_Remote_Requirements (http://go.microsoft.com/fwlink/?LinkID=135187).


When you specify the AsJob parameter, the command immediately returns an object that represents the background job. You can continue 
to work in the session while the job finishes. The job is created on the local computer and the results from remote computers are 
automatically returned to the local computer. To manage the job, use the Job cmdlets. To get the job results, use the Receive-Job 
cmdlet.


For more information about Windows PowerShell background jobs, see about_Jobs (http://go.microsoft.com/fwlink/?LinkID=113251) and 
about_Remote_Jobs (http://go.microsoft.com/fwlink/?LinkID=135184).`, `SwitchParameter`),
        new Parameter(`ComputerName`, `Specifies one or more computers. The default is the local computer.


Type the NETBIOS name, an IP address, or a fully qualified domain name of a remote computer. To specify the local computer, type the 
computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your computer is not 
configured to run remote commands.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet.`, `PSCredential`),
        new Parameter(`DcomAuthentication`, `Specifies the authentication level that is used for the WMI connection. The acceptable values for this parameter are:


- Call. Call-level COM authentication  - Connect. Connect-level COM authentication - Default. Windows Authentication - None. No COM 
authentication - Packet. Packet-level COM authentication  - PacketIntegrity. Packet Integrity-level COM authentication - 
PacketPrivacy. Packet Privacy-level COM authentication  - Unchanged. The authentication level is the same as the previous command


The default value is Packet.


For more information about the values of this parameter, see AuthenticationLevel 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235229 (http://go.microsoft.com/fwlink/?LinkID=235229) in the Microsoft Developer 
Network (MSDN) library.


This parameter was introduced in Windows PowerShell 3.0.`, `AuthenticationLevel`),
        new Parameter(`Delay`, `Determines how often, in seconds, Windows PowerShell queries the service that is specified by the For parameter to determine whether 
it is available after the computer is restarted. Specify a delay between queries, in seconds. The default value is 5 seconds.


This parameter is valid only together with the Wait and For parameters.


This parameter was introduced in Windows PowerShell 3.0.`, `Int16`),
        new Parameter(`For`, `Specifies the behavior of Windows PowerShell as it waits for the specified service or feature to become available after the computer 
restarts. This parameter is valid only with the Wait parameter.


The acceptable values for this parameter are:


- Default. Waits for Windows PowerShell to restart.  - PowerShell. Can run commands in a Windows PowerShell remote session on the 
computer.  - WMI. Receives a reply to a Win32_ComputerSystem query for the computer.  - WinRM. Can establish a remote session to the 
computer by using WS-Management.


This parameter was introduced in Windows PowerShell 3.0.`, `WaitForServiceTypes`),
        new Parameter(`Force`, `Forces an immediate restart of the computers.`, `SwitchParameter`),
        new Parameter(`Impersonation`, `Specifies the impersonation level that this cmdlet uses to call WMI. Restart-Computer uses WMI. The acceptable values for this 
parameter are:


-- Default. Default impersonation.  - Anonymous. Hides the identity of the caller.  - Identify. Allows objects to query the 
credentials of the caller.  - Impersonate. Allows objects to use the credentials of the caller.


The default value is Impersonate.`, `ImpersonationLevel`),
        new Parameter(`Protocol`, `Specifies which protocol to use to restart the computers. The acceptable values for this parameter are: WSMan and DCOM. The default 
value is DCOM.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this parameter or 
enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`Timeout`, `Specifies the duration of the wait, in seconds. When the time-out elapses, Restart-Computer returns the command prompt, even if the 
computers are not restarted. The default value, -1, represents an indefinite time-out.


The Timeout parameter is valid only with the Wait parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
        new Parameter(`Wait`, `Indicates that this cmdlet suppresses the Windows PowerShell prompt and blocks the pipeline until all of the computers have 
restarted. You can use this parameter in a script to restart computers and then continue to process when the restart is finished.


By default, Wait waits indefinitely for the computers to restart, but you can use Timeout to adjust the timing and the For and Delay 
parameters to wait for particular services to be available on the restarted computers.


The Wait parameter is not valid when you are restarting the local computer. If the value of the ComputerName parameter contains the 
names of remote computers and the local computer, Restart-Computer generates a non-terminating error for Wait on the local computer, 
but it waits for the remote computers to restart.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        new Parameter(`WsmanAuthentication`, `Specifies the mechanism that is used to authenticate the user credentials when you use the WSMan protocol.


The acceptable values for this parameter are: Basic, CredSSP, Default, Digest, Kerberos, and Negotiate. The default value is Default. 
For more information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235230 (http://go.microsoft.com/fwlink/?LinkID=235230) in the MSDN library.


Caution: Credential Security Service Provider (CredSSP) authentication, in which the user credentials are passed to a remote computer 
to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a remote 
network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
    ], `Restarts ("reboots") the operating system on local and remote computers.`, `Restart-Computer [[-ComputerName] <String[]>] [[-Credential] <PSCredential>] [-AsJob] [-Confirm] [-DcomAuthentication {Default | None 
| Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Force] [-Impersonation {Default | Anonymous | Identify | 
Impersonate | Delegate}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Restart-Computer [[-ComputerName] <String[]>] [[-Credential] <PSCredential>] [-Confirm] [-DcomAuthentication {Default | None | 
Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Delay <Int16>] [-For {Wmi | WinRM | PowerShell}] [-Force] 
[-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Protocol {DCOM | WSMan}] [-Timeout <Int32>] [-Wait] 
[-WhatIf] [-WsmanAuthentication {Default | Basic | Negotiate | CredSSP | Digest | Kerberos}] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restart-Service`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`DisplayName`, `Specifies the display names of services to restarted. Wildcard carachters are permitted.`, `String[]`),
        new Parameter(`Exclude`, `Specifies services that this cmdlet omits. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, 
such as s*. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Force`, `Restarts a service that has dependent services.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies services that this cmdlet restarts. The value of this parameter qualifies the Name parameter. Enter a name element or 
pattern, such as s*. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`InputObject`, `Specifies ServiceController objects that represent the services to restart. Enter a variable that contains the objects, or type a 
command or expression that gets the objects.`, `ServiceController[]`),
        new Parameter(`Name`, `Specifies the service names of the services to restart.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object that represents the service. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Stops and then starts one or more services.`, `Restart-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Force] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Restart-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] [-PassThru] 
[-WhatIf] [<CommonParameters>]

Restart-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restore-Computer`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`RestorePoint`, `Specifies the sequence number of the restore point.  To find the sequence number, use the Get-ComputerRestorePoint cmdlet. This 
parameter is required.`, `Int32`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Starts a system restore on the local computer.`, `Restore-Computer [-RestorePoint] <Int32> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restore-UevBackup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Restore-UevUserSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resume-BitsTransfer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resume-Job`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet resumes jobs that satisfy all of the conditions in the hash table. Enter a hash 
table where the keys are job properties and the values are job property values.`, `Hashtable`),
        new Parameter(`Id`, `Specifies an array of IDs for jobs that this cmdlet resumes.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and to type than the instance 
ID, but it is unique only in the current session. You can type one or more IDs, separated by commas. To find the ID of a job, run 
Get-Job .`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies an array of instance IDs of jobs that this cmdlet resumes. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, run Get-Job .`, `Guid[]`),
        new Parameter(`Job`, `Specifies the jobs to be resumed. Enter a variable that contains the jobs or a command that gets the jobs. You can also pipe jobs to 
the Resume-Job cmdlet.`, `Job[]`),
        new Parameter(`Name`, `Specifies an array of friendly names of jobs that this cmdlet resumes. Enter one or more job names. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`State`, `Specifies the state of jobs to resume. The acceptable values for this parameter are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




This cmdlet resumes only jobs in the Suspended state.

For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx) in the Microsoft 
Developer Network (MSDN) library.`, `JobState`),
        new Parameter(`Wait`, `Indicates that this cmdlet suppresses the command prompt until all job results are restarted. By default, this cmdlet immediately 
returns the available results.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Restarts a suspended job.`, `Resume-Job [-Filter] <Hashtable> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-Id] <Int32[]> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-InstanceId] <Guid[]> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-Job] <Job[]> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-Name] <String[]> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping 
| AtBreakpoint} [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resume-ProvisioningSession`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Resume-Service`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`DisplayName`, `Specifies the display names of the services to be resumed. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Exclude`, `Specifies services that this cmdlet omits. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, 
such as s*. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Include`, `Specifies services to resume. The value of this parameter qualifies Name parameter. Enter a name element or pattern, such as s*. 
Wildcard characters are permitted.`, `String[]`),
        new Parameter(`InputObject`, `Specifies ServiceController objects that represent the services to resumed. Enter a variable that contains the objects, or type a 
command or expression that gets the objects.`, `ServiceController[]`),
        new Parameter(`Name`, `Specifies the service names of the services to be resumed.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object that represents the service. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Resumes one or more suspended (paused) services.`, `Resume-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Resume-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Resume-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Save-Help`, [
        new Parameter(`Credential`, `Specifies a user credential. This cmdlet runs the command by using credentials of a user who has permission to access the file system 
location specified by the DestinationPath parameter. This parameter is valid only when the DestinationPath or LiteralPath parameter 
is used in the command.


This parameter enables you to run Save-Help commands that use the DestinationPath parameter on remote computers. By providing 
explicit credentials, you can run the command on a remote computer and access a file share on a third computer without encountering 
an access denied error or using CredSSP authentication to delegate credentials.`, `PSCredential`),
        new Parameter(`DestinationPath`, `Specifies the path of the folder in which the help files are saved. Do not specify a file name or file name extension.`, `String[]`),
        new Parameter(`Force`, `Indicates that this cmdlet does not follow the once-per-day limitation, skips version checking, and downloads files that exceed the 1 
GB limit.


Without this parameter, only one Save-Help command for each module is permitted in each 24-hour period, downloads are limited to 1 GB 
of uncompressed content per module, and help files for a module are installed only when they are newer than the files on the computer.


The once-per-day limit protects the servers that host the help files, and makes it practical for you to add a Save-Help command to 
your Windows PowerShell profile.


To save help for a module in multiple UI cultures without the Force parameter, include all UI cultures in the same command, such as: 
"Save-Help -Module PSScheduledJobs -UICulture en-US, fr-FR, pt-BR"`, `SwitchParameter`),
        new Parameter(`FullyQualifiedModule`, `Specifies modules with names that are specified in the form of ModuleSpecification objects. This is described in the Remarks section 
of Module Specification Constructor (Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx 
(http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx) on the Microsoft Developer Network (MSDN). For example, 
the FullyQualifiedModule parameter accepts a module name that is specified in the format @{ModuleName = "modulename"; ModuleVersion = 
"version_number"} or @{ModuleName = "modulename"; ModuleVersion = "version_number"; Guid = "GUID"}. ModuleName and ModuleVersion are 
required, but Guid is optional.


You cannot specify the FullyQualifiedModule parameter in the same command as a Module parameter.`, `ModuleSpecification[]`),
        new Parameter(`LiteralPath`, `Specifies a path of the destination folder. Unlike the value of the DestinationPath parameter, the value of the LiteralPath parameter 
is used exactly as it is typed. No characters are interpreted as wildcard characters. If the path includes escape characters, enclose 
it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Module`, `Specifies modules for which this cmdlet downloads help. Enter one or more module names or name patters in a comma-separated list or 
in a file that has one module name on each line. Wildcard characters are permitted. You can also pipe module objects from the 
Get-Module cmdlet to Save-Help .


By default, Save-Help downloads help for all modules that support Updatable Help and are installed on the local computer in a 
location listed in the PSModulePath environment variable.


To save help for modules that are not installed on the computer, run a Get-Module command on a remote computer. Then pipe the 
resulting module objects to the Save-Help cmdlet or submit the module objects as the value of the Module or InputObject parameters.


If the module that you specify is installed on the computer, you can enter the module name or a module object. If the module is not 
installed on the computer, you must enter a module object, such as one returned by the Get-Module cmdlet.


The Module parameter of the Save-Help cmdlet does not accept the full path of a module file or module manifest file. To save help for 
a module that is not in a PSModulePath location, import the module into the current session before you run the Save-Help command.


A value of "*" (all) attempts to update help for all modules that are installed on the computer. This includes modules that do not 
support Updatable Help. This value might generate errors when the command encounters modules that do not support Updatable Help.`, `PSModuleInfo[]`),
        new Parameter(`UICulture`, `Specifies UI culture values for which this cmdlet gets updated help files. Enter one or more language codes, such as es-ES, a 
variable that contains culture objects, or a command that gets culture objects, such as a Get-Culture or Get-UICulture command.


Wildcard characters are not permitted. Do not specify a partial language code, such as "de".


By default, Save-Help gets help files in the UI culture set for Windows or its fallback culture. If you specify the UICulture 
parameter, Save-Help looks for help only for the specified UI culture, not in any fallback culture.`, `CultureInfo[]`),
        new Parameter(`UseDefaultCredentials`, `Indicates that this cmdlet runs the command, including the web download, with the credentials of the current user. By default, the 
command runs without explicit credentials.


This parameter is effective only when the web download uses NTLM, negotiate, or Kerberos-based authentication.`, `SwitchParameter`),
    ], `Downloads and saves the newest help files to a file system directory.`, `Save-Help [-DestinationPath] <String[]> [[-Module] <PSModuleInfo[]>] [[-UICulture] <CultureInfo[]>] [-Credential <PSCredential>] 
[-Force] [-FullyQualifiedModule <ModuleSpecification[]>] [-UseDefaultCredentials] [<CommonParameters>]

Save-Help [[-Module] <PSModuleInfo[]>] [[-UICulture] <CultureInfo[]>] [-Credential <PSCredential>] [-Force] [-FullyQualifiedModule 
<ModuleSpecification[]>] -LiteralPath <String[]> [-UseDefaultCredentials] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Save-Package`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Save-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Select-Object`, [
        new Parameter(`ExcludeProperty`, `Specifies the properties that this cmdlet excludes from the operation. Wildcards are permitted. This parameter is effective only when 
the command also includes the Property parameter.`, `String[]`),
        new Parameter(`ExpandProperty`, `Specifies a property to select, and indicates that an attempt should be made to expand that property. Wildcards are permitted in the 
property name.


For example, if the specified property is an array, each value of the array is included in the output. If the property contains an 
object, the properties of that object are displayed in the output.`, `String`),
        new Parameter(`First`, `Gets only the specified number of objects. Enter the number of objects to get.`, `Int32`),
        new Parameter(`Index`, `Specifies an array of objects based on their index values. Enter the indexes in a comma-separated list.


Indexes in an array begin with 0, where 0 represents the first value and (n-1) represents the last value.`, `Int32[]`),
        new Parameter(`InputObject`, `Specifies objects to send to the cmdlet through the pipeline. This parameter enables you to pipe objects to Select-Object .


When you use the InputObject parameter with Select-Object , instead of piping command results to Select-Object , the InputObject 
value-even if the value is a collection that is the result of a command, such as "-InputObject (Get-Process)"-is treated as a single 
object. Because InputObject cannot return individual properties from an array or collection of objects, it is recommended that if you 
use Select-Object to filter a collection of objects for those objects that have specific values in defined properties, you use 
Select-Object in the pipeline, as shown in the examples in this topic.`, `PSObject`),
        new Parameter(`Last`, `Specifies the number of objects to select from the end of an array of input objects.`, `Int32`),
        new Parameter(`Property`, `Specifies the properties to select. Wildcards are permitted.


The value of the Property parameter can be a new calculated property. To create a calculated, property, use a hash table. Valid keys 
are:


- Name (or Label) <string>


- Expression <string> or <script block>`, `Object[]`),
        new Parameter(`Skip`, `Ignores the specified number of objects and then gets the remaining objects. Enter the number of objects to skip.`, `Int32`),
        new Parameter(`SkipLast`, `@{Text=}`, `Int32`),
        new Parameter(`Unique`, `Specifies that if a subset of the input objects has identical properties and values, only a single member of the subset will be 
selected.


This parameter is case-sensitive. As a result, strings that differ only in character casing are considered to be unique.`, `SwitchParameter`),
        new Parameter(`Wait`, `Indicates that the cmdlet turns off optimization.Windows PowerShell runs commands in the order that they appear in the command 
pipeline and lets them generate all objects. By default, if you include a Select-Object command with the First or Index parameters in 
a command pipeline, Windows PowerShell stops the command that generates the objects as soon as the selected number of objects is 
generated.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
    ], `Selects objects or object properties.`, `Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-First <Int32>] [-InputObject 
<PSObject>] [-Last <Int32>] [-Skip <Int32>] [-Unique] [-Wait] [<CommonParameters>]

Select-Object [[-Property] <Object[]>] [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-InputObject <PSObject>] [-SkipLast 
<Int32>] [-Unique] [<CommonParameters>]

Select-Object [-Index <Int32[]>] [-InputObject <PSObject>] [-Unique] [-Wait] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Select-String`, [
        new Parameter(`AllMatches`, `Indicates that the cmdlet searches for more than one match in each line of text. Without this parameter, Select-String finds only the 
first match in each line of text.


When Select-String finds more than one match in a line of text, it still emits only one MatchInfo object for the line, but the 
Matches property of the object contains all of the matches.`, `SwitchParameter`),
        new Parameter(`CaseSensitive`, `Indicates that the cmdlet makes matches case-sensitive. By default, matches are not case-sensitive.`, `SwitchParameter`),
        new Parameter(`Context`, `Captures the specified number of lines before and after the line with the match. This allows you to view the match in context.


If you enter one number as the value of this parameter, that number determines the number of lines captured before and after the 
match. If you enter two numbers as the value, the first number determines the number of lines before the match and the second number 
determines the number of lines after the match.


In the default display, lines with a match are indicated by a right angle bracket (ASCII 62) in the first column of the display. 
Unmarked lines are the context.


This parameter does not change the number of objects generated by Select-String . Select-String generates one MatchInfo ( 
Microsoft.PowerShell.Commands.MatchInfo ) object for each match. The context is stored as an array of strings in the Context property 
of the object.


When you pipe the output of a Select-String command to another Select-String command, the receiving command searches only the text in 
the matched line (the value of the Line property of the MatchInfo object), not the text in the context lines. As a result, the 
Context parameter is not valid on the receiving Select-String command.


When the context includes a match, the MatchInfo object for each match includes all of the context lines, but the overlapping lines 
appear only once in the display.`, `Int32[]`),
        new Parameter(`Encoding`, `Specifies the character encoding that Select-String should assume when searching the file. The default is UTF8.


The acceptable values for this parameter are:


- Unicode


- UTF7


- UTF8


- UTF32


- ASCII


- BigEndianUnicode


- Default


- OEM




Default is the encoding of the system's current ANSI code page. OEM is the current original equipment manufacturer code page 
identifier for the operating system.`, `String`),
        new Parameter(`Exclude`, `Exclude the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as 
*.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`Include`, `Specifies an array of items that the cmdlet excludes from the operation. The value of this parameter qualifies the Path parameter. 
Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
        new Parameter(`InputObject`, `Specifies the text to be searched. Enter a variable that contains the text, or type a command or expression that gets the text.


Using the InputObject parameter is not the same as piping strings to Select-String . The differences are as follows:


- When you pipe more than one string (a collection) to Select-String , Select-String searches for the specified text in each string 
and returns each string that contains the search text. - When you use the InputObject parameter to submit a collection of strings, 
Select-String treats the collection as a single combined string and returns the strings as a unit if it finds the search text in any 
string.`, `PSObject`),
        new Parameter(`List`, `Indicates that the cmdlet returns only the first match in each input file. By default, Select-String returns a MatchInfo object for 
each match it finds.`, `SwitchParameter`),
        new Parameter(`LiteralPath`, `Specifies the path to the files to be searched. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. 
No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`NotMatch`, `Indicates that the cmdlet finds text that does not match the specified pattern.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path to the files to search. Wildcards are permitted. The default location is the local directory.


Specify files in the directory, such as log1.txt, .doc, or .*. If you specify only a directory, the command fails.`, `String[]`),
        new Parameter(`Pattern`, `Specifies the text to find. Type a string or regular expression. If you type a string, use the SimpleMatch parameter.


To learn about regular expressions, see about_Regular_Expressions.`, `String[]`),
        new Parameter(`Quiet`, `Indicates that the cmdlet returns a Boolean value (True or False), instead of a MatchInfo object. The value is True if the pattern is 
found; otherwise, the value is False.`, `SwitchParameter`),
        new Parameter(`SimpleMatch`, `Indicates that the cmdlet uses a simple match rather than a regular expression match. In a simple match, Select-String searches the 
input for the text in the Pattern parameter. It does not interpret the value of the Pattern parameter as a regular expression 
statement.`, `SwitchParameter`),
    ], `Finds text in strings and files.`, `Select-String [-Pattern] <String[]> [-AllMatches] [-CaseSensitive] [-Context <Int32[]>] [-Encoding {unicode | utf7 | utf8 | utf32 | 
ascii | bigendianunicode | default | oem}] [-Exclude <String[]>] [-Include <String[]>] -InputObject <PSObject> [-List] [-NotMatch] 
[-Quiet] [-SimpleMatch] [<CommonParameters>]

Select-String [-Pattern] <String[]> [-AllMatches] [-CaseSensitive] [-Context <Int32[]>] [-Encoding {unicode | utf7 | utf8 | utf32 | 
ascii | bigendianunicode | default | oem}] [-Exclude <String[]>] [-Include <String[]>] [-List] -LiteralPath <String[]> [-NotMatch] 
[-Quiet] [-SimpleMatch] [<CommonParameters>]

Select-String [-Pattern] <String[]> [-Path] <String[]> [-AllMatches] [-CaseSensitive] [-Context <Int32[]>] [-Encoding {unicode | utf7 
| utf8 | utf32 | ascii | bigendianunicode | default | oem}] [-Exclude <String[]>] [-Include <String[]>] [-List] [-NotMatch] [-Quiet] 
[-SimpleMatch] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Select-Xml`, [
        new Parameter(`Content`, `Specifies a string that contains the XML to search. You can also pipe strings to Select-Xml .`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the paths and file names of the XML files to search. Unlike Path , the value of the LiteralPath parameter is used exactly 
as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation 
marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Namespace`, `Specifies a hash table of the namespaces used in the XML. Use the format @{<namespaceName> = <namespaceValue>}.


When the XML uses the default namespace, which begins with xmlns, use an arbitrary key for the namespace name. You cannot use xmlns. 
In the XPath statement, prefix each node name with the namespace name and a colon, such as //namespaceName:Node.`, `Hashtable`),
        new Parameter(`Path`, `Specifies the path and file names of the XML files to search. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`XPath`, `Specifies an XPath search query. The query language is case-sensitive. This parameter is required.`, `String`),
        new Parameter(`Xml`, `Specifies one or more XML nodes.


An XML document will be processed as a collection of XML nodes. If you pipe an XML document to Select-Xml , each document node will 
be searched separately as it comes through the pipeline.`, `XmlNode[]`),
    ], `Finds text in an XML string or document.`, `Select-Xml [-XPath] <String> -Content <String[]> [-Namespace <Hashtable>] [<CommonParameters>]

Select-Xml [-XPath] <String> -LiteralPath <String[]> [-Namespace <Hashtable>] [<CommonParameters>]

Select-Xml [-XPath] <String> [-Path] <String[]> [-Namespace <Hashtable>] [<CommonParameters>]

Select-Xml [-XPath] <String> [-Xml] <XmlNode[]> [-Namespace <Hashtable>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Send-AppvClientReport`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Send-DtcDiagnosticTransaction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Send-MailMessage`, [
        new Parameter(`Attachments`, `Specifies the path and file names of files to be attached to the email message. You can use this parameter or pipe the paths and file 
names to Send-MailMessage .`, `String[]`),
        new Parameter(`Bcc`, `Specifies the email addresses that receive a copy of the mail but are not listed as recipients of the message. Enter names (optional) 
and the email address, such as Name <someone@example.com>.`, `String[]`),
        new Parameter(`Body`, `Specifies the body of the email message.`, `String`),
        new Parameter(`BodyAsHtml`, `Indicates that the value of the Body parameter contains HTML.`, `SwitchParameter`),
        new Parameter(`Cc`, `Specifies the email addresses to which a carbon copy (CC) of the email message is sent. Enter names (optional) and the email address, 
such as Name <someone@example.com>.`, `String[]`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01. Or, enter a PSCredential object, such as one from the Get-Credential cmdlet.`, `PSCredential`),
        new Parameter(`DeliveryNotificationOption`, `Specifies the delivery notification options for the email message. You can specify multiple values. None is the default value. The 
alias for this parameter is dno .


The delivery notifications are sent in an email message to the address specified in the value of the To parameter. The acceptable 
values for this parameter are:


- None. No notification. - OnSuccess. Notify if the delivery is successful. - OnFailure. Notify if the delivery is unsuccessful. - 
Delay. Notify if the delivery is delayed. - Never. Never notify.`, `DeliveryNotificationOptions`),
        new Parameter(`Encoding`, `Specifies the encoding used for the body and subject. The acceptable values for this parameter are:


- ASCII


- UTF8


- UTF7


- UTF32


- Unicode


- BigEndianUnicode


- Default


- OEM




ASCII is the default.`, `Encoding`),
        new Parameter(`From`, `Specifies the address from which the mail is sent. Enter a name (optional) and email address, such as Name <someone@example.com>. 
This parameter is required.`, `String`),
        new Parameter(`Port`, `Specifies an alternate port on the SMTP server. The default value is 25, which is the default SMTP port. This parameter is available 
in Windows PowerShell 3.0 and newer releases.`, `Int32`),
        new Parameter(`Priority`, `Specifies the priority of the email message. The acceptable values for this parameter are:


- Normal


- High


- Low




Normal is the default.`, `MailPriority`),
        new Parameter(`SmtpServer`, `Specifies the name of the SMTP server that sends the email message.


The default value is the value of the $PSEmailServer preference variable. If the preference variable is not set and this parameter is 
omitted, the command fails.`, `String`),
        new Parameter(`Subject`, `Specifies the subject of the email message. This parameter is required.`, `String`),
        new Parameter(`To`, `Specifies the addresses to which the mail is sent. Enter names (optional) and the email address, such as Name <someone@example.com>. 
This parameter is required.`, `String[]`),
        new Parameter(`UseSsl`, `Indicates that the cmdlet uses the Secure Sockets Layer (SSL) protocol to establish a connection to the remote computer to send mail. 
By default, SSL is not used.`, `SwitchParameter`),
    ], `Sends an email message.`, `Send-MailMessage [-To] <String[]> [-Subject] <String> [[-Body] <String>] [[-SmtpServer] <String>] [-Attachments <String[]>] [-Bcc 
<String[]>] [-BodyAsHtml] [-Cc <String[]>] [-Credential <PSCredential>] [-DeliveryNotificationOption {None | OnSuccess | OnFailure | 
Delay | Never}] [-Encoding <Encoding>] -From <String> [-Port <Int32>] [-Priority {Normal | Low | High}] [-UseSsl] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Acl`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Alias`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Description`, `Specifies a description of the alias. You can type any string. If the description includes spaces, enclose it quotation marks.`, `String`),
        new Parameter(`Force`, `Indicates that the cmdlet will set a read-only alias. Use the Option parameter to create a read-only alias. The Force parameter 
cannot set a constant alias.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies the new alias. You can use any alphanumeric characters in an alias, but the first character cannot be a number.`, `String`),
        new Parameter(`Option`, `Sets the value of the Options property of the alias. The acceptable values for this parameter are:


- None. Sets no options. (None is the default.) - ReadOnly. Can be deleted. Cannot be not changed, except by using the Force 
parameter. - Constant. Cannot be deleted or changed. - Private. The alias is available only in the current scope.  - AllScope. The 
alias is copied to any new scopes that are created.  - Unspecified.


To see the Options property of all aliases in the session, type "get-alias | format-table -property name, options -autosize".`, `ScopedItemOptions`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Scope`, `Specifies the scope in which this alias is valid. The acceptable values for this parameter are:


- Global


- Local


- Script


- A number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent).




Local is the default. For more information, see about_Scopes.`, `String`),
        new Parameter(`Value`, `Specifies the name of the cmdlet or command element that is being aliased.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates or changes an alias for a cmdlet or other command element in the current Windows PowerShell session.`, `Set-Alias [-Name] <String> [-Value] <String> [-Confirm] [-Description <String>] [-Force] [-Option {None | ReadOnly | Constant | 
Private | AllScope | Unspecified}] [-PassThru] [-Scope <String>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AppBackgroundTaskResourcePolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AppLockerPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AppvClientConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AppvClientMode`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AppvClientPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AppvPublishingServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AppxDefaultVolume`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AppXProvisionedDataFile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-AuthenticodeSignature`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-BitsTransfer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-CertificateAutoEnrollmentPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-CimInstance`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-CIPolicyIdInfo`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-CIPolicySetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-CIPolicyVersion`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Clipboard`, [
        new Parameter(`Append`, `Indicates that the cmdlet does not clear the clipboard and appends content to it.`, `SwitchParameter`),
        new Parameter(`AsHtml`, `Indicates that the cmdlet renders the content as HTML to the clipboard.`, `SwitchParameter`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`LiteralPath`, `Specifies the path to the item that is copied to the clipboard. Unlike Path , the value of LiteralPath is used exactly as it is 
typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the path to the item that is copied to the clipboard. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Value`, `Specifies, as a string array, the content to copy to the clipboard.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Sets the current Windows clipboard entry.`, `Set-Clipboard [-Append] [-AsHtml] [-Confirm] -LiteralPath <String[]> [-WhatIf] [<CommonParameters>]

Set-Clipboard [-Append] [-AsHtml] [-Confirm] -Path <String[]> [-WhatIf] [<CommonParameters>]

Set-Clipboard [-Value] <String[]> [-Append] [-AsHtml] [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Content`, [
        new Parameter(`Encoding`, `Specifies the file encoding. The default is ASCII.

Valid values are:

-- ASCII:  Uses the encoding for the ASCII (7-bit) character set.
-- BigEndianUnicode:  Encodes in UTF-16 format using the big-endian byte order.
-- Byte:   Encodes a set of characters into a sequence of bytes.
-- String:  Uses the encoding type for a string.
-- Unicode:  Encodes in UTF-16 format using the little-endian byte order.
-- UTF7:   Encodes in UTF-7 format.
-- UTF8:  Encodes in UTF-8 format.
-- Unknown:  The encoding type is unknown or invalid. The data can be treated as binary.

Encoding is a dynamic parameter that the FileSystem provider adds to the Set-Content cmdlet. This parameter works only in file system 
drives.`, `FileSystemCmdletProviderEncoding`),
        new Parameter(`Force`, `Replaces the contents of a file, even if the file is read-only. Without this parameter, read-only files are not changed.`, `SwitchParameter`),
        new Parameter(`Stream`, `Creates or replaces the content in the specified alternate data stream. If the stream does not yet exist, Set-Content creates it. 
Enter the stream name. Wildcards are not supported.

Stream is a dynamic parameter that the FileSystem provider adds to the Set-Content cmdlet. This parameter works only in file system 
drives.

You can use the Set-Content cmdlet to change the content of the Zone.Identifier alternate data stream. However, it is not the 
recommended way to eliminate security checks that block files that are downloaded from the Internet. If you verify that a downloaded 
file is safe, use the Unblock-File cmdlet.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
        new Parameter(`Confirm`, `Prompts you for confirmation before executing the command.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Describes what would happen if you executed the command without actually executing the command.`, `SwitchParameter`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see about_Transactions.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as *.txt. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path parameter. The syntax of 
the filter, including the use of wildcard characters, depends on the provider. Filters are more efficient than other parameters, 
because the provider applies them when it is retrieving the objects, instead of having Windows PowerShell filter the objects after 
they are retrieved.`, `String`),
        new Parameter(`Include`, `Specifies items that this cmdlet changes. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as *.txt. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies the path of the item that receives the content. Unlike Path , the value of the LiteralPath parameter is used exactly as it 
is typed. No characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`NoNewline`, `Indicates that this cmdlet uses the no newline setting.`, `SwitchParameter`),
        new Parameter(`PassThru`, `Returns an object that represents the content. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path of the item that receives the content. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Value`, `Specifies the new content for the item.`, `Object[]`),
    ], `Replaces the contents of a file with contents that you specify.`, `Set-Content [-Value] <Object[]> [-Confirm] [-Credential <PSCredential>] [-Encoding {Unknown | String | Unicode | Byte | 
BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>] [-Filter <String>] [-Force] 
[-Include <String[]>] -LiteralPath <String[]> [-NoNewline] [-PassThru] [-Stream <String>] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]

Set-Content [-Path] <String[]> [-Value] <Object[]> [-Confirm] [-Credential <PSCredential>] [-Encoding {Unknown | String | Unicode | 
Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] [-NoNewline] [-PassThru] [-Stream <String>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Set-Content [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem}] [-Force] 
[-Stream <string>] [-Confirm] [-WhatIf] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Culture`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Date`, [
        new Parameter(`Adjust`, `Specifies the value for which this cmdlet adds or subtracts from the current date and time. can type an adjustment in standard date 
and time format for your locale or use the Adjust parameter to pass a TimeSpan object from New-TimeSpan to Set-Date .`, `TimeSpan`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Date`, `Changes the date and time to the specified values. You can type a new date in the short date format and a time in the standard time 
format for your locale. Or, you can pass a DateTime object from Get-Date.


If you specify a date, but not a time, Set-Date changes the time to midnight on the specified date. If you specify only a time, it 
does not change the date.`, `DateTime`),
        new Parameter(`DisplayHint`, `Specifies which elements of the date and time are displayed.The acceptable values for this parameter are:


- Date. displays only the date. - Time. displays only the time. - DateTime. displays the date and time.


This parameter affects only the display. It does not affect the DateTime object that Get-Date retrieves.`, `DisplayHintType`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Changes the system time on the computer to a time that you specify.`, `Set-Date [-Adjust] <TimeSpan> [-Confirm] [-DisplayHint {Date | Time | DateTime}] [-WhatIf] [<CommonParameters>]

Set-Date [-Date] <DateTime> [-Confirm] [-DisplayHint {Date | Time | DateTime}] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DeliveryOptimizationStatus`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DODownloadMode`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DOPercentageMaxBackgroundBandwidth`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DOPercentageMaxForegroundBandwidth`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-DscLocalConfigurationManager`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-ExecutionPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-HVCIOptions`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Item`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts for a password.


This parameter is not supported by any providers installed with parameter is not supported by any providers installed with Windows 
PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as *.txt. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path parameter. The syntax of 
the filter, including the use of wildcard characters, depends on the provider. Filters are more efficient than other parameters, 
because the provider applies them when it retrieves the objects, instead of having Windows PowerShell filter the objects after they 
are retrieved.`, `String`),
        new Parameter(`Force`, `Forces the cmdlet to set items that cannot otherwise be changed, such as read-only alias or variables. The cmdlet cannot change 
constant aliases or variables. Implementation varies from provider to provider. For more information, see about_Providers. Even using 
the Force parameter, the cmdlet cannot override security restrictions.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies items that this cmdlet changes. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as *.txt. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`LiteralPath`, `Specifies a path of the location of the new items. Unlike Path , the value of LiteralPath is used exactly as it is typed. No 
characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`PassThru`, `Passes an object that represents the item to the pipeline. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies a path of the location of the new items. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`Value`, `Specifies a new value for the item.`, `Object`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Changes the value of an item to the value specified in the command.`, `Set-Item [[-Value] <Object>] [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Set-Item [-Path] <String[]> [[-Value] <Object>] [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-ItemProperty`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with parameter is not supported by any providers installed with Windows 
PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies those items upon which the cmdlet does not act, and includes all others.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path parameter. The syntax of 
the filter, including the use of wildcard characters, depends on the provider. Filters are more efficient than other parameters, 
because the provider applies them when it retrieves the objects instead of having Windows PowerShell filter the objects after they 
are retrieved.`, `String`),
        new Parameter(`Force`, `Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user. Implementation varies from provider to 
provider. For more information, see about_Providers.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies only those items upon which the cmdlet acts, which excludes all others.`, `String[]`),
        new Parameter(`InputObject`, `Specifies the object that has the properties that this cmdlet changes. Enter a variable that contains the object or a command that 
gets the object.`, `PSObject`),
        new Parameter(`LiteralPath`, `Specifies a path of the item property. The value of LiteralPath is used exactly as it is typed. No characters are interpreted as 
wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell 
Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Name`, `Specifies the name of the property.`, `String`),
        new Parameter(`PassThru`, `Returns an object that represents the item property. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the path of the items with the property to modify.`, `String[]`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
        new Parameter(`Value`, `Specifies the value of the property.`, `Object`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates or changes the value of a property of an item.`, `Set-ItemProperty [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] 
[-Include <String[]>] -InputObject <PSObject> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Set-ItemProperty [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] 
-InputObject <PSObject> -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Set-ItemProperty [-Name] <String> [-Value] <Object> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Set-ItemProperty [-Path] <String[]> [-Name] <String> [-Value] <Object> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] 
[-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-JobTrigger`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-KdsConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-LocalGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-LocalUser`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Location`, [
        new Parameter(`LiteralPath`, `Specifies a path of the location. The value of the LiteralPath parameter is used exactly as it is typed. No characters are 
interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation 
marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`PassThru`, `Returns a System.Management.Automation.PathInfo object that represents the location. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
        new Parameter(`Path`, `Specify the path of a new working location.`, `String`),
        new Parameter(`StackName`, `Specifies the location stack name that this cmdlet makes the current location stack. Enter a location stack name. To indicate the 
unnamed default location stack, type $Null" or an empty string ("").


The Location cmdlets act on the current stack unless you use the StackName parameter to specify a different stack.`, `String`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Sets the current working location to a specified location.`, `Set-Location -LiteralPath <String> [-PassThru] [-UseTransaction] [<CommonParameters>]

Set-Location [[-Path] <String>] [-PassThru] [-UseTransaction] [<CommonParameters>]

Set-Location [-PassThru] [-StackName <String>] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-NonRemovableAppsPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PackageSource`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-ProcessMitigation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PSBreakpoint`, [
        new Parameter(`Action`, `Specifies commands that run at each breakpoint instead of breaking. Enter a script block that contains the commands. You can use this 
parameter to set conditional breakpoints or to perform other tasks, such as testing or logging.


If this parameter is omitted, or no action is specified, execution stops at the breakpoint, and the debugger starts.


When the Action parameter is used, the Action script block runs at each breakpoint. Execution does not stop unless the script block 
includes the Break keyword. If you use the Continue keyword in the script block, execution resumes until the next breakpoint.


For more information, see about_Script_Blocks, about_Break, and about_Continue.`, `ScriptBlock`),
        new Parameter(`Column`, `Specifies the column number of the column in the script file on which execution stops. Enter only one column number. The default is 
column 1.


The Column value is used with the value of the Line parameter to specify the breakpoint. If the Line parameter specifies multiple 
lines, the Column parameter sets a breakpoint at the specified column on each of the specified lines. Windows PowerShell stops 
executing before the statement or expression that includes the character at the specified line and column position.


Columns are counted from the top left margin beginning with column number 1 (not 0). If you specify a column that does not exist in 
the script, an error is not declared, but the breakpoint is never executed.`, `Int32`),
        new Parameter(`Command`, `Sets a command breakpoint. Enter cmdlet names, such as Get-Process, or function names. Wildcards are permitted.


Execution stops just before each instance of each command is executed. If the command is a function, execution stops each time the 
function is called and at each BEGIN, PROCESS, and END section.`, `String[]`),
        new Parameter(`Line`, `Sets a line breakpoint in a script. Enter one or more line numbers, separated by commas. Windows PowerShell stops immediately before 
executing the statement that begins on each of the specified lines.


Lines are counted from the top left margin of the script file beginning with line number 1 (not 0). If you specify a blank line, 
execution stops before the next non-blank line. If the line is out of range, the breakpoint is never hit.`, `Int32[]`),
        new Parameter(`Mode`, `Specifies the mode of access that triggers variable breakpoints. The default is Write.


This parameter is valid only when the Variable parameter is used in the command. The mode applies to all breakpoints set in the 
command. The acceptable values for this parameter are:


- Write. Stops execution immediately before a new value is written to the variable. -  Read. Stops execution when the variable is 
read, that is, when its value is accessed, either to be assigned, displayed, or used. In read mode, execution does not stop when the 
value of the variable changes. -  ReadWrite. Stops execution when the variable is read or written.`, `VariableAccessMode`),
        new Parameter(`Script`, `Specifies an array of script files that this cmdlet sets a breakpoint in. Enter the paths and file names of one or more script files. 
If the files are in the current directory, you can omit the path. Wildcards are permitted.


By default, variable breakpoints and command breakpoints are set on any command that runs in the current session. This parameter is 
required only when setting a line breakpoint.`, `String[]`),
        new Parameter(`Variable`, `Specifies an array of variables that this cmdlet sets breakpoints on. Enter a comma-separated list of variables without dollar signs 
($).


Use the Mode parameter to determine the mode of access that triggers the breakpoints. The default mode, Write, stops execution just 
before a new value is written to the variable.`, `String[]`),
    ], `Sets a breakpoint on a line, command, or variable.`, `Set-PSBreakpoint [-Script] <String[]> [-Line] <Int32[]> [[-Column] <Int32>] [-Action <ScriptBlock>] [<CommonParameters>]

Set-PSBreakpoint [[-Script] <String[]>] [-Action <ScriptBlock>] -Command <String[]> [<CommonParameters>]

Set-PSBreakpoint [[-Script] <String[]>] [-Action <ScriptBlock>] [-Mode {Read | Write | ReadWrite}] -Variable <String[]> 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PSDebug`, [
        new Parameter(`Off`, `Indicates that this cmdlet turns off all script debugging features.


A "Set-StrictMode -Off" command disables the verification set by a "Set-PSDebug -Strict" command. For more information, see 
Set-StrictMode.`, `SwitchParameter`),
        new Parameter(`Step`, `Indicates that this cmdlet turns on script stepping. Before each line runs, Windows PowerShell prompts you to stop, continue, or 
enter a new interpreter level to inspect the state of the script.


Specifying the Step parameter automatically sets a trace level of 1.`, `SwitchParameter`),
        new Parameter(`Strict`, `Indicates that Windows PowerShell returns an exception if a variable is referenced before a value is assigned to the variable.


A "Set-StrictMode -Off" command disables the verification set by a "Set-PSDebug -Strict" command. For more information, see 
Set-StrictMode .`, `SwitchParameter`),
        new Parameter(`Trace`, `Specifies the trace level. The acceptable values for this parameter are:


- 1: Trace script lines as they run.


- 0: Turn script tracing off.


- 2: Trace script lines, variable assignments, function calls, and scripts.`, `Int32`),
    ], `Turns script debugging features on and off, sets the trace level, and toggles strict mode.`, `Set-PSDebug [-Off] [<CommonParameters>]

Set-PSDebug [-Step] [-Strict] [-Trace <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PSReadLineKeyHandler`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PSReadLineOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-PSSessionConfiguration`, [
        new Parameter(`AccessMode`, `Enables and disables the session configuration and determines whether it can be used for remote or local sessions on the computer. 
The acceptable values for this parameter are:


- Disabled. Disables the session configuration. It cannot be used for remote or local access to the computer. This value sets the 
Enabled property of the session configuration (WSMan:\<ComputerName>\\PlugIn\<SessionConfigurationName>\\Enabled) to False.  - Local. 
Adds a Network_Deny_All entry to security descriptor of the session configuration. Users of the local computer can use the session 
configuration to create a local loopback session on the same computer, but remote users are denied access.  - Remote. Removes 
Deny_All and Network_Deny_All entries from the security descriptors of the session configuration. Users of local and remote computers 
can use the session configuration to create sessions and run commands on this computer.


The default value is Remote.


Other cmdlets can override the value of this parameter later. For example, the Enable-PSRemoting cmdlet enables all session 
configurations on the computer and permits remote access to them, and the Disable-PSRemoting cmdlet permits only local access to all 
session configurations on the computer.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionConfigurationAccessMode`),
        new Parameter(`ApplicationBase`, `Specifies the path of the assembly file ( .dll) that is specified in the value of the AssemblyName* parameter.`, `String`),
        new Parameter(`AssemblyName`, `Specifies the assembly name. This cmdlet creates a session configuration based on a class that is defined in an assembly.


Enter the file name or full path of an assembly .dll file that defines a session configuration. If you enter only the file name, you 
can enter the path in the value of the ApplicationBase parameter.`, `String`),
        new Parameter(`ConfigurationTypeName`, `Specifies the type of the session configuration that is defined in the assembly in the AssemblyName parameter. The type that you 
specify must implement the System.Management.Automation.Remoting.PSSessionConfiguration class.


This parameter is required when you specify an assembly name.`, `String`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Suppresses all user prompts, and restarts the WinRM service without prompting. Restarting the service makes the configuration change 
effective.


To prevent a restart and suppress the restart prompt, use the NoServiceRestart parameter.`, `SwitchParameter`),
        new Parameter(`MaximumReceivedDataSizePerCommandMB`, `Specifies the limit on the amount of data that can be sent to this computer in any single remote command. Enter the data size in 
megabytes (MB). The default is 50 MB.


If a data size limit is defined in the configuration type that is specified in the ConfigurationTypeName parameter, the limit in the 
configuration type is used. The value of this parameter is ignored.`, `Double`),
        new Parameter(`MaximumReceivedObjectSizeMB`, `Specifies the limits on the amount of data that can be sent to this computer in any single object. Enter the data size in megabytes. 
The default is 10 MB.


If an object size limit is defined in the configuration type that is specified in the ConfigurationTypeName parameter, the limit in 
the configuration type is used. The value of this parameter is ignored.`, `Double`),
        new Parameter(`ModulesToImport`, `Specifies the modules and snap-ins that are automatically imported into sessions that use the session configuration. Enter the module 
and snap-in names.


By default, only the Microsoft.PowerShell.Core snap-in is imported into sessions, but unless the cmdlets are excluded, you can use 
the Import-Module and Add-PSSnapin cmdlets to add modules and snap-ins to the session.


The modules specified in this parameter value are imported in additions to modules specified in the session configuration file ( 
New-PSSessionConfigurationFile ). However, settings in the session configuration file can hide the commands exported by modules or 
prevent users from using them.


The modules specified in this parameter value replace the list of modules specified by using the ModulesToImport parameter of the 
Register-PSSessionConfiguration cmdlet.


This parameter was introduced in Windows PowerShell 3.0.`, `Object[]`),
        new Parameter(`Name`, `Specifies the name of the session configuration that you want to change.


You cannot use this parameter to change the name of the session configuration.`, `String`),
        new Parameter(`NoServiceRestart`, `Does not restart the WinRM service, and suppresses the prompt to restart the service.


By default, when you run Set-PSSessionConfiguration , you are prompted to restart the WinRM service to make the new session 
configuration effective. Until the WinRM service is restarted, the new session configuration is not effective.


To restart the WinRM service without prompting, use the Force parameter. To restart the WinRM service manually, use the 
Restart-Service cmdlet.`, `SwitchParameter`),
        new Parameter(`PSVersion`, `Specifies the version of Windows PowerShell in sessions that use this session configuration.


The value of this parameter takes precedence over the value of the PowerShellVersion key in the session configuration file.


This parameter was introduced in Windows PowerShell 3.0.`, `Version`),
        new Parameter(`Path`, `Specifies the path of a session configuration file (.pssc), such as one created by the New-PSSessionConfigurationFile cmdlet. If you 
omit the path, the default is the current directory.


For information about how to modify a session configuration file, see the help topic for the New-PSSessionConfigurationFile cmdlet.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`RunAsCredential`, `Specifies credentials for commands in the session. By default, commands run with the permissions of the current user.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
        new Parameter(`SecurityDescriptorSddl`, `Specifies a different Security Descriptor Definition Language (SDDL) string for the configuration.


This string determines the permissions that are required to use the new session configuration. To use a session configuration in a 
session, users must have at least Execute(Invoke) permission for the configuration.


To use the default security descriptor for the configuration, enter an empty string ("") or a value of $Null. The default is the root 
SDDL in the WSMan: drive.


If the security descriptor is complex, consider using the ShowSecurityDescriptorUI parameter instead of this one. You cannot use both 
parameters in the same command.`, `String`),
        new Parameter(`SessionTypeOption`, `Specifies type-specific options for the session configuration. Enter a session type options object, such as the 
PSWorkflowExecutionOption object that the New-PSWorkflowExecutionOption cmdlet returns.


The options of sessions that use the session configuration are determined by the values of session options and the session 
configuration options. Unless specified, options set in the session, such as by using the New-PSSessionOption cmdlet, take precedence 
over options set in the session configuration. However, session option values cannot exceed maximum values set in the session 
configuration.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionTypeOption`),
        new Parameter(`ShowSecurityDescriptorUI`, `Indicates that this cmdlet a property sheet that helps you create a new SDDL for the session configuration. The property sheet 
appears after you run the Set-PSSessionConfiguration command and then restart the WinRM service.


When you set permissions to the configuration, remember that users must have at least Execute(Invoke) permission to use the session 
configuration in a session.


You cannot use the SecurityDescriptorSDDL parameter and this parameter in the same command.`, `SwitchParameter`),
        new Parameter(`StartupScript`, `Specifies the startup script for the configuration. Enter the fully qualified path of a Windows PowerShell script. The specified 
script runs in the new session that uses the session configuration.


To delete a startup script from a session configuration, enter an empty string ("") or a value of $Null.


You can use a startup script to further configure the user session. If the script generates an error, even a non-terminating error, 
the session is not created and the New-PSSession command fails.`, `String`),
        new Parameter(`ThreadApartmentState`, `Specifies the apartment state setting for the threads in the session. The acceptable values for this parameter are: STA, MTA, and 
Unknown. The default value is Unknown.`, `ApartmentState`),
        new Parameter(`ThreadOptions`, `Specifies the thread options setting in the configuration. This setting defines how threads are created and used when a command is 
executed in the session. The acceptable values for this parameter are:


- Default
- ReuseThread


- UseCurrentThread


- UseNewThread




The default value is UseCurrentThread.

For more information, see "PSThreadOptions Enumeration" in the Microsoft Developer Network (MSDN) library.`, `PSThreadOptions`),
        new Parameter(`TransportOption`, `Specifies the transport options for the session configuration. Enter a transport options object, such as the WSManConfigurationOption 
object that the New-PSTransportOption cmdlet returns.


The options of sessions that use the session configuration are determined by the values of session options and the session 
configuration options. Unless specified, options set in the session, such as by using the New-PSSessionOption cmdlet, take precedence 
over options set in the session configuration. However, session option values cannot exceed maximum values set in the session 
configuration.


This parameter was introduced in Windows PowerShell 3.0.`, `PSTransportOption`),
        new Parameter(`UseSharedProcess`, `Use only one process to host all sessions that are started by the same user and use the same session configuration. By default, each 
session is hosted in its own process.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Changes the properties of a registered session configuration.`, `Set-PSSessionConfiguration [-Name] <String> [-AccessMode {Disabled | Local | Remote}] [-ApplicationBase <String>] [-Confirm] [-Force] 
[-MaximumReceivedDataSizePerCommandMB <Double>] [-MaximumReceivedObjectSizeMB <Double>] [-ModulesToImport <Object[]>] 
[-NoServiceRestart] [-PSVersion <Version>] [-RunAsCredential <PSCredential>] [-SecurityDescriptorSddl <String>] [-SessionTypeOption 
<PSSessionTypeOption>] [-ShowSecurityDescriptorUI] [-StartupScript <String>] [-ThreadApartmentState {STA | MTA | Unknown}] 
[-ThreadOptions {Default | UseNewThread | ReuseThread | UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] 
[-WhatIf] [<CommonParameters>]

Set-PSSessionConfiguration [-Name] <String> [-AssemblyName] <String> [-ConfigurationTypeName] <String> [-AccessMode {Disabled | Local 
| Remote}] [-ApplicationBase <String>] [-Confirm] [-Force] [-MaximumReceivedDataSizePerCommandMB <Double>] 
[-MaximumReceivedObjectSizeMB <Double>] [-ModulesToImport <Object[]>] [-NoServiceRestart] [-PSVersion <Version>] [-RunAsCredential 
<PSCredential>] [-SecurityDescriptorSddl <String>] [-SessionTypeOption <PSSessionTypeOption>] [-ShowSecurityDescriptorUI] 
[-StartupScript <String>] [-ThreadApartmentState {STA | MTA | Unknown}] [-ThreadOptions {Default | UseNewThread | ReuseThread | 
UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] [-WhatIf] [<CommonParameters>]

Set-PSSessionConfiguration [-Name] <String> [-AccessMode {Disabled | Local | Remote}] [-Confirm] [-Force] 
[-MaximumReceivedDataSizePerCommandMB <Double>] [-MaximumReceivedObjectSizeMB <Double>] [-NoServiceRestart] -Path <String> 
[-RunAsCredential <PSCredential>] [-SecurityDescriptorSddl <String>] [-ShowSecurityDescriptorUI] [-StartupScript <String>] 
[-ThreadApartmentState {STA | MTA | Unknown}] [-ThreadOptions {Default | UseNewThread | ReuseThread | UseCurrentThread}] 
[-TransportOption <PSTransportOption>] [-UseSharedProcess] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-RuleOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-ScheduledJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-ScheduledJobOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-SecureBootUEFI`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Service`, [
        new Parameter(`ComputerName`, `Specifies one or more computers. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer. To specify the local computer, type the 
computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your computer is not 
configured to run remote commands.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Description`, `Specifies a new description for the service.


The service description appears in Services in Computer Management. Description is not a property of the ServiceController object 
that Get-Service gets. To see the service description, use Get-WmiObject to get a Win32_Service object that represents the service.`, `String`),
        new Parameter(`DisplayName`, `Specifies a new display name for the service.`, `String`),
        new Parameter(`InputObject`, `Specifies a ServiceController object that represents the service to change. Enter a variable that contains the object, or type a 
command or expression that gets the object, such as a Get-Service command. You can also pipe a service object to Set-Service.`, `ServiceController`),
        new Parameter(`Name`, `Specifies the service name of the service to be changed. Wildcard characters are not permitted. You can also pipe a service name to 
Set-Service .`, `String`),
        new Parameter(`PassThru`, `Returns objects that represent the services that were changed. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`StartupType`, `Specifies the start mode of the service. The acceptable values for this parameter are:


- Automatic. Start when the system starts. - Manual. Starts only when started by a user or program. - Disabled. Cannot be started.`, `ServiceStartMode`),
        new Parameter(`Status`, `Specifies the status for the service.  The acceptable values for this parameter are:


- Running. Starts the service. - Stopped. Stops the service. - Paused. Suspends the service.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Starts, stops, and suspends a service, and changes its properties.`, `Set-Service [-ComputerName <String[]>] [-Confirm] [-Description <String>] [-DisplayName <String>] [-InputObject <ServiceController>] 
[-PassThru] [-StartupType {Boot | System | Automatic | Manual | Disabled}] [-Status {Running | Stopped | Paused}] [-WhatIf] 
[<CommonParameters>]

Set-Service [-Name] <String> [-ComputerName <String[]>] [-Confirm] [-Description <String>] [-DisplayName <String>] [-PassThru] 
[-StartupType {Boot | System | Automatic | Manual | Disabled}] [-Status {Running | Stopped | Paused}] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-StrictMode`, [
        new Parameter(`Off`, `Indicates that this cmdlet turns strict mode off. This parameter also turns off "Set-PSDebug -Strict".`, `SwitchParameter`),
        new Parameter(`Version`, `Specifies the conditions that cause an error in strict mode.


The acceptable values for this parameter are:


- 1.0


---- Prohibits references to uninitialized variables, except for uninitialized variables in strings.


- 2.0




---- Prohibits references to uninitialized variables. This includes uninitialized variables in strings.


---- Prohibits references to non-existent properties of an object.


---- Prohibits function calls that use the syntax for calling methods.


---- Prohibits a variable without a name ().




Latest


---- Selects the latest version available. The latest version is the most strict. Use this value to make sure that scripts use the 
strictest available version, even when new versions are added to Windows PowerShell.`, `Version`),
    ], `Establishes and enforces coding rules in expressions, scripts, and script blocks.`, `Set-StrictMode -Off [<CommonParameters>]

Set-StrictMode -Version <Version> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-TimeZone`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies the ID of the time zone that this cmdlet sets.`, `String`),
        new Parameter(`InputObject`, `Specifies a TimeZoneInfo object to use as input.`, `TimeZoneInfo`),
        new Parameter(`Name`, `Specifies the name of the time zone that this cmdlet sets.`, `String`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Sets the system time zone to a specified time zone.`, `Set-TimeZone [-Confirm] -Id <String> [-PassThru] [-WhatIf] [<CommonParameters>]

Set-TimeZone [-InputObject] <TimeZoneInfo> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Set-TimeZone [-Name] <String> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-TpmOwnerAuth`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-TraceSource`, [
        new Parameter(`Debugger`, `Indicates that the cmdlet sends the trace output to the debugger. You can view the output in any user-mode or kernel mode debugger or 
in Microsoft Visual Studio. This parameter also selects the default trace listener.`, `SwitchParameter`),
        new Parameter(`FilePath`, `Specifies a file that this cmdlet sends the trace output to. This parameter also selects the file trace listener. If you use this 
parameter to start the trace, use the RemoveFileListener parameter to stop the trace.`, `String`),
        new Parameter(`Force`, `Indicates that the cmdlet overwrites a read-only file. Use with the FilePath parameter.`, `SwitchParameter`),
        new Parameter(`ListenerOption`, `Specifies optional data to add to the prefix of each trace message in the output.The acceptable values for this parameter are:


- None


- LogicalOperationStack


- DateTime


- Timestamp


- ProcessId


- ThreadId


- Callstack




None is the default.

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as 
"ProcessID,ThreadID".`, `TraceOptions`),
        new Parameter(`Name`, `Specifies which components are traced. Enter the name of the trace source of each component. Wildcards are permitted.`, `String[]`),
        new Parameter(`Option`, `Determines the type of events that are traced. The acceptable values for this parameter are:


- None


- Constructor


- Dispose


- Finalizer


- Method


- Property


- Delegates


- Events


- Exception


- Lock


- Error


- Errors


- Warning


- Verbose


- WriteLine


- Data


- Scope


- ExecutionFlow


- Assert


- All




All is the default.


The following values are combinations of other values:


- ExecutionFlow: (Constructor, Dispose, Finalizer, Method, Delegates, Events, and Scope)


- Data: (Constructor, Dispose, Finalizer, Property, Verbose, and WriteLine)


- Errors: (Error and Exception).



To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as 
"Constructor,Dispose".`, `PSTraceSourceOptions`),
        new Parameter(`PSHost`, `ndicates that this cmdlet sends the trace output to the Windows PowerShell host. This parameter also selects the PSHost trace 
listener.`, `SwitchParameter`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`RemoveFileListener`, `Stops the trace by removing the file trace listener associated with the specified file. Enter the path and file name of the trace 
output file.`, `String[]`),
        new Parameter(`RemoveListener`, `Stops the trace by removing the trace listener.


Use the following values with RemoveListener :


- To remove PSHost (console), type "Host".


- To remove Debugger, type "Debug".


- To remove all trace listeners, type "*".




To remove the file trace listener, use the RemoveFileListener parameter.`, `String[]`),
    ], `Configures, starts, and stops a trace of Windows PowerShell components.`, `Set-TraceSource [-Name] <String[]> [[-Option] {None | Constructor | Dispose | Finalizer | Method | Property | Delegates | Events | 
Exception | Lock | Error | Errors | Warning | Verbose | WriteLine | Data | Scope | ExecutionFlow | Assert | All}] [-Debugger] 
[-FilePath <String>] [-Force] [-ListenerOption {None | LogicalOperationStack | DateTime | Timestamp | ProcessId | ThreadId | 
Callstack}] [-PSHost] [-PassThru] [<CommonParameters>]

Set-TraceSource [-Name] <String[]> [-RemoveFileListener <String[]>] [<CommonParameters>]

Set-TraceSource [-Name] <String[]> [-RemoveListener <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-UevConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-UevTemplateProfile`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-Variable`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Description`, `Specifies the description of the variable.`, `String`),
        new Parameter(`Exclude`, `Specifies an array of items that this cmdlet excludes from the operation. The value of this parameter qualifies the Path parameter. 
Enter a path element or pattern, such as "*.txt". Wildcards are permitted.`, `String[]`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation.


By default, you can overwrite a variable, unless the variable has an option value of ReadOnly or Constant. For more information, see 
the Option parameter.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies an array of items that this cmdlet includes in the operation. The value of this parameter qualifies the Name parameter. 
Enter a name or name pattern, such as "c*". Wildcards are permitted.`, `String[]`),
        new Parameter(`Name`, `Specifies the variable name.`, `String[]`),
        new Parameter(`Option`, `Specifies the value of the Options property of the variable.


The acceptable values for this parameter are:


- None. Sets no options. ("None" is the default.) - ReadOnly. Can be deleted. Cannot be not changed, except by using the Force 
parameter. - Constant. Cannot be deleted or changed. Constant is valid only when you are creating a variable. You cannot change the 
options of an existing variable to Constant. - Private. The variable is available only in the current scope. - AllScope. The variable 
is copied to any new scopes that are created.


To see the Options property of all variables in the session, type "Get-Variable | Format-Table -Property name, options -Autosize".`, `ScopedItemOptions`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`Scope`, `Specifies the scope of the variable.The acceptable values for this parameter are:


- Global


- Local


- Script


- A number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent).




Local is the default.

For more information, see about_Scopes.`, `String`),
        new Parameter(`Value`, `Specifies the value of the variable.`, `Object`),
        new Parameter(`Visibility`, `Determines whether the variable is visible outside of the session in which it was created. This parameter is designed for use in 
scripts and commands that will be delivered to other users. The acceptable values for this parameter are:


- Public.  The variable is visible. (Public is the default.) - Private. The variable is not visible.


When a variable is private, it does not appear in lists of variables, such as those returned by Get-Variable, or in displays of the 
Variable: drive. Commands to read or change the value of a private variable return an error. However, the user can run commands that 
use a private variable if the commands were written in the session in which the variable was defined.`, `SessionStateEntryVisibility`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Sets the value of a variable. Creates the variable if one with the requested name does not exist.`, `Set-Variable [-Name] <String[]> [[-Value] <Object>] [-Confirm] [-Description <String>] [-Exclude <String[]>] [-Force] [-Include 
<String[]>] [-Option {None | ReadOnly | Constant | Private | AllScope | Unspecified}] [-PassThru] [-Scope <String>] [-Visibility 
{Public | Private}] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WheaMemoryPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WinAcceptLanguageFromLanguageListOptOut`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WinCultureFromLanguageListOptOut`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WinDefaultInputMethodOverride`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WindowsEdition`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WindowsProductKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WindowsSearchSetting`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WinHomeLocation`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WinLanguageBarOption`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WinSystemLocale`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WinUILanguageOverride`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WinUserLanguageList`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WmiInstance`, [
        new Parameter(`Arguments`, `Specifies the name of the property to be changed and the new value for that property. The name and value must be a name-value pair. 
The name-value pair is passed on the command line as a hash table. For example:


"@{Setting1=1; Setting2=5; Setting3="test"}"`, `Hashtable`),
        new Parameter(`AsJob`, `Indicates that this cmdket runs as a background job. Use this parameter to run commands that take a long time to finish.


When you specify the AsJob parameter, the command returns an object that represents the background job and then displays the command 
prompt. You can continue to work in the session while the job finishes. If Set-WmiInstance is used for a remote computer, the job is 
created on the local computer, and the results from remote computers are automatically returned to the local computer. To manage the 
job, use the cmdlets that contain the Job noun (the Job cmdlets). To get the job results, use the Receive-Job cmdlet.


To use this parameter together with remote computers, the local and remote computers must be configured for remoting. Additionally, 
you must start Windows PowerShell by using the Run as administrator option in Windows Vista and later versions of the Windows 
operating system. For more information, see about_Remote_Requirements.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
        new Parameter(`Authentication`, `Specifies the authentication level that must be used with the WMI connection. The acceptable values for this parameter are:


- -1: Unchanged.


- 0: Default.


- 1: None.


No authentication in performed.  - 2: Connect. Authentication is performed only when the client establishes a relationship with the 
application.  - 3: Call. Authentication is performed only at the start of each call when the application receives the request.  - 4: 
Packet. Authentication is performed on all the data that is received from the client.  - 5: PacketIntegrity. All the data that is 
transferred between the client and the application is authenticated and verified.  - 6: PacketPrivacy. The properties of the other 
authentication levels are used, and all the data is encrypted.`, `AuthenticationLevel`),
        new Parameter(`Authority`, `Specifies the authority to use to authenticate the WMI connection. You can specify standard NTLM or Kerberos authentication. To use 
NTLM, set the authority setting to ntlmdomain:<DomainName>, where <DomainName> identifies a valid NTLM domain name. To use Kerberos, 
specify kerberos:<DomainName>\<ServerName>. You cannot include the authority setting when you connect to the local computer.`, `String`),
        new Parameter(`Class`, `Specifies the name of a WMI class.`, `String`),
        new Parameter(`ComputerName`, `Specifies the name of the computer on which this cmdlet runs. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more computers. To specify the local computer, type 
the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your computer is not 
configured to run remote commands.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts for a password.


This parameter is not supported by any providers installed with parameter is not supported by any providers installed with Windows 
PowerShell.`, `PSCredential`),
        new Parameter(`EnableAllPrivileges`, `Indicates that this cmdlet enables all the permissions of the current user before the command it makes the WMI call.`, `SwitchParameter`),
        new Parameter(`Impersonation`, `Specifies the impersonation level to use. The acceptable values for this parameter are:


- 0: Default. Reads the local registry for the default impersonation level, which is usually set to 3: Impersonate. - 1: Anonymous. 
Hides the credentials of the caller.  - 2: Identify. Allows objects to query the credentials of the caller.  - 3: Impersonate. Allows 
objects to use the credentials of the caller.  - 4: Delegate. Allows objects to permit other objects to use the credentials of the 
caller.`, `ImpersonationLevel`),
        new Parameter(`InputObject`, `Specifies a ManagementObject object to use as input. When this parameter is used, all other parameters ,except the Arguments 
parameter, are ignored.`, `ManagementObject`),
        new Parameter(`Locale`, `Specifies the preferred locale for WMI objects. The Locale parameter is specified in an array in the MS_<LCID> format in the 
preferred order.`, `String`),
        new Parameter(`Namespace`, `Specifies the WMI repository namespace where the referenced WMI class is located when it is used with the Class parameter.`, `String`),
        new Parameter(`Path`, `Specifies a WMI object path of the instance that you want to create or update.`, `String`),
        new Parameter(`PutType`, `Indicates whether to create or update the WMI instance. The acceptable values for this parameter are:


- UpdateOnly. Updates an existing WMI instance.  - CreateOnly. Creates a new WMI instance.  - UpdateOrCreate. Updates the WMI 
instance if it exists or creates a new instance if an instance does not exist.`, `PutType`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. This parameter is used together 
with the AsJob parameter. The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Creates or updates an instance of an existing Windows Management Instrumentation (WMI) class.`, `Set-WmiInstance [-Class] <String> [-Arguments <Hashtable>] [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | 
PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential 
<PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] 
[-Namespace <String>] [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]

Set-WmiInstance [-Arguments <Hashtable>] [-AsJob] [-Confirm] -InputObject <ManagementObject> [-PutType {None | UpdateOnly | 
CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Set-WmiInstance [-Arguments <Hashtable>] [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | 
PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace 
<String>] -Path <String> [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]

Set-WmiInstance [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] 
[-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] [-PutType {None | UpdateOnly | 
CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Set-WmiInstance [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] 
[-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] [-PutType {None | UpdateOnly | 
CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Set-WmiInstance [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] 
[-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] [-PutType {None | UpdateOnly | 
CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WSManInstance`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Set-WSManQuickConfig`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Show-Command`, [
        new Parameter(`ErrorPopup`, `Indicates that the cmdlet displays errors in a pop-up window, in addition to displaying them at the command line. By default, when a 
command that is run in a Show-Command window generates an error, the error is displayed only at the command line.


Also, when you run the command (by using the Run button in the Show-Command window), the ErrorPopup parameter returns the command 
results to the current command, instead of running the command and returning its output to a new command. You can use this feature to 
save the command results in a variable.`, `SwitchParameter`),
        new Parameter(`Height`, `Specifies the height of the Show-Command window in pixels. Enter a value between 300 and the number of pixels in the screen 
resolution. If the value is too large to display the command window on the screen, Show-Command generates an error. The default 
height is 600 pixels. For a Show-Command command that includes the Name parameter, the default height is 300 pixels.`, `Double`),
        new Parameter(`Name`, `Displays a command window for the specified command. Enter the name of one command, such as the name of a cmdlet, function, workflow, 
or CIM command. If you omit this parameter, Show-Command displays a command window that lists all of the Windows PowerShell commands 
in all modules installed on the computer.`, `String`),
        new Parameter(`NoCommonParameter`, `Indicates that this cmdlet omits the Common Parameters section of the command display. By default, the Common Parameters appear in an 
expandable section at the bottom of the command window.`, `SwitchParameter`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.


To run the command string, copy and paste it at the command prompt or save it in a variable and use the Invoke-Expression cmdlet to 
run the string in the variable.`, `SwitchParameter`),
        new Parameter(`Width`, `Specifies the width of the Show-Command window in pixels. Enter a value between 300 and the number of pixels in the screen 
resolution. If the value is too large to display the command window on the screen, Show-Command generates an error. The default width 
is 300 pixels.`, `Double`),
    ], `Creates Windows PowerShell commands in a graphical command window.`, `Show-Command [[-Name] <String>] [-ErrorPopup] [-Height <Double>] [-NoCommonParameter] [-PassThru] [-Width <Double>] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Show-ControlPanelItem`, [
        new Parameter(`CanonicalName`, `Specifies control panel items by using the specified canonical names or name patterns. Wildcard characters are permitted. If you 
enter multiple names, this cmdlet opens control panel items that match any of the names, as if the items in the name list were 
separated by an OR operator.`, `String[]`),
        new Parameter(`InputObject`, `Specifies control panel items to open by submitting control panel item objects. Enter a variable that contains control panel item 
objects, or type a command or expression that gets control panel item objects, such as Get-ControlPanelItem .`, `ControlPanelItem[]`),
        new Parameter(`Name`, `Specifies names of control panel items. Wildcard characters are permitted. If you enter multiple names, this cmdlet opens control 
panel items that match any of the names, as if the items in the name list were separated by an OR operator.`, `String[]`),
    ], `Opens control panel items.`, `Show-ControlPanelItem -CanonicalName <String[]> [<CommonParameters>]

Show-ControlPanelItem [[-InputObject] <ControlPanelItem[]>] [<CommonParameters>]

Show-ControlPanelItem [-Name] <String[]> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Show-EventLog`, [
        new Parameter(`ComputerName`, `Specifies a remote computer. Show-EventLog displays the event logs from the specified computer in Event Viewer on the local computer. 
The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your computer is not 
configured to run remote commands.`, `String`),
    ], `Displays the event logs of the local or a remote computer in Event Viewer.`, `Show-EventLog [[-ComputerName] <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Show-WindowsDeveloperLicenseRegistration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Sort-Object`, [
        new Parameter(`CaseSensitive`, `Indicates that the sort should be case sensitive. By default, sorting is not case sensitive.`, `SwitchParameter`),
        new Parameter(`Culture`, `Specifies the cultural configuration to use when sorting.`, `String`),
        new Parameter(`Descending`, `Indicates that the cmdlet sorts the objects in descending order. The default is ascending order.


The Descending parameter applies to all properties. To sort by some properties in ascending order and others in descending order, you 
must specify their property values by using a hash table.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the objects to sort.


When you use the InputObject parameter to submit a collection of items, Sort-Object receives one object that represents the 
collection. Because one object cannot be sorted, Sort-Object returns the entire collection unchanged.


To sort objects, pipe them to Sort-Object .`, `PSObject`),
        new Parameter(`Property`, `Specifies the properties to use when sorting. Objects are sorted based on the values of these properties. Enter the names of the 
properties. Wildcards are permitted.


If you specify multiple properties, the objects are first sorted by the first property. If more than one object has the same value 
for the first property, those objects are sorted by the second property. This process continues until there are no more specified 
properties or no groups of objects.


If you do not specify properties, the cmdlet sorts based on default properties for the object type.


The value of the Property parameter can be a calculated property. To create a calculated, property, use a hash table. Valid keys are:


- Expression <string> or <script block>


- Ascending <Boolean>


- Descending <Boolean>`, `Object[]`),
        new Parameter(`Unique`, `Indicates that the cmdlet eliminates duplicates and returns only the unique members of the collection. You can use this parameter 
instead of using the Get-Unique cmdlet.


This parameter is case-insensitive. As a result, strings that differ only in character casing are considered to be the same.`, `SwitchParameter`),
    ], `Sorts objects by property values.`, `Sort-Object [[-Property] <Object[]>] [-CaseSensitive] [-Culture <String>] [-Descending] [-InputObject <PSObject>] [-Unique] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Split-Path`, [
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with parameter is not supported by any providers installed with Windows 
PowerShell.`, `PSCredential`),
        new Parameter(`IsAbsolute`, `Indicates that this cmdlet returns $True if the path is absolute and $False if it is relative. An absolute path has a length greater 
than zero and does not use a dot (.) to indicate the current path.`, `SwitchParameter`),
        new Parameter(`Leaf`, `Indicates that this cmdlet returns only the last item or container in the path. For example, in the path "C:\\Test\\Logs\\Pass1.log", it 
returns only Pass1.log.`, `SwitchParameter`),
        new Parameter(`LiteralPath`, `Specifies the paths to be split. Unlike Path , the value of LiteralPath is used exactly as it is typed. No characters are interpreted 
as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell 
Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`NoQualifier`, `Indicates that this cmdlet returns the path without the qualifier. For the FileSystem or registry providers, the qualifier is the 
drive of the provider path, such as C: or HKCU:. For example, in the path "C:\\Test\\Logs\\Pass1.log", it returns only 
\\Test\\Logs\\Pass1.log.`, `SwitchParameter`),
        new Parameter(`Parent`, `Indicates that this cmdlet returns only the parent containers of the item or of the container specified by the path. For example, in 
the path "C:\\Test\\Logs\\Pass1.log", it returns C:\\Test\\Logs. The Parent parameter is the default split location parameter.`, `SwitchParameter`),
        new Parameter(`Path`, `Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces, enclose it in quotation marks. You 
can also pipe a path to this cmdlet.`, `String[]`),
        new Parameter(`Qualifier`, `Indicates that this cmdlet returns only the qualifier of the specified path. For the FileSystem or registry providers, the qualifier 
is the drive of the provider path, such as C: or HKCU:.`, `SwitchParameter`),
        new Parameter(`Resolve`, `Indicates that this cmdlet displays the items that are referenced by the resulting split path instead of displaying the path elements.`, `SwitchParameter`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Returns the specified part of a path.`, `Split-Path [-Path] <String[]> [-Credential <PSCredential>] [-IsAbsolute] [-Resolve] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <String[]> [-Credential <PSCredential>] [-Leaf] [-Resolve] [-UseTransaction] [<CommonParameters>]

Split-Path [-Credential <PSCredential>] -LiteralPath <String[]> [-Resolve] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <String[]> [-Credential <PSCredential>] [-NoQualifier] [-Resolve] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <String[]> [-Credential <PSCredential>] [-Parent] [-Resolve] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <String[]> [[-Qualifier]] [-Credential <PSCredential>] [-Resolve] [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Split-WindowsImage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-BitsTransfer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-DscConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-DtcDiagnosticResourceManager`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-Job`, [
        new Parameter(`ArgumentList`, `Specifies an array of arguments, or parameter values, for the script that is specified by the FilePath parameter.


Because all of the values that follow the ArgumentList parameter name are interpreted as being values of ArgumentList , specify this 
parameter as the last parameter in the command.`, `Object[]`),
        new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate user credentials. The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate
- NegotiateWithImplicitCredential


The default value is Default.


CredSSP authentication is available only in Windows Vista, Windows Server 2008, and later versions of the Windows operating system.


For information about the values of this parameter, see the description of the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the Microsoft Developer 
Network (MSDN).


Caution: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to a remote 
computer to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a 
remote network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one from the Get-Credential cmdlet.`, `PSCredential`),
        new Parameter(`DefinitionName`, `Specifies the definition name of the job that this cmdlet starts. Use this parameter to start custom job types that have a definition 
name, such as scheduled jobs.


When you use Start-Job to start an instance of a scheduled job, the job starts immediately, regardless of job triggers or job 
options. The resulting job instance is a scheduled job, but it is not saved to disk like triggered scheduled jobs. Also, you cannot 
use the ArgumentList parameter of Start-Job to provide values for parameters of scripts that run in a scheduled job. For more 
information, see about_Scheduled_Jobs.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`DefinitionPath`, `Specifies path of the definition for the job that this cmdlet starts. Enter the definition path. The concatenation of the values of 
the DefinitionPath and DefinitionName parameters is the fully qualified path of the job definition. Use this parameter to start 
custom job types that have a definition path, such as scheduled jobs.


For scheduled jobs, the value of the DefinitionPath parameter is "$home\\AppData\\Local\\Windows\\PowerShell\\ScheduledJob".


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`FilePath`, `Specifies a local script that this cmdlet runs as a background job. Enter the path and file name of the script or pipe a script path 
to Start-Job . The script must be on the local computer or in a folder that the local computer can access.


When you use this parameter, Windows PowerShell converts the contents of the specified script file to a script block and runs the 
script block as a background job.`, `String`),
        new Parameter(`InitializationScript`, `Specifies commands that run before the job starts. Enclose the commands in braces ( { } ) to create a script block.


Use this parameter to prepare the session in which the job runs. For example, you can use it to add functions, snap-ins, and modules 
to the session.`, `ScriptBlock`),
        new Parameter(`InputObject`, `Specifies input to the command. Enter a variable that contains the objects, or type a command or expression that generates the 
objects.


In the value of the ScriptBlock parameter, use the $Input automatic variable to represent the input objects.`, `PSObject`),
        new Parameter(`LiteralPath`, `Specifies a local script that this cmdlet runs as a background job. Enter the path of a script on the local computer.


Unlike the FilePath parameter, this cmdlet uses the value of the LiteralPath parameter exactly as it is typed. No characters are 
interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation 
marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`Name`, `Specifies a friendly name for the new job. You can use the name to identify the job to other job cmdlets, such as the Stop-Job cmdlet.


The default friendly name is Job#, where # is an ordinal number that is incremented for each job.`, `String`),
        new Parameter(`PSVersion`, `Specifies a version. This cmdlet runs the job with the version of Windows PowerShell. The acceptable values for this parameter are: 
2.0 and 3.0.


This parameter was introduced in Windows PowerShell 3.0.`, `Version`),
        new Parameter(`RunAs32`, `Indicates that this cmdlet runs the job in a 32-bit process. Use this parameter to force the job to run in a 32-bit process on a 
64-bit operating system.


On 64-bit versions of Windows 7 and Windows Server 2008 R2, when the Start-Job command includes the RunAs32 parameter, you cannot use 
the Credential parameter to specify the credentials of another user.`, `SwitchParameter`),
        new Parameter(`ScriptBlock`, `Specifies the commands to run in the background job. Enclose the commands in braces ( { } ) to create a script block. This parameter 
is required.`, `ScriptBlock`),
        new Parameter(`Type`, `Specifies the custom type for jobs that this cmdlet starts. Enter a custom job type name, such as PSScheduledJob for scheduled jobs 
or PSWorkflowJob for workflows jobs. This parameter is not valid for standard background jobs.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
    ], `Starts a Windows PowerShell background job.`, `Start-Job [-ScriptBlock] <ScriptBlock> [[-InitializationScript] <ScriptBlock>] [-ArgumentList <Object[]>] [-Authentication {Default | 
Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-Credential <PSCredential>] [-InputObject 
<PSObject>] [-Name <String>] [-PSVersion <Version>] [-RunAs32] [<CommonParameters>]

Start-Job [-FilePath] <String> [[-InitializationScript] <ScriptBlock>] [-ArgumentList <Object[]>] [-Authentication {Default | Basic | 
Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-Credential <PSCredential>] [-InputObject <PSObject>] 
[-Name <String>] [-PSVersion <Version>] [-RunAs32] [<CommonParameters>]

Start-Job [[-InitializationScript] <ScriptBlock>] [-ArgumentList <Object[]>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-Credential <PSCredential>] [-InputObject <PSObject>] -LiteralPath 
<String> [-Name <String>] [-PSVersion <Version>] [-RunAs32] [<CommonParameters>]

Start-Job [-DefinitionName] <String> [[-DefinitionPath] <String>] [[-Type] <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-OSUninstall`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-Process`, [
        new Parameter(`ArgumentList`, `Specifies parameters or parameter values to use when this cmdlet starts the process.`, `String[]`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. Type a user name, such as User01 or Domain01\\User01, or enter a 
PSCredential object, such as one from the Get-Credential cmdlet. By default, the cmdlet uses the credentials of the current user.`, `PSCredential`),
        new Parameter(`FilePath`, `Specifies the optional path and file name of the program that runs in the process. Enter the name of an executable file or of a 
document, such as a .txt or .doc file, that is associated with a program on the computer. This parameter is required.


If you specify only a file name, use the WorkingDirectory parameter to specify the path.`, `String`),
        new Parameter(`LoadUserProfile`, `Indicates that this cmdlet loads the Windows user profile stored in the HKEY_USERS registry key for the current user.


This parameter does not affect the Windows PowerShell profiles. For more information, see about_Profiles.`, `SwitchParameter`),
        new Parameter(`NoNewWindow`, `Start the new process in the current console window. By default Windows PowerShell opens a new window.


You cannot use the NoNewWindow and WindowStyle parameters in the same command.`, `SwitchParameter`),
        new Parameter(`PassThru`, `Returns a process object for each process that the cmdlet started. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`RedirectStandardError`, `Specifies a file. This cmdlet sends any errors generated by the process to a file that you specify. Enter the path and file name. By 
default, the errors are displayed in the console.`, `String`),
        new Parameter(`RedirectStandardInput`, `Specifies a file. This cmdlet reads input from the specified file. Enter the path and file name of the input file. By default, the 
process gets its input from the keyboard.`, `String`),
        new Parameter(`RedirectStandardOutput`, `Specifies a file. This cmdlet sends the output generated by the process to a file that you specify. Enter the path and file name. By 
default, the output is displayed in the console.`, `String`),
        new Parameter(`UseNewEnvironment`, `Indicates that this cmdlet uses new environment variables specified for the process. By default, the started process runs with the 
environment variables specified for the computer and user.`, `SwitchParameter`),
        new Parameter(`Verb`, `Specifies a verb to use when this cmdlet starts the process. The verbs that are available are determined by the file name extension 
of the file that runs in the process.


The following table shows the verbs for some common process file types.


"File type      Verbs" "---------      -------" ".cmd------Edit, Open, Print, Runas" ".exe------Open, RunAs" ".txt------Open, Print, 
PrintTo" ".wav------Open, Play"


To find the verbs that can be used with the file that runs in a process, use the New-Object cmdlet to create a 
System.Diagnostics.ProcessStartInfo object for the file. The available verbs are in the Verbs property of the ProcessStartInfo 
object. For details, see the examples.`, `String`),
        new Parameter(`Wait`, `Indicates that this cmdlet waits for the specified process to complete before accepting more input. This parameter suppresses the 
command prompt or retains the window until the process finishes.`, `SwitchParameter`),
        new Parameter(`WindowStyle`, `Specifies the state of the window that is used for the new process. The acceptable values for this parameter are: Normal, Hidden, 
Minimized, and Maximized. The default value is Normal.


You cannot use the WindowStyle and NoNewWindow parameters in the same command.`, `ProcessWindowStyle`),
        new Parameter(`WorkingDirectory`, `Specifies the location of the executable file or document that runs in the process. The default is the current folder.`, `String`),
    ], `Starts one or more processes on the local computer.`, `Start-Process [-FilePath] <String> [[-ArgumentList] <String[]>] [-Credential <PSCredential>] [-LoadUserProfile] [-NoNewWindow] 
[-PassThru] [-RedirectStandardError <String>] [-RedirectStandardInput <String>] [-RedirectStandardOutput <String>] 
[-UseNewEnvironment] [-Wait] [-WindowStyle {Normal | Hidden | Minimized | Maximized}] [-WorkingDirectory <String>] 
[<CommonParameters>]

Start-Process [-FilePath] <String> [[-ArgumentList] <String[]>] [-PassThru] [-Verb <String>] [-Wait] [-WindowStyle {Normal | Hidden | 
Minimized | Maximized}] [-WorkingDirectory <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-Service`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`DisplayName`, `Specifies the display names of the services to start. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Exclude`, `Specifies services that this cmdlet omits. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, 
such as "s*". Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Include`, `Specifies services that this cmdlet starts. The value of this parameter qualifies the Name parameter. Enter a name element or 
pattern, such as "s*". Wildcard characters are permitted.`, `String[]`),
        new Parameter(`InputObject`, `Specifies ServiceController objects representing the services to be started. Enter a variable that contains the objects, or type a 
command or expression that gets the objects.`, `ServiceController[]`),
        new Parameter(`Name`, `Specifies the service names for the service to be started.


The parameter name is optional. You can use Name or its alias, ServiceName , or you can omit the parameter name.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object that represents the service. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Starts one or more stopped services.`, `Start-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Start-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Start-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-Sleep`, [
        new Parameter(`Milliseconds`, `Specifies how long the resource sleeps in milliseconds. The parameter can be abbreviated as m .`, `Int32`),
        new Parameter(`Seconds`, `Specifies how long the resource sleeps in seconds. You can omit the parameter name ( Seconds ), or you can abbreviate it as s .`, `Int32`),
    ], `Suspends the activity in a script or session for the specified period of time.`, `Start-Sleep -Milliseconds <Int32> [<CommonParameters>]

Start-Sleep [-Seconds] <Int32> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-Transaction`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Independent`, `Indicates that this cmdlet starts a transaction that is independent of any transactions in progress. By default, if you use 
Start-Transaction while another transaction is in progress, a new subscriber is added to the transaction in progress. This parameter 
has an effect only when a transaction is already in progress in the session.


By default, if you use Start-Transaction while a transaction is in progress, the existing transaction object is reused and the 
subscriber count is incremented. The effect is much like joining the original transaction. An Undo-Transaction command rolls back the 
whole the transaction. To complete the transaction, you must enter a Complete-Transaction command for each subscriber. Because most 
transactions that are in progress at the same time are related, the default is sufficient for most uses.


If you specify the Independent parameter, this cmdlet creates a new transaction that can be completed or undone without affecting the 
original transaction. However, because only one transaction can be active at a time, you must complete or roll back the new 
transaction before resuming work on the original transaction.`, `SwitchParameter`),
        new Parameter(`RollbackPreference`, `Specifies the conditions under which a transaction is automatically rolled back. The acceptable values for this parameter are:


- Error. The transaction is rolled back automatically if a terminating or non-terminating error occurs.  - TerminatingError. The 
transaction is rolled back automatically if a terminating error occurs.  - Never. The transaction is never rolled back automatically.


The default value is Error.`, `RollbackSeverity`),
        new Parameter(`Timeout`, `Specifies the maximum time, in minutes, that the transaction is active. When the time-out expires, the transaction is automatically 
rolled back.


By default, there is no time-out for transactions that are started at the command line. When transactions are started by a script, 
the default time-out is 30 minutes.`, `Int32`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Starts a transaction.`, `Start-Transaction [-Confirm] [-Independent] [-RollbackPreference {Error | TerminatingError | Never}] [-Timeout <Int32>] [-WhatIf] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Start-Transcript`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-AppvClientConnectionGroup`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-AppvClientPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-Computer`, [
        new Parameter(`AsJob`, `Indicates that this cmdlet runs as a background job.


To use this parameter, the local and remote computers must be configured for remoting and, on Windows Vista and later versions of the 
Windows operating system, you must open Windows PowerShell by using the Run as administrator option. For more information, see 
about_Remote_Requirements.


When you specify the AsJob parameter, the command immediately returns an object that represents the background job. You can continue 
to work in the session while the job finishes. The job is created on the local computer and the results from remote computers are 
automatically returned to the local computer. To get the job results, use the Receive-Job cmdlet.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
        new Parameter(`ComputerName`, `Specifies the computers to stop. The default is the local computer.


Type the NETBIOS name, IP address, or fully qualified domain name of one or more computers in a comma-separated list. To specify the 
local computer, type the computer name or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your computer is not 
configured to run remote commands.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01, or enter a PSCredential object, such as one from the Get-Credential cmdlet.`, `PSCredential`),
        new Parameter(`DcomAuthentication`, `Specifies the authentication level that this cmdlet uses with WMI. Stop-Computer uses WMI. The acceptable values for this parameter 
are:


- Default. Windows Authentication  - None. No COM authentication  - Connect. Connect-level COM authentication - Call. Call-level COM 
authentication - Packet . Packet-level COM authentication - PacketIntegrity. Packet Integrity-level COM authentication  - 
PacketPrivacy. Packet Privacy-level COM authentication  - Unchanged. Same as the previous command


The default value is Packet.


For more information about the values of this parameter, see AuthenticationLevel 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235229 (http://go.microsoft.com/fwlink/?LinkID=235229) in the Microsoft Developer 
Library (MSDN).`, `AuthenticationLevel`),
        new Parameter(`Force`, `Forces an immediate shut down of the computers.`, `SwitchParameter`),
        new Parameter(`Impersonation`, `Specifies the impersonation level to use when this cmdlet calls WMI. Stop-Computer uses WMI. The acceptable values for this parameter 
are:


- Default. Default impersonation.  - Anonymous. Hides the identity of the caller.  - Identify. Allows objects to query the 
credentials of the caller.  - Impersonate. Allows objects to use the credentials of the caller.


The default value is Impersonate.`, `ImpersonationLevel`),
        new Parameter(`Protocol`, `Specifies which protocol to use to restart the computers. The acceptable values for this parameter are: WSMan and DCOM. The default 
value is DCOM.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this parameter or 
enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        new Parameter(`WsmanAuthentication`, `Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the WSMan protocol. The acceptable 
values for this parameter are:


- Basic


- CredSSP


- Default


- Digest


- Kerberos


- Negotiate.




The default value is Default.


For more information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235230 (http://go.microsoft.com/fwlink/?LinkID=235230) in the MSDN library.


Caution: Credential Security Service Provider (CredSSP) authentication, in which the user credentials are passed to a remote computer 
to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a remote 
network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.

This parameter was introduced in Windows PowerShell 3.0.`, `String`),
    ], `Stops (shuts down) local and remote computers.`, `Stop-Computer [[-ComputerName] <String[]>] [[-Credential] <PSCredential>] [-AsJob] [-Confirm] [-DcomAuthentication {Default | None | 
Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Force] [-Impersonation {Default | Anonymous | Identify | 
Impersonate | Delegate}] [-Protocol {DCOM | WSMan}] [-ThrottleLimit <Int32>] [-WhatIf] [-WsmanAuthentication {Default | Basic | 
Negotiate | CredSSP | Digest | Kerberos}] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-DtcDiagnosticResourceManager`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-Job`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet stops jobs that satisfy all of the conditions. Enter a hash table where the keys 
are job properties and the values are job property values.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs. It does not work on standard background 
jobs, such as those created by using the Start-Job cmdlet. For information about support for this parameter, see the help topic for 
the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Hashtable`),
        new Parameter(`Id`, `Specifies the IDs of jobs that this cmdlet stops. The default is all jobs in the current session.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and type than the instance ID, 
but it is unique only in the current session. You can type one or more IDs, separated by commas. To find the ID of a job, type 
"Get-Job".`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies the instance IDs of jobs that this cmdlet stops. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use Get-Job.`, `Guid[]`),
        new Parameter(`Job`, `Specifies the jobs that this cmdlet stops. Enter a variable that contains the jobs or a command that gets the jobs. You can also use 
a pipeline operator to submit jobs to the Stop-Job cmdlet. By default, Stop-Job deletes all jobs that were started in the current 
session.`, `Job[]`),
        new Parameter(`Name`, `Specifies friendly names of jobs that this cmdlet stops. Enter the job names in a comma-separated list or use wildcard characters (*) 
to enter a job name pattern. By default, Stop-Job stops all jobs created in the current session.


Because the friendly name is not guaranteed to be unique, use the WhatIf and Confirm parameters when stopping jobs by name.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`State`, `Specifies a job state. This cmdlet stops only jobs in the specified state. The acceptable values for this parameter are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx ) in the Microsoft 
Developer Network (MSDN).`, `JobState`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Stops a Windows PowerShell background job.`, `Stop-Job [-Filter] <Hashtable> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-Id] <Int32[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-InstanceId] <Guid[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-Job] <Job[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-Name] <String[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | 
AtBreakpoint} [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-Process`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Stops the specified processes without prompting for confirmation. By default, Stop-Process prompts for confirmation before stopping 
any process that is not owned by the current user.


To find the owner of a process, use the Get-WmiObject cmdlet to get a Win32_Process object that represents the process, and then use 
the GetOwner method of the object.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies the process IDs of the processes to stop. To specify multiple IDs, use commas to separate the IDs. To find the PID of a 
process, type "Get-Process".`, `Int32[]`),
        new Parameter(`InputObject`, `Specifies the process objects to stop. Enter a variable that contains the objects, or type a command or expression that gets the 
objects.`, `Process[]`),
        new Parameter(`Name`, `Specifies the process names of the processes to stop. You can type multiple process names, separated by commas, or use wildcard 
characters.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object that represents the process. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Stops one or more running processes.`, `Stop-Process [-Id] <Int32[]> [-Confirm] [-Force] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Process [-InputObject] <Process[]> [-Confirm] [-Force] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Process [-Confirm] [-Force] -Name <String[]> [-PassThru] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-Service`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`DisplayName`, `Specifies the display names of the services to stop. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Exclude`, `Specifies services that this cmdlet omits. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, 
such as s*. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Force`, `Forces the cmdlet to stop a service even if that service has dependent services.`, `SwitchParameter`),
        new Parameter(`Include`, `Specifies services that this cmdlet stops. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, 
such as s*. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`InputObject`, `Specifies ServiceController objects that represent the services to stop. Enter a variable that contains the objects, or type a 
command or expression that gets the objects.`, `ServiceController[]`),
        new Parameter(`Name`, `Specifies the service names of the services to stop. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`NoWait`, `Indicates that this cmdlet uses the no wait option.`, `SwitchParameter`),
        new Parameter(`PassThru`, `Returns an object that represents the service. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Stops one or more running services.`, `Stop-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Force] [-Include <String[]>] [-NoWait] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Stop-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] [-NoWait] 
[-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] [-NoWait] [-PassThru] [-WhatIf] 
[<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Stop-Transcript`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Suspend-BitsTransfer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Suspend-Job`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet suspends jobs that satisfy all of the conditions. Enter a hash table where the keys 
are job properties and the values are job property values.`, `Hashtable`),
        new Parameter(`Force`, `Suspends the workflow job immediately. This action could cause a loss of state and data.


By default, Suspend-Job lets the workflow job run until the next checkpoint and then suspends it. You can also use this parameter to 
suspend workflow jobs that do not have checkpoints.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies the IDs of jobs that this cmdlet suspends.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and to type than the instance 
ID, but it is unique only in the current session. You can type one or more IDs, separated by commas. To find the ID of a job, use the 
Get-Job cmdlet.`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies the instance IDs of jobs that this cmdlet suspends. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use Get-Job .`, `Guid[]`),
        new Parameter(`Job`, `Specifies the workflow jobs that this cmdlet stops. Enter a variable that contains the workflow jobs or a command that gets the 
workflow jobs. You can also pipe workflow jobs to the Suspend-Job cmdlet.`, `Job[]`),
        new Parameter(`Name`, `Specifies friendly names of jobs that this cmdlet suspends. Enter one or more workflow job names. Wildcard characters are supported.`, `String[]`),
        new Parameter(`State`, `Specifies a job state. This cmdlet stops only jobs in the specified state. The acceptable values for this parameter are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping Suspend-Job suspends only workflow jobs in the Running state.


For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx ) in the Microsoft 
Developer Network (MSDN).`, `JobState`),
        new Parameter(`Wait`, `Indicates that this cmdlet suppresses the command prompt until the workflow job is in the suspended state. By default, Suspend-Job 
returns immediately, even if the workflow job is not yet in the suspended state.


The Wait parameter is equivalent to piping a Suspend-Job command to the Wait-Job cmdlet.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Temporarily stops workflow jobs.`, `Suspend-Job [-Filter] <Hashtable> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-Id] <Int32[]> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-InstanceId] <Guid[]> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-Job] <Job[]> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-Name] <String[]> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | 
Stopping | AtBreakpoint} [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Suspend-Service`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`DisplayName`, `Specifies the display names of the services to be suspended. Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Exclude`, `Specifies services to omit from the specified services. The value of this parameter qualifies the Name parameter. Enter a name 
element or pattern, such as "s*". Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Include`, `Specifies services to suspend. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as 
"s*". Wildcard characters are permitted.`, `String[]`),
        new Parameter(`InputObject`, `Specifies ServiceController objects that represent the services to suspend. Enter a variable that contains the objects, or type a 
command or expression that gets the objects.`, `ServiceController[]`),
        new Parameter(`Name`, `Specifies the service names of the services to suspend. Wildcard characters are permitted.


The parameter name is optional. You can use Name or its alias, ServiceName , or you can omit the parameter name.`, `String[]`),
        new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Suspends (pauses) one or more running services.`, `Suspend-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Suspend-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Suspend-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Switch-Certificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Sync-AppvPublishingServer`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Tee-Object`, [
        new Parameter(`Append`, `Indicates that the cmdlet appends the output to the specified file. Without this parameter, the new content replaces any existing 
content in the file without warning.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`FilePath`, `Specifies a file that this cmdlet saves the object to Wildcard characters are permitted, but must resolve to a single file.`, `String`),
        new Parameter(`InputObject`, `Specifies the object to be saved and displayed. Enter a variable that contains the objects or type a command or expression that gets 
the objects. You can also pipe an object to Tee-Object .


When you use the InputObject parameter with Tee-Object , instead of piping command results to Tee-Object , the InputObject value-even 
if the value is a collection that is the result of a command, such as "InputObject (Get-Process)"-is treated as a single object. 
Because InputObject cannot return individual properties from an array or collection of objects, it is recommended that if you use 
Tee-Object to perform operations on a collection of objects for those objects that have specific values in defined properties, you 
use Tee-Object in the pipeline, as shown in the examples in this topic.`, `PSObject`),
        new Parameter(`LiteralPath`, `Specifies a file that this cmdlet saves the object to. Unlike FilePath , the value of the LiteralPath parameter is used exactly as it 
is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
        new Parameter(`Variable`, `Specifies a variable that the cmdlet saves the object to. Enter a variable name without the preceding dollar sign ($).`, `String`),
    ], `Saves command output in a file or variable and also sends it down the pipeline.`, `Tee-Object [-FilePath] <String> [-Append] [-InputObject <PSObject>] [<CommonParameters>]

Tee-Object [-InputObject <PSObject>] -LiteralPath <String> [<CommonParameters>]

Tee-Object [-InputObject <PSObject>] -Variable <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-AppLockerPolicy`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-Certificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-ComputerSecureChannel`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. Type a user name, such as User01 or Domain01\\User01, or enter a 
PSCredential object, such as one that the Get-Credential cmdlet returns. By default, the cmdlet uses the credentials of the current 
user.


The Credential parameter is designed for use in commands that use the Repair parameter to repair the channel between the computer and 
the domain.`, `PSCredential`),
        new Parameter(`Repair`, `Indicates that this cmdlet removes and then rebuilds the channel established by the NetLogon service. Use this parameter to try to 
restore a connection that has failed the test.


To use this parameter, the current user must be a member of the Administrators group on the local computer.`, `SwitchParameter`),
        new Parameter(`Server`, `Specifies the domain controller to run the command. If this parameter is not specified, this cmdlet selects a default domain 
controller for the operation.`, `String`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Tests and repairs the secure channel between the local computer and its domain.`, `Test-ComputerSecureChannel [-Confirm] [-Credential <PSCredential>] [-Repair] [-Server <String>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-Connection`, [
        new Parameter(`AsJob`, `Indicates that this cmdlet runs as a background job.


To use this parameter, the local and remote computers must be configured for remoting and, on Windows Vista and later versions of the 
Windows operating system, you must open Windows PowerShell by using the Run as administrator option. For more information, see 
about_Remote_Requirements.


When you specify the AsJob parameter, the command immediately returns an object that represents the background job. You can continue 
to work in the session while the job finishes. The job is created on the local computer and the results from remote computers are 
automatically returned to the local computer. To get the job results, use the Receive-Job cmdlet.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
        new Parameter(`BufferSize`, `Specifies the size, in bytes, of the buffer sent with this command. The default value is 32.`, `Int32`),
        new Parameter(`ComputerName`, `Specifies the computers to ping. Type the computer names or type IP addresses in IPv4 or IPv6 format. Wildcard characters are not 
permitted. This parameter is required.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your computer is not 
configured to run remote commands.`, `String[]`),
        new Parameter(`Count`, `Specifies the number of echo requests to send. The default value is 4.`, `Int32`),
        new Parameter(`Credential`, `Specifies a user account that has permission to send a ping request from the source computer. Type a user name, such as User01 or 
Domain01\\User01, or enter a PSCredential object, such as one from the Get-Credential cmdlet.


The Credential parameter is valid only when the Source parameter is used in the command. The credentials do not affect the 
destination computer.`, `PSCredential`),
        new Parameter(`DcomAuthentication`, `Specifies the authentication level that this cmdlet uses with WMI. Test-Connection uses WMI. The acceptable values for this parameter 
are:


- Default. Windows Authentication  - None. No COM authentication  - Connect. Connect-level COM authentication - Call. Call-level COM 
authentication - Packet . Packet-level COM authentication - PacketIntegrity. Packet Integrity-level COM authentication  - 
PacketPrivacy. Packet Privacy-level COM authentication  - Unchanged. Same as the previous command


The default value is Packet.


For more information about the values of this parameter, see AuthenticationLevel 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235229 (http://go.microsoft.com/fwlink/?LinkID=235229) in the Microsoft Developer 
Library (MSDN).`, `AuthenticationLevel`),
        new Parameter(`Delay`, `Specifies the interval between pings, in seconds.`, `Int32`),
        new Parameter(`Impersonation`, `Specifies the impersonation level to use when this cmdlet calls WMI. Test-Connection uses WMI. The acceptable values for this 
parameter are:


- Default. Default impersonation.  - Anonymous. Hides the identity of the caller.  - Identify. Allows objects to query the 
credentials of the caller.  - Impersonate. Allows objects to use the credentials of the caller.


The default value is Impersonate.`, `ImpersonationLevel`),
        new Parameter(`Protocol`, `Specifies a protocol. The acceptable values for this parameter are: DCOM and WSMan.`, `String`),
        new Parameter(`Quiet`, `Indicates that this cmdlet suppresses all errors. If any pings succeed, this cmdlet returns $True. If all pings fail, this cmdlet 
returns $False.`, `SwitchParameter`),
        new Parameter(`Source`, `Specifies the names of the computers where the ping originates. Enter a comma-separated list of computer names. The default is the 
local computer.`, `String[]`),
        new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this parameter or 
enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
        new Parameter(`TimeToLive`, `Specifies the maximum time, in seconds, that each echo request packet, or ping, is active. Enter an integer between 1 and 255. The 
default value is 80 (seconds). The alias of the TimeToLive parameter is TTL .`, `Int32`),
        new Parameter(`WsmanAuthentication`, `Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the WSMan protocol. The acceptable 
values for this parameter are:


- Basic


- CredSSP


- Default


- Digest


- Kerberos


- Negotiate.




The default value is Default.


For more information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235230 (http://go.microsoft.com/fwlink/?LinkID=235230) in the MSDN library.


Caution: Credential Security Service Provider (CredSSP) authentication, in which the user credentials are passed to a remote computer 
to be authenticated, is designed for commands that require authentication on more than one resource, such as accessing a remote 
network share. This mechanism increases the security risk of the remote operation. If the remote computer is compromised, the 
credentials that are passed to it can be used to control the network session.

This parameter was introduced in Windows PowerShell 3.0.`, `String`),
    ], `Sends ICMP echo request packets ("pings") to one or more computers.`, `Test-Connection [-ComputerName] <String[]> [-AsJob] [-BufferSize <Int32>] [-Count <Int32>] [-DcomAuthentication {Default | None | 
Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Delay <Int32>] [-Impersonation {Default | Anonymous | 
Identify | Impersonate | Delegate}] [-Protocol {DCOM | WSMan}] [-ThrottleLimit <Int32>] [-TimeToLive <Int32>] [-WsmanAuthentication 
{Default | Basic | Negotiate | CredSSP | Digest | Kerberos}] [<CommonParameters>]

Test-Connection [-ComputerName] <String[]> [-Source] <String[]> [-AsJob] [-BufferSize <Int32>] [-Count <Int32>] [-Credential 
<PSCredential>] [-DcomAuthentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] 
[-Delay <Int32>] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Protocol {DCOM | WSMan}] 
[-ThrottleLimit <Int32>] [-TimeToLive <Int32>] [-WsmanAuthentication {Default | Basic | Negotiate | CredSSP | Digest | Kerberos}] 
[<CommonParameters>]

Test-Connection [-ComputerName] <String[]> [-BufferSize <Int32>] [-Count <Int32>] [-DcomAuthentication {Default | None | Connect | 
Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Delay <Int32>] [-Impersonation {Default | Anonymous | Identify | 
Impersonate | Delegate}] [-Protocol {DCOM | WSMan}] [-Quiet] [-TimeToLive <Int32>] [-WsmanAuthentication {Default | Basic | Negotiate 
| CredSSP | Digest | Kerberos}] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-DscConfiguration`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-FileCatalog`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-KdsRootKey`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-ModuleManifest`, [
        new Parameter(`Path`, `Specifies a path and file name for the manifest file. Enter an optional path and name of the module manifest file that has the .psd1 
file name extension. The default location is the current directory. Wildcard characters are supported, but must resolve to a single 
module manifest file. This parameter is required. You can also pipe a path to Test-ModuleManifest .`, `String`),
    ], `Verifies that a module manifest file accurately describes the contents of a module.`, `Test-ModuleManifest [-Path] <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-Path`, [
        new Parameter(`OlderThan`, `Returns "True" when the LastWriteTime value of a file is less than the specified date. Otherwise, it returns "False". Enter a 
DateTime object, such as one that the Get-Date cmdlet returns, or a string that can be converted to a DateTime object, such as 
"August 10, 2011 2:00 PM".

OlderThan is a dynamic parameter that works only on file system paths. It was introduced in Windows PowerShell 3.0.`, `DateTime`),
        new Parameter(`NewerThan`, `Returns "True" when the LastWriteTime value of a file is greater than the specified date. Otherwise, it returns "False". Enter a 
DateTime object, such as one that the Get-Date cmdlet returns, or a string that can be converted to a DateTime object, such as 
"August 10, 2011 2:00 PM".

NewerThan is a dynamic parameter that works only on file system paths. It was introduced in Windows PowerShell 3.0.`, `DateTime`),
        new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\\User01. Or, enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
        new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as "*.txt". Wildcard characters are permitted.`, `String[]`),
        new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path parameter. The syntax of 
the filter, including the use of wildcard characters, depends on the provider. Filters are more efficient than other parameters, 
because the provider applies them when it retrieves the objects instead of having Windows PowerShell filter the objects after they 
are retrieved.`, `String`),
        new Parameter(`Include`, `Specifies paths that this cmdlet tests. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as "*.txt". Wildcard characters are permitted.`, `String[]`),
        new Parameter(`IsValid`, `Indicates that this cmdlet tests the syntax of the path, regardless of whether the elements of the path exist. This cmdlet returns 
$True if the path syntax is valid and $False if it is not.`, `SwitchParameter`),
        new Parameter(`LiteralPath`, `Specifies a path to be tested. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. No characters are 
interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation 
marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies a path to be tested. Wildcard characters are permitted. If the path includes spaces, enclose it in quotation marks.`, `String[]`),
        new Parameter(`PathType`, `Specifies the type of the final element in the path. This cmdlet returns $True if the element is of the specified type and $False if 
it is not. The acceptable values for this parameter are:


- Container. An element that contains other elements, such as a directory or registry key. - Leaf. An element that does not contain 
other elements, such as a file. - Any. Either a container or a leaf. Tells whether the final element in the path is of a particular 
type.`, `TestPathType`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Determines whether all elements of a file or directory path exist.`, `Test-Path [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] [-IsValid] -LiteralPath 
<String[]> [-NewerThan <DateTime>] [-OlderThan <DateTime>] [-PathType {Any | Container | Leaf}] [-UseTransaction] [<CommonParameters>]

Test-Path [-Path] <String[]> [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] [-IsValid] 
[-NewerThan <DateTime>] [-OlderThan <DateTime>] [-PathType {Any | Container | Leaf}] [-UseTransaction] [<CommonParameters>]

Test-Path [-NewerThan <DateTime>] [-OlderThan <DateTime>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-PSSessionConfigurationFile`, [
        new Parameter(`Path`, `Specifies the path and file name of a session configuration file (.pssc). If you omit the path, the default is the current folder. 
Wildcard characters are supported, but they must resolve to a single file. You can also pipe a session configuration file path to 
Test-PSSessionConfigurationFile .`, `String`),
    ], `Verifies the keys and values in a session configuration file.`, `Test-PSSessionConfigurationFile [-Path] <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-UevTemplate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Test-WSMan`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Trace-Command`, [
        new Parameter(`ArgumentList`, `Specifies the parameters and parameter values for the command being traced. The alias for ArgumentList is Args . This feature is 
especially useful for debugging dynamic parameters.`, `Object[]`),
        new Parameter(`Command`, `Specifies a command that is being processed during the trace.`, `String`),
        new Parameter(`Debugger`, `Indicates that the cmdlet sends the trace output to the debugger. You can view the output in any user-mode or kernel mode debugger or 
in Visual Studio. This parameter also selects the default trace listener.`, `SwitchParameter`),
        new Parameter(`Expression`, `Specifies the expression that is being processed during the trace. Enclose the expression in braces ({}).`, `ScriptBlock`),
        new Parameter(`FilePath`, `Specifies a file that the cmdlet sends the trace output to. This parameter also selects the file trace listener.`, `String`),
        new Parameter(`Force`, `Forces the command to run without asking for user confirmation. Used with the FilePath parameter. Even using the Force parameter, the 
cmdlet cannot override security restrictions.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies input to the expression that is being processed during the trace.


You can enter a variable that represents the input that the expression accepts, or pass an object through the pipeline.`, `PSObject`),
        new Parameter(`ListenerOption`, `Specifies optional data to the prefix of each trace message in the output.The acceptable values for this parameter are:


- None


- LogicalOperationStack


- DateTime


- Timestamp


- ProcessId


- ThreadId


- Callstack




None is the default.

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as 
"ProcessID,ThreadID".`, `TraceOptions`),
        new Parameter(`Name`, `Specifies an array of Windows PowerShell components that are traced. Enter the name of the trace source of each component. Wildcards 
are permitted. To find the trace sources on your computer, type "Get-TraceSource".`, `String[]`),
        new Parameter(`Option`, `Determines the type of events that are traced. The acceptable values for this parameter are:


- None


- Constructor


- Dispose


- Finalizer


- Method


- Property


- Delegates


- Events


- Exception


- Lock


- Error


- Errors


- Warning


- Verbose


- WriteLine


- Data


- Scope


- ExecutionFlow


- Assert


- All




All is the default.


The following values are combinations of other values:


- ExecutionFlow: (Constructor, Dispose, Finalizer, Method, Delegates, Events, and Scope)


- Data: (Constructor, Dispose, Finalizer, Property, Verbose, and WriteLine)


- Errors: (Error and Exception).



To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as 
"Constructor,Dispose".`, `PSTraceSourceOptions`),
        new Parameter(`PSHost`, `Indicates that the cmdlet sends the trace output to the Windows PowerShell host. This parameter also selects the PSHost trace 
listener.`, `SwitchParameter`),
    ], `Configures and starts a trace of the specified expression or command.`, `Trace-Command [-Name] <String[]> [-Command] <String> [[-Option] {None | Constructor | Dispose | Finalizer | Method | Property | 
Delegates | Events | Exception | Lock | Error | Errors | Warning | Verbose | WriteLine | Data | Scope | ExecutionFlow | Assert | 
All}] [-ArgumentList <Object[]>] [-Debugger] [-FilePath <String>] [-Force] [-InputObject <PSObject>] [-ListenerOption {None | 
LogicalOperationStack | DateTime | Timestamp | ProcessId | ThreadId | Callstack}] [-PSHost] [<CommonParameters>]

Trace-Command [-Name] <String[]> [-Expression] <ScriptBlock> [[-Option] {None | Constructor | Dispose | Finalizer | Method | Property 
| Delegates | Events | Exception | Lock | Error | Errors | Warning | Verbose | WriteLine | Data | Scope | ExecutionFlow | Assert | 
All}] [-Debugger] [-FilePath <String>] [-Force] [-InputObject <PSObject>] [-ListenerOption {None | LogicalOperationStack | DateTime | 
Timestamp | ProcessId | ThreadId | Callstack}] [-PSHost] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unblock-File`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`LiteralPath`, `Specifies the files to unblock. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. No characters 
are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks 
tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Path`, `Specifies the files to unblock. Wildcard characters are supported.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Unblocks files that were downloaded from the Internet.`, `Unblock-File [-Confirm] -LiteralPath <String[]> [-WhatIf] [<CommonParameters>]

Unblock-File [-Path] <String[]> [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unblock-Tpm`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Undo-DtcDiagnosticTransaction`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Undo-Transaction`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Rolls back the active transaction.`, `Undo-Transaction [-Confirm] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Uninstall-Package`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Uninstall-ProvisioningPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Uninstall-TrustedProvisioningCertificate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unprotect-CmsMessage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unpublish-AppvClientPackage`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-Event`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Cancels all event subscriptions, including subscriptions that were hidden by using the SupportEvent parameter of Register-ObjectEvent 
, Register-WmiEvent , and Register-EngineEvent .`, `SwitchParameter`),
        new Parameter(`SourceIdentifier`, `Specifies a source identifier that this cmdlet cancels event subscriptions.


A SourceIdentifier or SubscriptionId parameter must be included in every command.`, `String`),
        new Parameter(`SubscriptionId`, `Specifies a source identifier ID that this cmdlet cancels event subscriptions.


A SourceIdentifier or SubscriptionId parameter must be included in every command.`, `Int32`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Cancels an event subscription.`, `Unregister-Event [-SourceIdentifier] <String> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Unregister-Event [-SubscriptionId] <Int32> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-PackageSource`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-PSSessionConfiguration`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Force`, `Indicates that the cmdlet does not prompt you for confirmation, and restarts the WinRM service without prompting. Restarting the 
service makes the configuration change effective.


To prevent a restart and suppress the restart prompt, use the NoServiceRestart parameter.`, `SwitchParameter`),
        new Parameter(`Name`, `Specifies the names of the session configurations to delete. Enter one session configuration name or a configuration name pattern. 
Wildcard characters are permitted. This parameter is required.


You can also pipe a session configurations to Unregister-PSSessionConfiguration .`, `String`),
        new Parameter(`NoServiceRestart`, `Indicates that this cmdlet does not restart the WinRM service, and suppresses the prompt to restart the service.


By default, when you run an Unregister-PSSessionConfiguration command, you are prompted to restart the WinRM service to make the 
change effective. Until the WinRM service is restarted, users can still use the unregistered session configuration, even though 
Get-PSSessionConfiguration does not find it.


To restart the WinRM service without prompting, specify the Force parameter. To restart the WinRM service manually, use the 
Restart-Service cmdlet.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Deletes registered session configurations from the computer.`, `Unregister-PSSessionConfiguration [-Name] <String> [-Confirm] [-Force] [-NoServiceRestart] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-ScheduledJob`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-UevTemplate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Unregister-WindowsDeveloperLicense`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-FormatData`, [
        new Parameter(`AppendPath`, `Specifies formatting files that this cmdlet adds to the session. The files are loaded after Windows PowerShell loads the built-in 
formatting files.


When formatting .NET objects, Windows PowerShell uses the first formatting definition that it finds for each .NET type. If you use 
the AppendPath parameter, Windows PowerShell searches the data from the built-in files before it encounters the formatting data that 
you are adding.


Use this parameter to add a file that formats a .NET object that is not referenced in the built-in formatting files.`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`PrependPath`, `Specifies formatting files that this cmdlet adds to the session. The files are loaded before Windows PowerShell loads the built-in 
formatting files.


When formatting .NET objects, Windows PowerShell uses the first formatting definition that it finds for each .NET type. If you use 
the PrependPath parameter, Windows PowerShell searches the data from the files that you are adding before it encounters the 
formatting data from the built-in files.


Use this parameter to add a file that formats a .NET object that is also referenced in the built-in formatting files.`, `String[]`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Updates the formatting data in the current session.`, `Update-FormatData [[-AppendPath] <String[]>] [-Confirm] [-PrependPath <String[]>] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-Help`, [
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`Credential`, `Specifies credentials of a user who has permission to access the file system location specified by SourcePath . This parameter is 
valid only when the SourcePath or LiteralPath parameter is used in the command.


This parameter enables you to run Update-Help commands that have SourcePath on remote computers. By providing explicit credentials, 
you can run the command on a remote computer and access a file share on a third computer without encountering an access denied error 
or using CredSSP authentication to delegate credentials.`, `PSCredential`),
        new Parameter(`Force`, `Indicates that this cmdlet does not follow the once-per-day limitation, skips version checking, and downloads files that exceed the 1 
GB limit.


Without this parameter, Update-Help runs only once in each 24-hour period, downloads are limited to 1 GB of uncompressed content per 
module and help files are installed only when they are newer than the files on the computer.


The once-per-day limit protects the servers that host the help files and makes it practical for you to add an Update-Help command to 
your Windows PowerShell profile without incurring the resource cost of repeated connections or downloads.


To update help for a module in multiple UI cultures without the Force parameter, include all UI cultures in the same command, such 
as: "Update-Help -Module PSScheduledJobs -UICulture en-US, fr-FR, pt-BR"`, `SwitchParameter`),
        new Parameter(`FullyQualifiedModule`, `Specifies modules with names that are specified in the form of ModuleSpecification objects. These are described in the Remarks 
section of Module Specification Constructor (Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx 
(http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx) in the Microsoft Developer Network (MSDN). For example, 
the FullyQualifiedModule parameter accepts a module name that is specified in the format @{ModuleName = "modulename"; ModuleVersion = 
"version_number"} or @{ModuleName = "modulename"; ModuleVersion = "version_number"; Guid = "GUID"}. ModuleName and ModuleVersion are 
required, but Guid is optional.


You cannot specify the FullyQualifiedModule parameter in the same command as a Module parameter.`, `ModuleSpecification[]`),
        new Parameter(`LiteralPath`, `Specifies the folder for updated help files instead of downloading them from the Internet. Use this parameter or SourcePath if you 
have used the Save-Help cmdlet to download help files to a directory.


You can also pipe a directory object, such as one from the Get-Item or Get-ChildItem cmdlets, to Update-Help .


Unlike the value of SourcePath , the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcard 
characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows 
PowerShell not to interpret any characters as escape sequences.`, `String[]`),
        new Parameter(`Module`, `Specifies modules for which this cmdlet updates help. Enter one or more module names or name patters in a comma-separated list, or 
specify a file that lists one module name on each line. Wildcard characters are permitted. You can also pipe modules from the 
Get-Module cmdlet, to the Update-Help cmdlet.


The modules that you specify must be installed on the computer, but they do not have to be imported into the current session. You can 
specify any module in the session or any module that is installed in a location listed in the PSModulePath environment variable.


A value of * (all) attempts to update help for all modules that are installed on the computer. This includes modules that do not 
support Updatable Help. This value might generate errors when the command encounters modules that do not support Updatable Help. 
Instead, run Update-Help without parameters.


The Module parameter of the Update-Help cmdlet does not accept the full path of a module file or module manifest file. To update help 
for a module that is not in a PSModulePath location, import the module into the current session before you run the Update-Help 
command.`, `String[]`),
        new Parameter(`Recurse`, `Searches recursively for help files in the specified directory. This parameter is valid only when SourcePath is used in the command.`, `SwitchParameter`),
        new Parameter(`SourcePath`, `Specifies a file system folder from which this cmdlet gets updated help files, instead of downloading them from the Internet. Enter 
the path of a folder. Do not specify a file name or file name extension. You can also pipe a folder, such as one from the Get-Item or 
Get-ChildItem cmdlets, to Update-Help .


By default, Update-Help downloads updated help files from the Internet. Use this parameter when you have used the Save-Help cmdlet to 
download updated help files to a directory.


Administrators can use the Set the default source path for Update-Help Group Policy setting under Computer Configuration to specify a 
default value for SourcePath . This Group Policy setting prevents users from using Update-Help to download help files from the 
Internet. For more information, see about_Group_Policy_Settings (http://go.microsoft.com/fwlink/?LinkId=251696).`, `String[]`),
        new Parameter(`UICulture`, `Specifies UI culture values for which this cmdlet gets updated help files. Enter one or more language codes, such as es-ES, a 
variable that contains culture objects, or a command that gets culture objects, such as a Get-Culture or Get-UICulture command. 
Wildcard characters are not permitted and you cannot submit a partial language code, such as "de".


By default, Update-Help gets help files in the UI culture set for Windows or its fallback culture. If you specify the UICulture 
parameter, Update-Help looks for help only for the specified UI culture, not in any fallback culture.


Commands that use the UICulture parameter succeed only when the module provides help files for the specified UI culture. If the 
command fails because the specified UI culture is not supported, the error message includes a list of UI cultures that the module 
supports.`, `CultureInfo[]`),
        new Parameter(`UseDefaultCredentials`, `Indicates that this cmdlet runs the command, including the Internet download, by using the credentials of the current user. By 
default, the command runs without explicit credentials.


This parameter is effective only when the Web download uses NTLM, negotiate, or Kerberos-based authentication.`, `SwitchParameter`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Downloads and installs the newest help files on your computer.`, `Update-Help [[-Module] <String[]>] [[-UICulture] <CultureInfo[]>] [-Confirm] [-Credential <PSCredential>] [-Force] 
[-FullyQualifiedModule <ModuleSpecification[]>] [-LiteralPath <String[]>] [-Recurse] [-UseDefaultCredentials] [-WhatIf] 
[<CommonParameters>]

Update-Help [[-Module] <String[]>] [[-SourcePath] <String[]>] [[-UICulture] <CultureInfo[]>] [-Confirm] [-Credential <PSCredential>] 
[-Force] [-FullyQualifiedModule <ModuleSpecification[]>] [-Recurse] [-UseDefaultCredentials] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-List`, [
        new Parameter(`Add`, `Specifies the property values to be added to the collection. Enter the values in the order that they should appear in the collection.`, `Object[]`),
        new Parameter(`InputObject`, `Specifies the objects to be updated. You can also pipe the object to be updated to Update-List .`, `PSObject`),
        new Parameter(`Property`, `Specifies the property that contains the collection that is being updated. If you omit this parameter, Update-List returns an object 
that represents the change instead of changing the object.`, `String`),
        new Parameter(`Remove`, `Specifies the property values to be removed from the collection.`, `Object[]`),
        new Parameter(`Replace`, `Specifies a new collection. This parameter replaces all items in the original collection with the items specified by this parameter.`, `Object[]`),
    ], `Adds items to and removes items from a property value that contains a collection of objects.`, `Update-List [[-Property] <String>] [-Add <Object[]>] [-InputObject <PSObject>] [-Remove <Object[]>] [<CommonParameters>]

Update-List [[-Property] <String>] [-InputObject <PSObject>] -Replace <Object[]> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-TypeData`, [
        new Parameter(`AppendPath`, `Specifies the path to optional .ps1xml files. The specified files are loaded in the order that they are listed after the built-in 
files are loaded. You can also pipe an AppendPath value to Update-TypeData .`, `String[]`),
        new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
        new Parameter(`DefaultDisplayProperty`, `Specifies the property of the type that is displayed by the Format-Wide cmdlet when no other properties are specified.


Type the name of a standard or extended property of the type. The value of this parameter can be the name of a type that is added in 
the same command.


This value is effective only when there are no wide views defined for the type in a Format.ps1xml file.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`DefaultDisplayPropertySet`, `Specifies one or more properties of the type. These properties are displayed by the Format-List cmdlet when no other properties are 
specified.


Type the names of standard or extended properties of the type. The value of this parameter can be the names of types that are added 
in the same command.


This value is effective only when there are no list views defined for the type in a Format.ps1xml file.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
        new Parameter(`DefaultKeyPropertySet`, `Specifies one or more properties of the type. These properties are used by the Group-Object and Sort-Object cmdlets when no other 
properties are specified.


Type the names of standard or extended properties of the type. The value of this parameter can be the names of types that are added 
in the same command.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
        new Parameter(`Force`, `Indicates that the cmdlet uses the specified type data, even if type data has already been specified for that type.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`InheritPropertySerializationSet`, `Indicates whether the set of properties that are serialized is inherited. The default value is $Null. The acceptable values for this 
parameter are:


- $True. The property set is inherited. - $False. The property set is not inherited. - $Null. Inheritance is not defined.


This parameter is valid only when the value of the SerializationMethod parameter is SpecificProperties. When the value of this 
parameter is $False, the PropertySerializationSet parameter is required.


This parameter was introduced in Windows PowerShell 3.0.`, `Boolean`),
        new Parameter(`MemberName`, `Specifies the name of a property or method.


Use this parameter with the TypeName , MemberType , Value and SecondValue parameters to add or change a property or method of a type.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`MemberType`, `Specifies the type of the member to add or change.


Use this parameter with the TypeName , MemberType , Value and SecondValue parameters to add or change a property or method of a type. 
The acceptable values for this parameter are:


- AliasProperty


- CodeMethod


- CodeProperty


- Noteproperty


- ScriptMethod


- ScriptProperty




For information about these values, see PSMemberTypes 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.psmembertypes(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.psmembertypes(v=vs.85).aspx) in MSDN.

This parameter was introduced in Windows PowerShell 3.0.`, `PSMemberTypes`),
        new Parameter(`PrependPath`, `Specifies the path to the optional .ps1xml files. The specified files are loaded in the order that they are listed before the 
built-in files are loaded.`, `String[]`),
        new Parameter(`PropertySerializationSet`, `Specifies the names of properties that are serialized. Use this parameter when the value of the SerializationMethod parameter is 
SpecificProperties .`, `String[]`),
        new Parameter(`SecondValue`, `Specifies additional values for AliasProperty , ScriptProperty , CodeProperty , or CodeMethod members.


Use this parameter with the TypeName , MemberType , Value , and SecondValue parameters to add or change a property or method of a 
type.


When the value of the MemberType parameter is AliasProperty, the value of the SecondValue parameter must be a data type. Windows 
PowerShell converts (that is, casts) the value of the alias property to the specified type. For example, if you add an alias property 
that provides an alternate name for a string property, you can also specify a SecondValue of System.Int32 to convert the aliased 
string value to an integer.


When the value of the MemberType parameter is ScriptProperty, you can use the SecondValue parameter to specify an additional script 
block. The script block in the value of the Value parameter gets the value of a variable. The script block in the value of the 
SecondValue parameter set the value of the variable.


This parameter was introduced in Windows PowerShell 3.0.`, `Object`),
        new Parameter(`SerializationDepth`, `Specifies how many levels of type objects are serialized as strings. The default value, 1, serializes the object and its properties. 
A value of 0 serializes the object, but not its properties. A value of 2 serializes the object, its properties, and any objects in 
property values.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
        new Parameter(`SerializationMethod`, `Specifies a serialization method for the type. A serialization method determines which properties of the type are serialized and the 
technique that is used to serialize them. The acceptable values for this parameter are:


- AllPublicProperties. Serialize all public properties of the type. You can use the SerializationDepth parameter to determine whether 
child properties are serialized.  - String. Serialize the type as a string. You can use the StringSerializationSource to specify a 
property of the type to use as the serialization result. Otherwise, the type is serialized by using the ToString method of the 
object.  - SpecificProperties. Serialize only the specified properties of this type. Use the PropertySerializationSet parameter to 
specify the properties of the type that are serialized. You can also use the InheritPropertySerializationSet parameter to determine 
whether the property set is inherited and the SerializationDepth parameter to determine whether child properties are serialized.


In Windows PowerShell, serialization methods are stored in PSStandardMembers internal objects.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`StringSerializationSource`, `Specifies the name of a property of the type. The value of specified property is used as the serialization result. This parameter is 
valid only when the value of the SerializationMethod parameter is String.`, `String`),
        new Parameter(`TargetTypeForDeserialization`, `Specifies the type to which object of this type are converted when they are deserialized.


This parameter was introduced in Windows PowerShell 3.0.`, `Type`),
        new Parameter(`TypeAdapter`, `Specifies the type of a type adapter, such as Microsoft.PowerShell.Cim.CimInstanceAdapter . A type adapter enables Windows PowerShell 
to get the members of a type.


This parameter was introduced in Windows PowerShell 3.0.`, `Type`),
        new Parameter(`TypeConverter`, `Specifies a type converter to convert values between different types. If a type converter is defined for a type, an instance of the 
type converter is used for the conversion.


Enter a System.Type value that is derived from the System.ComponentModel.TypeConverter or 
System.Management.Automation.PSTypeConverter classes.


This parameter was introduced in Windows PowerShell 3.0.`, `Type`),
        new Parameter(`TypeData`, `Specifies an array of type data that this cmdlet adds to the session. Enter a variable that contains a TypeData object or a command 
that gets a TypeData object, such as a Get-TypeData command. You can also pipe a TypeData object to Update-TypeData .


This parameter was introduced in Windows PowerShell 3.0.`, `TypeData[]`),
        new Parameter(`TypeName`, `Specifies the name of the type to extend.


For types in the System namespace, enter the short name. Otherwise, the full type name is required. Wildcards are not supported.


You can pipe type names to Update-TypeData . When you pipe an object to Update-TypeData , Update-TypeData gets the type name of the 
object and type data to the object type.


Use this parameter with the MemberName , MemberType , Value and SecondValue parameters to add or change a property or method of a 
type.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`Value`, `Specifies the value of the property or method.


If you add an AliasProperty, CodeProperty, ScriptProperty, or CodeMethod member, you can use the SecondValue parameter to add 
additional information.


Use this parameter with the MemberName , MemberType , Value and SecondValue parameters to add or change a property or method of a 
type.


This parameter was introduced in Windows PowerShell 3.0.`, `Object`),
        new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
    ], `Updates the extended type data in the session.`, `Update-TypeData [[-AppendPath] <String[]>] [-Confirm] [-PrependPath <String[]>] [-WhatIf] [<CommonParameters>]

Update-TypeData [-Confirm] [-DefaultDisplayProperty <String>] [-DefaultDisplayPropertySet <String[]>] [-DefaultKeyPropertySet 
<String[]>] [-Force] [-InheritPropertySerializationSet <Boolean>] [-MemberName <String>] [-MemberType {NoteProperty | AliasProperty | 
ScriptProperty | CodeProperty | ScriptMethod | CodeMethod}] [-PropertySerializationSet <String[]>] [-SecondValue <Object>] 
[-SerializationDepth <Int32>] [-SerializationMethod <String>] [-StringSerializationSource <String>] [-TargetTypeForDeserialization 
<Type>] [-TypeAdapter <Type>] [-TypeConverter <Type>] -TypeName <String> [-Value <Object>] [-WhatIf] [<CommonParameters>]

Update-TypeData [-TypeData] <TypeData[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-UevTemplate`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Update-WIMBootEntry`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Use-Transaction`, [
        new Parameter(`TransactedScript`, `Specifies the script block that is run in the transaction. Enter any valid script block enclosed in braces ( { } ). This parameter is 
required.`, `ScriptBlock`),
        new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more information, 
see Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For more 
information, see`, `SwitchParameter`),
    ], `Adds the script block to the active transaction.`, `Use-Transaction [-TransactedScript] <ScriptBlock> [-UseTransaction] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Use-WindowsUnattend`, [], `See help file for details.`, ``, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Wait-Debugger`, [], `Stops a script in the debugger before running the next statement in the script.`, `Wait-Debugger [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Wait-Event`, [
        new Parameter(`SourceIdentifier`, `Specifies the source identifier that this cmdlet waits for events. By default, Wait-Event waits for any event.`, `String`),
        new Parameter(`Timeout`, `Specifies the maximum time, in seconds, that Wait-Event waits for the event to occur. The default, -1, waits indefinitely. The timing 
starts when you submit the Wait-Event command.


If the specified time is exceeded, the wait ends and the command prompt returns, even if the event has not been raised. No error 
message is displayed.`, `Int32`),
    ], `Waits until a particular event is raised before continuing to run.`, `Wait-Event [[-SourceIdentifier] <String>] [-Timeout <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Wait-Job`, [
        new Parameter(`Any`, `Indicates that this cmdlet displays the command prompt, and returns the job object, when any job finishes. By default, Wait-Job waits 
until all of the specified jobs are complete before it displays the prompt.`, `SwitchParameter`),
        new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet waits for jobs that satisfy all of the conditions in the hash table. Enter a hash 
table where the keys are job properties and the values are job property values.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs. It does not work on standard background 
jobs, such as those created by using the Start-Job cmdlet. For information about support for this parameter, see the help topic for 
the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Hashtable`),
        new Parameter(`Force`, `Indicates that this cmdlet continues to wait for jobs in the Suspended or Disconnected state. By default, Wait-Job returns, or ends  
the wait, when jobs are in one of the following states:


- Completed


- Failed


- Stopped


- Suspended


- Disconnected




This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Id`, `Specifies an array of IDs of jobs for which this cmdlet waits.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and type than the instance ID, 
but it is unique only in the current session. You can type one or more IDs, separated by commas. To find the ID of a job, type 
"Get-Job".`, `Int32[]`),
        new Parameter(`InstanceId`, `Specifies an array of instance IDs of jobs for which this cmdlet waits. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use Get-Job .`, `Guid[]`),
        new Parameter(`Job`, `Specifies the jobs for which this cmdlet waits. Enter a variable that contains the job objects or a command that gets the job 
objects. You can also use a pipeline operator to send job objects to the Wait-Job cmdlet. By default, Wait-Job waits for all jobs 
created in the current session.`, `Job[]`),
        new Parameter(`Name`, `Specifies friendly names of jobs for which this cmdlet waits.`, `String[]`),
        new Parameter(`State`, `Specifies a job state. This cmdlet waits only for jobs in the specified state. The acceptable values for this parameter are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx) in the Microsoft 
Developer Network (MSDN).`, `JobState`),
        new Parameter(`Timeout`, `Specifies the maximum wait time for each background job, in seconds. The default value, -1, indicates that the cmdlet waits until the 
job finishes.  The timing starts when you submit the Wait-Job command, not the Start-Job command.


If this time is exceeded, the wait ends and the command prompt returns, even if the job is still running. The command does not 
display any error message.`, `Int32`),
    ], `Suppresses the command prompt until one or all of the Windows PowerShell background jobs running in the session are completed.`, `Wait-Job [-Filter] <Hashtable> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-Id] <Int32[]> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-InstanceId] <Guid[]> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-Job] <Job[]> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-Name] <String[]> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | 
AtBreakpoint} [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Wait-Process`, [
        new Parameter(`Id`, `Specifies the process IDs of the processes. To specify multiple IDs, use commas to separate the IDs. To find the PID of a process, 
type "Get-Process".`, `Int32[]`),
        new Parameter(`InputObject`, `Specifies the processes by submitting process objects. Enter a variable that contains the process objects, or type a command or 
expression that gets the process objects, such as the Get-Process cmdlet.`, `Process[]`),
        new Parameter(`Name`, `Specifies the process names of the processes. To specify multiple names, use commas to separate the names. Wildcard characters are 
not supported.`, `String[]`),
        new Parameter(`Timeout`, `Specifies the maximum time, in seconds, that this cmdlet waits for the specified processes to stop. When this interval expires, the 
command displays a non-terminating error that lists the processes that are still running, and ends the wait. By default, there is no 
time-out.`, `Int32`),
    ], `Waits for the processes to be stopped before accepting more input.`, `Wait-Process [-Id] <Int32[]> [[-Timeout] <Int32>] [<CommonParameters>]

Wait-Process [[-Timeout] <Int32>] -InputObject <Process[]> [<CommonParameters>]

Wait-Process [-Name] <String[]> [[-Timeout] <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Where-Object`, [
        new Parameter(`CContains`, `Indicates that this cmdlet gets objects from a collection if the property value of the object is an exact match for the specified 
value. This operation is case-sensitive.


For example: "Get-Process | where ProcessName -CContains "svchost"" CContains refers to a collection of values and is true if the 
collection contains an item that is an exact match for the specified value. If the input is a single object, Windows PowerShell 
converts it to a collection of one object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CEQ`, `Indicates that this cmdlet gets objects if the property value is the same as the specified value. This operation is case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CGE`, `Indicates that this cmdlet gets objects if the property value is greater than or equal to the specified value. This operation is 
case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CGT`, `Indicates that this cmdlet gets objects if the property value is greater than the specified value. This operation is case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CIn`, `Indicates that this cmdlet gets objects if the property value includes the specified value. This operation is case-sensitive.


For example: "Get-Process | where -Value "svchost" -CIn ProcessName" CIn resembles CContains , except that the property and value 
positions are reversed. For example, the following statements are both true.


"abc", "def" -CContains "abc"


"abc" -CIn "abc", "def"


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CLE`, `Indicates that this cmdlet gets objects if the property value is less-than or equal to the specified value. This operation is 
case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CLT`, `Indicates that this cmdlet gets objects if the property value is less-than the specified value. This operation is case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CLike`, `Indicates that this cmdlet gets objects if the property value matches a value that includes wildcard characters. This operation is 
case-sensitive.


For example: "Get-Process | where ProcessName -CLike "*host""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CMatch`, `Indicates that this cmdlet gets objects if the property value matches the specified regular expression. This operation is 
case-sensitive. When the input is scalar, the matched value is saved in $Matches automatic variable.


For example: "Get-Process | where ProcessName -CMatch "Shell""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CNE`, `Indicates that this cmdlet gets objects if the property value is different than the specified value. This operation is case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CNotContains`, `Indicates that this cmdlet gets objects if the property value of the object is not an exact match for the specified value. This 
operation is case-sensitive.


For example: "Get-Process | where ProcessName -CNotContains "svchost""


"NotContains" and "CNotContains refer to a collection of values and are true when the collection does not contains any items that are 
an exact match for the specified value. If the input is a single object, Windows PowerShell converts it to a collection of one object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CNotIn`, `Indicates that this cmdlet gets objects if the property value is not an exact match for the specified value. This operation is 
case-sensitive.


For example: "Get-Process | where -Value "svchost" -CNotIn -Property ProcessName" NotIn and CNotIn operators resemble NotContains and 
CNotContains , except that the property and value positions are reversed. For example, the following statements are true.


"abc", "def" -CNotContains "Abc"


"abc" -CNotIn "Abc", "def"`, `SwitchParameter`),
        new Parameter(`CNotLike`, `Indicates that this cmdlet gets objects if the property value does not match a value that includes wildcard characters. This 
operation is case-sensitive.


For example: "Get-Process | where ProcessName -CNotLike "*host""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`CNotMatch`, `Indicates that this cmdlet gets objects if the property value does not match the specified regular expression. This operation is 
case-sensitive. When the input is scalar, the matched value is saved in $Matches automatic variable.


For example: "Get-Process | where ProcessName -CNotMatch "Shell""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Contains`, `Indicates that this cmdlet gets objects if any item in the property value of the object is an exact match for the specified value.


For example: "Get-Process | where ProcessName -Contains "Svchost""


If the property value contains a single object, Windows PowerShell converts it to a collection of one object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`EQ`, `Indicates that this cmdlet gets objects if the property value is the same as the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`FilterScript`, `Specifies the script block that is used to filter the objects. Enclose the script block in braces ( {} ).


The parameter name, FilterScript , is optional.`, `ScriptBlock`),
        new Parameter(`GE`, `Indicates that this cmdlet gets objects if the property value is greater than or equal to the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`GT`, `Indicates that this cmdlet gets objects if the property value is greater than the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`In`, `Indicates that this cmdlet gets objects if the property value matches any of the specified values.


For example: "Get-Process | where -Property ProcessName -in -Value "Svchost", "TaskHost", "WsmProvHost""


If the value of the Value parameter is a single object, Windows PowerShell converts it to a collection of one object.


If the property value of an object is an array, Windows PowerShell uses reference equality to determine a match. Where-Object returns 
the object only if the value of the Property parameter and any value of Value are the same instance of an object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`InputObject`, `Specifies the objects to be filtered. You can also pipe the objects to Where-Object .


When you use the InputObject parameter with Where-Object , instead of piping command results to Where-Object , the InputObject value 
is treated as a single object. This is true even if the value is a collection that is the result of a command, such as "-InputObject 
(Get-Process)". Because InputObject cannot return individual properties from an array or collection of objects, we recommend that, if 
you use Where-Object to filter a collection of objects for those objects that have specific values in defined properties, you use 
Where-Object in the pipeline, as shown in the examples in this topic.`, `PSObject`),
        new Parameter(`Is`, `Indicates that this cmdlet gets objects if the property value is an instance of the specified .NET Framework type. Enclose the type 
name in square brackets.


For example, "Get-Process | where StartTime -Is [DateTime]"


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`IsNot`, `Indicates that this cmdlet gets objects if the property value is not an instance of the specified .NET Framework type.


For example, "Get-Process | where StartTime -IsNot [System.String]"


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`LE`, `Indicates that this cmdlet gets objects if the property value is less than or equal to the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`LT`, `Indicates that this cmdlet gets objects if the property value is less than the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Like`, `Indicates that this cmdlet gets objects if the property value matches a value that includes wildcard characters.


For example: "Get-Process | where ProcessName -Like "*host""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Match`, `Indicates that this cmdlet gets objects if the property value matches the specified regular expression. When the input is scalar, the 
matched value is saved in $Matches automatic variable.


For example: "Get-Process | where ProcessName -Match "shell""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`NE`, `Indicates that this cmdlet gets objects if the property value is different than the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`NotContains`, `Indicates that this cmdlet gets objects if none of the items in the property value is an exact match for the specified value.


For example: "Get-Process | where ProcessName -NotContains "Svchost"" NotContains refers to a collection of values and is true if the 
collection does not contain any items that are an exact match for the specified value. If the input is a single object, Windows 
PowerShell converts it to a collection of one object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`NotIn`, `Indicates that this cmdlet gets objects if the property value is not an exact match for any of the specified values.


For example: "Get-Process | where -Value "svchost" -NotIn -Property ProcessName"


If the value of Value is a single object, Windows PowerShell converts it to a collection of one object.


If the property value of an object is an array, Windows PowerShell uses reference equality to determine a match. Where-Object returns 
the object only if the value of Property and any value of Value are not the same instance of an object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`NotLike`, `Indicates that this cmdlet gets objects if the property value does not match a value that includes wildcard characters.


For example: "Get-Process | where ProcessName -NotLike "*host""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`NotMatch`, `Indicates that this cmdlet gets objects when the property value does not match the specified regular expression. When the input is 
scalar, the matched value is saved in $Matches automatic variable.


For example: "Get-Process | where ProcessName -NotMatch "PowerShell""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        new Parameter(`Property`, `Specifies the name of an object property.


The parameter name, Property , is optional.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        new Parameter(`Value`, `Specifies a property value.


The parameter name, Value , is optional.


This parameter was introduced in Windows PowerShell 3.0.`, `Object`),
    ], `Selects objects from a collection based on their property values.`, `Where-Object [-Property] <String> [[-Value] <Object>] -CContains [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CEQ [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CGE [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CGT [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CIn [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CLE [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CLT [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CLike [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CMatch [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNE [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNotContains [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNotIn [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNotLike [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNotMatch [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -Contains [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-EQ] [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-FilterScript] <ScriptBlock> [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -GE [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -GT [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -In [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -Is [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -IsNot [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -LE [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -LT [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -Like [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -Match [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NE [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NotContains [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NotIn [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NotLike [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NotMatch [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-Debug`, [
        new Parameter(`Message`, `Specifies the debug message to send to the console.`, `String`),
    ], `Writes a debug message to the console.`, `Write-Debug [-Message] <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-Error`, [
        new Parameter(`Category`, `Specifies the category of the error. The default value is NotSpecified. The acceptable values for this parameter are:


- NotSpecified


- OpenError


- CloseError


- DeviceError


- DeadlockDetected


- InvalidArgument


- InvalidData


- InvalidOperation


- InvalidResult


- InvalidType


- MetadataError


- NotImplemented


- NotInstalled


- ObjectNotFound


- OperationStopped


- OperationTimeout


- SyntaxError


- ParserError


- PermissionDenied


- ResourceBusy


- ResourceExists


- ResourceUnavailable


- ReadError


- WriteError


- FromStdErr


- SecurityError


- ProtocolError


- ConnectionError


- AuthenticationError


- LimitsExceeded


- QuotaExceeded


- NotEnabled




For information about the error categories, see ErrorCategory Enumerationhttp://go.microsoft.com/fwlink/?LinkId=143600 
(http://go.microsoft.com/fwlink/?LinkId=143600) in MSDN.`, `ErrorCategory`),
        new Parameter(`CategoryActivity`, `Specifies the action that caused the error.`, `String`),
        new Parameter(`CategoryReason`, `Specifies how or why the activity caused the error.`, `String`),
        new Parameter(`CategoryTargetName`, `Specifies the name of the object that was being processed when the error occurred.`, `String`),
        new Parameter(`CategoryTargetType`, `Specifies the type of the object that was being processed when the error occurred.`, `String`),
        new Parameter(`ErrorId`, `Specifies an ID string to identify the error. The string should be unique to the error.`, `String`),
        new Parameter(`ErrorRecord`, `Specifies an error record object that represents the error. Use the properties of the object to describe the error.


To create an error record object, use the New-Object cmdlet or get an error record object from the array in the $Error automatic 
variable.`, `ErrorRecord`),
        new Parameter(`Exception`, `Specifies an exception object that represents the error. Use the properties of the object to describe the error.


To create an exception object, use a hash table or use the New-Object cmdlet.`, `Exception`),
        new Parameter(`Message`, `Specifies the message text of the error. If the text includes spaces or special characters, enclose it in quotation marks. You can 
also pipe a message string to Write-Error .`, `String`),
        new Parameter(`RecommendedAction`, `Specifies the action that the user should take to resolve or prevent the error.`, `String`),
        new Parameter(`TargetObject`, `Specifies the object that was being processed when the error occurred. Enter the object, a variable that contains the object, or a 
command that gets the object.`, `Object`),
    ], `Writes an object to the error stream.`, `Write-Error [-Category {NotSpecified | OpenError | CloseError | DeviceError | DeadlockDetected | InvalidArgument | InvalidData | 
InvalidOperation | InvalidResult | InvalidType | MetadataError | NotImplemented | NotInstalled | ObjectNotFound | OperationStopped | 
OperationTimeout | SyntaxError | ParserError | PermissionDenied | ResourceBusy | ResourceExists | ResourceUnavailable | ReadError | 
WriteError | FromStdErr | SecurityError | ProtocolError | ConnectionError | AuthenticationError | LimitsExceeded | QuotaExceeded | 
NotEnabled}] [-CategoryActivity <String>] [-CategoryReason <String>] [-CategoryTargetName <String>] [-CategoryTargetType <String>] 
[-ErrorId <String>] -Message <String> [-RecommendedAction <String>] [-TargetObject <Object>] [<CommonParameters>]

Write-Error [-Category {NotSpecified | OpenError | CloseError | DeviceError | DeadlockDetected | InvalidArgument | InvalidData | 
InvalidOperation | InvalidResult | InvalidType | MetadataError | NotImplemented | NotInstalled | ObjectNotFound | OperationStopped | 
OperationTimeout | SyntaxError | ParserError | PermissionDenied | ResourceBusy | ResourceExists | ResourceUnavailable | ReadError | 
WriteError | FromStdErr | SecurityError | ProtocolError | ConnectionError | AuthenticationError | LimitsExceeded | QuotaExceeded | 
NotEnabled}] [-CategoryActivity <String>] [-CategoryReason <String>] [-CategoryTargetName <String>] [-CategoryTargetType <String>] 
[-ErrorId <String>] -Exception <Exception> [-Message <String>] [-RecommendedAction <String>] [-TargetObject <Object>] 
[<CommonParameters>]

Write-Error [-CategoryActivity <String>] [-CategoryReason <String>] [-CategoryTargetName <String>] [-CategoryTargetType <String>] 
-ErrorRecord <ErrorRecord> [-RecommendedAction <String>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-EventLog`, [
        new Parameter(`Category`, `Specifies a task category for the event. Enter an integer that is associated with the strings in the category message file for the 
event log.`, `Int16`),
        new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of the Get-EventLog cmdlet even 
if your computer is not configured to run remote commands.`, `String`),
        new Parameter(`EntryType`, `Specifies the entry type of the event. The acceptable values for this parameter are: Error, Warning, Information, SuccessAudit, and 
FailureAudit. The default value is Information.


For a description of the values, see System.Diagnostics.EventLogEntryTypehttp://go.microsoft.com/fwlink/?LinkId=143599 
(http://go.microsoft.com/fwlink/?LinkId=143599) in the Microsoft Developer Network (MSDN) library.`, `EventLogEntryType`),
        new Parameter(`EventId`, `Specifies the event identifier. This parameter is required. The maximum value for the EventId parameter is 65535.`, `Int32`),
        new Parameter(`LogName`, `Specifies the name of the log to which the event is written. Enter the log name. The log name is the value of the Log property, not 
the LogDisplayName . Wildcard characters are not permitted. This parameter is required.`, `String`),
        new Parameter(`Message`, `Specifies the event message. This parameter is required.`, `String`),
        new Parameter(`RawData`, `Specifies the binary data that is associated with the event, in bytes.`, `Byte[]`),
        new Parameter(`Source`, `Specifies the event source, which is typically the name of the application that is writing the event to the log.`, `String`),
    ], `Writes an event to an event log.`, `Write-EventLog [-LogName] <String> [-Source] <String> [-EventId] <Int32> [[-EntryType] {Error | Information | FailureAudit | 
SuccessAudit | Warning}] [-Message] <String> [-Category <Int16>] [-ComputerName <String>] [-RawData <Byte[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-Host`, [
        new Parameter(`BackgroundColor`, `Specifies the background color. There is no default. The acceptable values for this parameter are:


- Black


- DarkBlue


- DarkGreen


- DarkCyan


- DarkRed


- DarkMagenta


- DarkYellow


- Gray


- DarkGray


- Blue


- Green


- Cyan


- Red


- Magenta


- Yellow


- White`, `ConsoleColor`),
        new Parameter(`ForegroundColor`, `Specifies the text color. There is no default. The acceptable values for this parameter are:


- Black


- DarkBlue


- DarkGreen


- DarkCyan


- DarkRed


- DarkMagenta


- DarkYellow


- Gray


- DarkGray


- Blue


- Green


- Cyan


- Red


- Magenta


- Yellow


- White`, `ConsoleColor`),
        new Parameter(`NoNewline`, `Specifies that the content displayed in the console does not end with a newline character.`, `SwitchParameter`),
        new Parameter(`Object`, `Specifies objects to display in the console.`, `Object`),
        new Parameter(`Separator`, `Specifies a separator string to the output between objects displayed on the console.`, `Object`),
    ], `Writes customized output to a host.`, `Write-Host [[-Object] <Object>] [-BackgroundColor {Black | DarkBlue | DarkGreen | DarkCyan | DarkRed | DarkMagenta | DarkYellow | 
Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-ForegroundColor {Black | DarkBlue | DarkGreen | DarkCyan | 
DarkRed | DarkMagenta | DarkYellow | Gray | DarkGray | Blue | Green | Cyan | Red | Magenta | Yellow | White}] [-NoNewline] 
[-Separator <Object>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-Information`, [
        new Parameter(`MessageData`, `Specifies an informational message that you want to display to users as they run a script or command. For best results, enclose the 
informational message in quotation marks. An example is "Test complete."`, `Object`),
        new Parameter(`Tags`, `Specifies a simple string that you can use to sort and filter messages that you have added to the information stream with 
Write-Information . This parameter works similarly to the Tags parameter in New-ModuleManifest.`, `String[]`),
    ], `Specifies how Windows PowerShell handles information stream data for a command.`, `Write-Information [-MessageData] <Object> [[-Tags] <String[]>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-Output`, [
        new Parameter(`InputObject`, `Specifies the objects to send down the pipeline. Enter a variable that contains the objects, or type a command or expression that 
gets the objects.`, `PSObject[]`),
        new Parameter(`NoEnumerate`, `By default, the Write-Output cmdlet always enumerates its output. The NoEnumerate parameter suppresses the default behavior, and 
prevents Write-Output from enumerating output. The NoEnumerate parameter has no effect on collections that were created by wrapping 
commands in parentheses, because the parentheses force enumeration.`, `SwitchParameter`),
    ], `Sends the specified objects to the next command in the pipeline. If the command is the last command in the pipeline, the objects are displayed in the console.`, `Write-Output [-InputObject] <PSObject[]> [-NoEnumerate] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-Progress`, [
        new Parameter(`Activity`, `Specifies the first line of text in the heading above the status bar. This text describes the activity whose progress is being 
reported.`, `String`),
        new Parameter(`Completed`, `Indicates whether the progress bar is visible. If this parameter is omitted, Write-Progress displays progress information.`, `SwitchParameter`),
        new Parameter(`CurrentOperation`, `Specifies the line of text below the progress bar. This text describes the operation that is currently taking place.`, `String`),
        new Parameter(`Id`, `Specifies an ID that distinguishes each progress bar from the others. Use this parameter when you are creating more than one progress 
bar in a single command. If the progress bars do not have different IDs, they are superimposed instead of being displayed in a series.`, `Int32`),
        new Parameter(`ParentId`, `Specifies the parent activity of the current activity. Use the value -1 if the current activity has no parent activity.`, `Int32`),
        new Parameter(`PercentComplete`, `Specifies the percentage of the activity that is completed. Use the value -1 if the percentage complete is unknown or not applicable.`, `Int32`),
        new Parameter(`SecondsRemaining`, `Specifies the projected number of seconds remaining until the activity is completed. Use the value -1 if the number of seconds 
remaining is unknown or not applicable.`, `Int32`),
        new Parameter(`SourceId`, `Specifies the source of the record.`, `Int32`),
        new Parameter(`Status`, `Specifies the second line of text in the heading above the status bar. This text describes current state of the activity.`, `String`),
    ], `Displays a progress bar within a Windows PowerShell command window.`, `Write-Progress [-Activity] <String> [[-Status] <String>] [[-Id] <Int32>] [-Completed] [-CurrentOperation <String>] [-ParentId 
<Int32>] [-PercentComplete <Int32>] [-SecondsRemaining <Int32>] [-SourceId <Int32>] [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-Verbose`, [
        new Parameter(`Message`, `Specifies the message to display. This parameter is required. You can also pipe a message string to Write-Verbose .`, `String`),
    ], `Writes text to the verbose message stream.`, `Write-Verbose [-Message] <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
    new ConsoleCommand(`Write-Warning`, [
        new Parameter(`Message`, `Specifies the warning message.`, `String`),
    ], `Writes a warning message.`, `Write-Warning [-Message] <String> [<CommonParameters>]`, "", (parameters, paramDictionary) => {
    }),
];
export const WinPSCommands = commands;
//# sourceMappingURL=WinPSCommands.js.map