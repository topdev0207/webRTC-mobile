import { ConsoleCommand } from "../Models/ConsoleCommand.js"
import { Parameter } from "../Models/Parameter.js";

var commands: Array<ConsoleCommand> = [
    new ConsoleCommand(
        `Add-BCDataCacheExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-BitLockerKeyProtector`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-DnsClientNrptRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-DtcClusterTMMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-EtwTraceProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-InitiatorIdToMaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-MpPreference`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetEventNetworkAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetEventPacketCaptureProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetEventProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetEventVFPProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetEventVmNetworkAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetEventVmSwitch`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetEventVmSwitchProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetEventWFPCaptureProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetIPHttpsCertBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetLbfoTeamMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetLbfoTeamNic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetNatExternalAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetNatStaticMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-NetSwitchTeamMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-OdbcDsn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-PartitionAccessPath`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-PhysicalDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-Printer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-PrinterDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-PrinterPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-StorageFaultDomain`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-TargetPortToMaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-VirtualDiskToMaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-VpnConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-VpnConnectionRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-VpnConnectionTriggerApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-VpnConnectionTriggerDnsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-VpnConnectionTriggerTrustedNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `AfterAll`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `AfterEach`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Assert-MockCalled`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Assert-VerifiableMocks`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Backup-BitLockerKeyProtector`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `BackupToAAD-BitLockerKeyProtector`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `BeforeAll`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `BeforeEach`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Block-FileShareAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Block-SmbShareAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-AssignedAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-BCCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-BitLockerAutoUnlock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-Disk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-DnsClientCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-FileStorageTier`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-PcsvDeviceLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-StorageDiagnosticInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Close-SmbOpenFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Close-SmbSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Compress-Archive`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Configuration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Connect-IscsiTarget`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Connect-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Context`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertFrom-SddlString`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-NetFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-NetIPsecMainModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-NetIPsecMainModeRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-NetIPsecPhase1AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-NetIPsecPhase2AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-NetIPsecQuickModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Debug-FileShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Debug-MMAppPrelaunch`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Debug-StorageSubSystem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Debug-Volume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Describe`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-BC`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-BCDowngrading`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-BCServeOnBattery`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-BitLocker`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-BitLockerAutoUnlock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-DAManualEntryPointSelection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-DscDebug`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-MMAgent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterChecksumOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterEncapsulatedPacketTaskOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterIPsecOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterLso`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterPacketDirect`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterPowerManagement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterQos`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterRdma`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterRsc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterRss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterSriov`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetAdapterVmq`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetDnsTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetIPHttpsProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetIPsecMainModeRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetNatTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetworkSwitchEthernetPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetworkSwitchFeature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-NetworkSwitchVlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-OdbcPerfCounter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-PhysicalDiskIdentification`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-PnpDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-PSTrace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-PSWSManCombinedTrace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-SmbDelegation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-StorageEnclosureIdentification`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-StorageEnclosurePower`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-StorageHighAvailability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-StorageMaintenanceMode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-WdacBidTrace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-WSManTrace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disconnect-IscsiTarget`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disconnect-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Dismount-DiskImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-BCDistributed`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-BCDowngrading`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-BCHostedClient`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-BCHostedServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-BCLocal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-BCServeOnBattery`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-BitLocker`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-BitLockerAutoUnlock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-DAManualEntryPointSelection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-DscDebug`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-MMAgent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterChecksumOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterEncapsulatedPacketTaskOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterIPsecOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterLso`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterPacketDirect`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterPowerManagement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterQos`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterRdma`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterRsc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterRss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterSriov`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetAdapterVmq`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetDnsTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetIPHttpsProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetIPsecMainModeRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetNatTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetworkSwitchEthernetPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetworkSwitchFeature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-NetworkSwitchVlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-OdbcPerfCounter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-PhysicalDiskIdentification`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-PnpDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-PSTrace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-PSWSManCombinedTrace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-SmbDelegation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-StorageEnclosureIdentification`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-StorageEnclosurePower`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-StorageHighAvailability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-StorageMaintenanceMode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-WdacBidTrace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-WSManTrace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Expand-Archive`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-BCCachePackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-BCSecretKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-ODataEndpointProxy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-Command`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-DscResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-Module`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-NetRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-RoleCapability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-Script`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Flush-EtwTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Format-Hex`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Format-Volume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppBackgroundTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppvVirtualProcess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppxLastError`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppxLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AssignedAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AutologgerConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BCClientConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BCContentServerConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BCDataCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BCDataCacheExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BCHashCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BCHostedCacheServerConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BCNetworkConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BCStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BitLockerVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ClusteredScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DAClientExperienceConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DAConnectionStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DAEntryPointTableItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DedupProperties`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Disk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DiskImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DiskStorageNodeView`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DnsClient`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DnsClientCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DnsClientGlobalSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DnsClientNrptGlobal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DnsClientNrptPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DnsClientNrptRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DnsClientServerAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DscConfigurationStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DscLocalConfigurationManager`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DscResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Dtc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcAdvancedHostSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcAdvancedSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcClusterDefault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcClusterTMMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcDefault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcNetworkSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcTransaction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcTransactionsStatistics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcTransactionsTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DtcTransactionsTraceSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-EtwTraceProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-EtwTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-FileHash`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-FileIntegrity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-FileShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-FileShareAccessControlEntry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-FileStorageTier`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-HnsEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-HnsNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-HnsNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-HnsPolicyList`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-InitiatorId`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-InitiatorPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-InstalledModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-InstalledScript`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IscsiConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IscsiSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IscsiTarget`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IscsiTargetPortal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IseSnippet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-LogProperties`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-MaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-MMAgent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-MockDynamicParameters`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-MpComputerStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-MpPreference`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-MpThreat`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-MpThreatCatalog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-MpThreatDetection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NCSIPolicyConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Net6to4Configuration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterAdvancedProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterChecksumOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterEncapsulatedPacketTaskOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterHardwareInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterIPsecOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterLso`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterPacketDirect`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterPowerManagement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterQos`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterRdma`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterRsc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterRss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterSriov`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterSriovVf`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterStatistics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterVmq`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterVMQQueue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetAdapterVPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetCompartment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetConnectionProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetDnsTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetDnsTransitionMonitoring`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetEventNetworkAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetEventPacketCaptureProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetEventProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetEventSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetEventVFPProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetEventVmNetworkAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetEventVmSwitch`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetEventVmSwitchProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetEventWFPCaptureProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallAddressFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallApplicationFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallInterfaceFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallInterfaceTypeFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallPortFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallSecurityFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallServiceFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetFirewallSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPHttpsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPHttpsState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPsecDospSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPsecMainModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPsecMainModeRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPsecMainModeSA`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPsecPhase1AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPsecPhase2AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPsecQuickModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPsecQuickModeSA`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPv4Protocol`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIPv6Protocol`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetIsatapConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetLbfoTeam`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetLbfoTeamMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetLbfoTeamNic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetNat`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetNatExternalAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetNatGlobal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetNatSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetNatStaticMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetNatTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetNatTransitionMonitoring`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetNeighbor`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetOffloadGlobalSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetPrefixPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetQosPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetSwitchTeam`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetSwitchTeamMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetTCPConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetTCPSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetTeredoConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetTeredoState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetTransportFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetUDPEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetUDPSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetView`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetworkSwitchEthernetPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetworkSwitchFeature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetworkSwitchGlobalData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-NetworkSwitchVlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-OdbcDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-OdbcDsn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-OdbcPerfCounter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-OffloadDataTransferSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-OperationValidation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Partition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PartitionSupportedSize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PcsvDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PcsvDeviceLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PhysicalDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PhysicalDiskStorageNodeView`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PhysicalExtent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PhysicalExtentAssociation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PnpDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PnpDeviceProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PrintConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Printer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PrinterDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PrinterPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PrinterProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PrintJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSRepository`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ResiliencySetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ScheduledTaskInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbBandWidthLimit`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbClientConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbClientNetworkInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbDelegation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbGlobalMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbMultichannelConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbMultichannelConstraint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbOpenFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbServerConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbServerNetworkInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbShareAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SmbWitnessClient`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StartApps`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageAdvancedProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageDiagnosticInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageEnclosure`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageEnclosureStorageNodeView`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageEnclosureVendorData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageExtendedStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageFaultDomain`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageFileServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageFirmwareInformation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageHealthAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageHealthReport`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageHealthSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StoragePool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageReliabilityCounter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageSubSystem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageTier`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-StorageTierSupportedSize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SupportedClusterSizes`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SupportedFileSystems`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TargetPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TargetPortal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TestDriveItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-VirtualDiskSupportedSize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Volume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-VolumeCorruptionCount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-VolumeScrubPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-VpnConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-VpnConnectionTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WdacBidTrace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsUpdateLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WUAVersion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WUIsPendingReboot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WULastInstallationDate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WULastScanSuccessDate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Grant-FileShareAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Grant-SmbShareAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Hide-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-BCCachePackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-BCSecretKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-IseSnippet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-PowerShellDataFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `In`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Initialize-Disk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `InModuleScope`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Install-Dtc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Install-Module`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Install-Script`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Install-WUUpdates`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-AsWorkflow`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-Mock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-OperationValidation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-Pester`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `It`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Lock-BitLocker`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Mock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Mount-DiskImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-SmbWitnessClient`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AutologgerConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-DAEntryPointTableItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-DscChecksum`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-EapConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-EtwTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-FileShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Fixture`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Guid`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-IscsiTargetPortal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-IseSnippet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-MaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetAdapterAdvancedProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetEventSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPHttpsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecDospSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecMainModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecMainModeRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecPhase1AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecPhase2AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecQuickModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetLbfoTeam`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetNat`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetNatTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetNeighbor`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetQosPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetSwitchTeam`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetTransportFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetworkSwitchVlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Partition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PesterOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PSWorkflowSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ScheduledTaskAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ScheduledTaskPrincipal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ScheduledTaskSettingsSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ScheduledTaskTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ScriptFileInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-SmbGlobalMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-SmbMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-SmbMultichannelConstraint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-SmbShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-StorageFileServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-StoragePool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-StorageSubsystemVirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-StorageTier`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-TemporaryFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-VirtualDiskClone`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-VirtualDiskSnapshot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Volume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-VpnServerAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Open-NetGPO`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Optimize-StoragePool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Optimize-Volume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `PSConsoleHostReadline`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-BCFileContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-BCWebContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-Module`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-Script`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Read-PrinterNfcTag`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-ClusteredScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-DnsClient`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-IscsiSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-PSRepository`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-StorageSubsystem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AutologgerConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-BCDataCacheExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-BitLockerKeyProtector`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-DAEntryPointTableItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-DnsClientNrptRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-DscConfigurationDocument`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-DtcClusterTMMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-EtwTraceProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-FileShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-HnsEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-HnsNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-HnsNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-HnsPolicyList`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-InitiatorId`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-InitiatorIdFromMaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-IscsiTargetPortal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-MaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-MpPreference`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-MpThreat`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetAdapterAdvancedProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetEventNetworkAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetEventPacketCaptureProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetEventProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetEventSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetEventVFPProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetEventVmNetworkAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetEventVmSwitch`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetEventVmSwitchProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetEventWFPCaptureProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPHttpsCertBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPHttpsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPsecDospSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPsecMainModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPsecMainModeRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPsecMainModeSA`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPsecPhase1AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPsecPhase2AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPsecQuickModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPsecQuickModeSA`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetLbfoTeam`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetLbfoTeamMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetLbfoTeamNic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetNat`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetNatExternalAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetNatStaticMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetNatTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetNeighbor`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetQosPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetSwitchTeam`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetSwitchTeamMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetTransportFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetworkSwitchEthernetPortIPAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-NetworkSwitchVlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-OdbcDsn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-Partition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PartitionAccessPath`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PhysicalDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-Printer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PrinterDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PrinterPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PrintJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-SmbBandwidthLimit`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-SmbGlobalMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-SmbMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-SmbMultichannelConstraint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-SmbShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-StorageFaultDomain`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-StorageFileServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-StorageHealthIntent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-StorageHealthSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-StoragePool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-StorageTier`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-TargetPortFromMaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-VirtualDiskFromMaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-VpnConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-VpnConnectionRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-VpnConnectionTriggerApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-VpnConnectionTriggerDnsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-VpnConnectionTriggerTrustedNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-DAEntryPointTableItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-MaskingSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetIPHttpsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetIPsecMainModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetIPsecMainModeRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetIPsecPhase1AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetIPsecPhase2AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetIPsecQuickModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetLbfoTeam`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-NetSwitchTeam`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-Printer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Repair-FileIntegrity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Repair-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Repair-Volume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-BC`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-DAClientExperienceConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-DAEntryPointTableItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-DtcLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-NCSIPolicyConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-Net6to4Configuration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-NetAdapterAdvancedProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-NetDnsTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-NetIPHttpsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-NetIsatapConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-NetTeredoConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-PhysicalDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-StorageReliabilityCounter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resize-Partition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resize-StorageTier`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resize-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-NetAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-PcsvDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-PrintJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-DscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-NetworkSwitchConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-BitLocker`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-PrintJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Revoke-FileShareAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Revoke-SmbShareAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `SafeGetCommand`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-EtwTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-Module`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-NetGPO`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-NetworkSwitchConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-Script`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Send-EtwTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AssignedAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AutologgerConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-BCAuthentication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-BCCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-BCDataCacheEntryMaxAge`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-BCMinSMBLatency`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-BCSecretKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-ClusteredScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DAClientExperienceConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DAEntryPointTableItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Disk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DnsClient`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DnsClientGlobalSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DnsClientNrptGlobal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DnsClientNrptRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DnsClientServerAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcAdvancedHostSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcAdvancedSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcClusterDefault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcClusterTMMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcDefault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcNetworkSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcTransaction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcTransactionsTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DtcTransactionsTraceSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DynamicParameterVariables`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-EtwTraceProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-FileIntegrity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-FileShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-FileStorageTier`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-InitiatorPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-IscsiChapSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-LogProperties`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-MMAgent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-MpPreference`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NCSIPolicyConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Net6to4Configuration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterAdvancedProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterChecksumOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterEncapsulatedPacketTaskOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterIPsecOffload`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterLso`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterPacketDirect`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterPowerManagement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterQos`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterRdma`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterRsc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterRss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterSriov`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetAdapterVmq`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetConnectionProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetDnsTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetEventPacketCaptureProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetEventProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetEventSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetEventVFPProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetEventVmSwitchProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetEventWFPCaptureProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallAddressFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallApplicationFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallInterfaceFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallInterfaceTypeFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallPortFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallSecurityFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallServiceFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetFirewallSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPHttpsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPsecDospSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPsecMainModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPsecMainModeRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPsecPhase1AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPsecPhase2AuthSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPsecQuickModeCryptoSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPv4Protocol`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIPv6Protocol`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetIsatapConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetLbfoTeam`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetLbfoTeamMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetLbfoTeamNic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetNat`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetNatGlobal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetNatTransitionConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetNeighbor`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetOffloadGlobalSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetQosPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetTCPSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetTeredoConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetUDPSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetworkSwitchEthernetPortIPAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetworkSwitchPortMode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetworkSwitchPortProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-NetworkSwitchVlanProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-OdbcDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-OdbcDsn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Partition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PcsvDeviceBootConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PcsvDeviceNetworkConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PcsvDeviceUserPassword`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PhysicalDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PrintConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Printer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PrinterProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PSRepository`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-ResiliencySetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-SmbBandwidthLimit`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-SmbClientConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-SmbPathAcl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-SmbServerConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-SmbShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-StorageFileServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-StorageHealthSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-StoragePool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-StorageProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-StorageSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-StorageSubSystem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-StorageTier`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-TestInconclusive`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Setup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Volume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-VolumeScrubPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-VpnConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-VpnConnectionIPsecConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-VpnConnectionProxy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-VpnConnectionTriggerDnsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-VpnConnectionTriggerTrustedNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Should`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Show-NetFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Show-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Show-VirtualDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AppBackgroundTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AppvVirtualProcess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AutologgerConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-Dtc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-DtcTransactionsTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-EtwTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-MpScan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-MpWDOScan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-NetEventSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-PcsvDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-StorageDiagnosticLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-Trace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-WUScan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-DscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-Dtc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-DtcTransactionsTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-EtwTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-NetEventSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-PcsvDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-StorageDiagnosticLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-StorageJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-Trace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-BitLocker`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-PrintJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Sync-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-Dtc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-NetConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-ScriptFileInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unblock-FileShareAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unblock-SmbShareAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Uninstall-Dtc`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Uninstall-Module`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Uninstall-Script`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unlock-BitLocker`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-AppBackgroundTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-ClusteredScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-IscsiSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-PSRepository`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-ScheduledTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-StorageSubsystem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-Disk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-DscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-EtwTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-HostStorageCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-IscsiTarget`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-IscsiTargetPortal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-Module`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-ModuleManifest`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-MpSignature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-NetIPsecRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-Script`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-ScriptFileInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-SmbMultichannelConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-StorageFirmware`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-StoragePool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-StorageProviderCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-DtcTransactionsTraceSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-PrinterNfcTag`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-VolumeCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AppvClientConnectionGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AppvClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AppvPublishingServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AppxPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AppxProvisionedPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AppxVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureApplicationGatewaySslCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureDns`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureEnvironment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureHDInsightScriptAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureInternalLoadBalancer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureKeyVaultCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureKeyVaultCertificateContact`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureKeyVaultKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureKeyVaultManagedStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureNetworkInterfaceConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureNodeWebRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureNodeWorkerRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzurePHPWebRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzurePHPWorkerRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureProvisioningConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRemoteAppUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApiManagementApiToProduct`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApiManagementProductToGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApiManagementRegion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApiManagementUserToGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayAuthenticationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayBackendAddressPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayBackendHttpSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayFrontendIPConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayFrontendPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayHttpListener`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayIPConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayRequestRoutingRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewaySslCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmApplicationGatewayUrlPathMapConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmAutoscaleSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmContainerServiceAgentPoolProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmDataLakeAnalyticsDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmDataLakeAnalyticsFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmDataLakeStoreFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmDataLakeStoreItemContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmDataLakeStoreTrustedIdProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmDnsRecordConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmEnvironment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmExpressRouteCircuitAuthorization`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmExpressRouteCircuitPeeringConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmHDInsightClusterIdentity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmHDInsightComponentVersion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmHDInsightConfigValues`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmHDInsightMetastore`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmHDInsightScriptAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmHDInsightSecurityProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmHDInsightStorage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmImageDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmIotHubEventHubConsumerGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmIotHubKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmLoadBalancerBackendAddressPoolConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmLoadBalancerFrontendIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmLoadBalancerInboundNatPoolConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmLoadBalancerInboundNatRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmLoadBalancerProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmLoadBalancerRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmLogAlertRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmLogProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmMetricAlertRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmMlWebServiceRegionalProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmNetworkInterfaceIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmNetworkSecurityRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmRouteConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmRouteFilterRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmServiceFabricApplicationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmServiceFabricClientCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmServiceFabricClusterCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmServiceFabricNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmServiceFabricNodeType`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmSqlDatabaseToFailoverGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmSqlServerKeyVaultKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmTrafficManagerEndpointConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVhd`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVirtualNetworkGatewayIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVirtualNetworkPeering`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVirtualNetworkSubnetConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVMAdditionalUnattendContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVMDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVMNetworkInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVMSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVmssAdditionalUnattendContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVmssDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVmssDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVmssExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVMSshPublicKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVmssNetworkInterfaceConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVmssSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVmssSshPublicKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVmssWinRMListener`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVpnClientRevokedCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmVpnClientRootCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureRmWebtestAlertRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureTrafficManagerEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureVhd`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureVirtualIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureVMImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureWebRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-AzureWorkerRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-BitsFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-CertificateEnrollmentPolicyServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-Computer`,
        [
            new Parameter(`ComputerName`, `Specifies the computers to add to a domain or workgroup. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name of each of the remote 
computers. To specify the local computer, type the computer name, a dot (.), or "localhost".


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Add-Computer 
even if your computer is not configured to run remote commands.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to join the computers to a new domain. The default is the current user.


Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


To specify a user account that has permission to remove the computer from its current domain, use the 
UnjoinDomainCredential parameter. To specify a user account that has permission to connect to a remote computer, use 
the LocalCredential parameter.`, `PSCredential`),
new Parameter(`DomainName`, `Specifies the domain to which the computers are added. This parameter is required when adding the computers to a 
domain.`, `String`),
new Parameter(`Force`, `Forces the command to run without asking for user confirmation. Without this parameter, Add-Computer requires you to 
confirm the addition of each computer.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`LocalCredential`, `Specifies a user account that has permission to connect to the computers that are specified by the ComputerName 
parameter. The default is the current user.


Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


To specify a user account that has permission to add the computers to a new domain, use the Credential parameter. To 
specify a user account that has permission to remove the computers from their current domain, use the 
UnjoinDomainCredential parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
new Parameter(`NewName`, `Specifies a new name for the computer in the new domain. This parameter is valid only when one computer is being added 
or moved.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`OUPath`, `Specifies an organizational unit (OU) for the domain account. Enter the full distinguished name of the OU in quotation 
marks.  The default value is the default OU for machine objects in the domain.`, `String`),
new Parameter(`Options`, `Specifies advanced options for the Add-Computer join operation. Enter one or more values in a comma-separated string.


The acceptable values for this parameter are:


- AccountCreate : Creates a domain account. The Add-Computer cmdlet automatically creates a domain account when it 
adds a computer to a domain. This option is included for completeness.


- Win9XUpgrade : Indicates that the join operation is part of a Windows operating system upgrade.


- UnsecuredJoin : Performs an unsecured join. To request an unsecured join, use the Unsecure parameter or this option.


- PasswordPass : Sets the machine password to the value of the Credential (DomainCredential) parameter after 
performing an unsecured join. This option also indicates that the value of the Credential (DomainCredential) parameter 
is a machine password, not a user password. This option is valid only when the UnsecuredJoin option is specified.


-- JoinWithNewName : Renames the computer name in the new domain to the name specified by the NewName parameter. When 
you use the NewName parameter, this option is set automatically. This option is designed to be used with the 
Rename-Computer cmdlet. If you use the Rename-Computer cmdlet to rename the computer, but do not restart the computer 
to make the change effective, you can use this parameter to join the computer to a domain with its new name.


- JoinReadOnly : Uses an existing machine account to join the computer to a read-only domain controller. The machine 
account must be added to the allowed list for password replication policy and the account password must be replicated 
to the read-only domain controller prior to the join operation.


- InstallInvoke : Sets the create (0x2) and delete (0x4) flags of the FJoinOptions parameter of the 
JoinDomainOrWorkgroup method. For more information about the JoinDomainOrWorkgroup method, see "JoinDomainOrWorkgroup 
Method of the Win32_ComputerSystem Class" on MSDNhttp://msdn.microsoft.com/library/aa392154(VS.85).aspx at 
http://msdn.microsoft.com/library/aa392154(VS.85).aspx.


For more information about these options, see "NetJoinDomain" on 
MSDNhttp://msdn.microsoft.com/library/aa370433(VS.85).aspx at http://msdn.microsoft.com/library/aa370433(VS.85).aspx.


This parameter was introduced in Windows PowerShell 3.0.`, `JoinOptions`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`Restart`, `Indicates that this cmdlet restarts the computers that were added to the domain or workgroup. A restart is often 
required to make the change effective.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Server`, `Specifies the name of a domain controller that adds the computer to the domain. Enter the name in 
DomainName\ComputerName format. By default, no domain controller is specified.`, `String`),
new Parameter(`UnjoinDomainCredential`, `Specifies a user account that has permission to remove the computers from their current domains. The default is the 
current user.


Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


Use this parameter when you are moving computers to a different domain. To specify a user account that has permission 
to join the new domain, use the Credential parameter. To specify a user account that has permission to connect to a 
remote computer, use the LocalCredential parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
new Parameter(`Unsecure`, `Indicates that this cmdlet performs an unsecured join to the specified domain.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
new Parameter(`WorkgroupName`, `Specifies the name of a workgroup to which the computers are added. The default value is "WORKGROUP".`, `String`),
        ],
        `Add the local computer to a domain or workgroup.`,
        `Add-Computer [-DomainName] <String> [-ComputerName <String[]>] [-Confirm] -Credential <PSCredential> [-Force] 
[-LocalCredential <PSCredential>] [-NewName <String>] [-OUPath <String>] [-Options {AccountCreate | Win9XUpgrade | 
UnsecuredJoin | PasswordPass | DeferSPNSet | JoinWithNewName | JoinReadOnly | InstallInvoke}] [-PassThru] [-Restart] 
[-Server <String>] [-UnjoinDomainCredential <PSCredential>] [-Unsecure] [-WhatIf] [<CommonParameters>]

Add-Computer [-WorkgroupName] <String> [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] [-Force] 
[-LocalCredential <PSCredential>] [-NewName <String>] [-PassThru] [-Restart] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-Content`,
        [
            new Parameter(`Encoding`, `Specifies the file encoding. The default is ASCII.

Valid values are:

-- ASCII:  Uses the encoding for the ASCII (7-bit) character set.
-- BigEndianUnicode:  Encodes in UTF-16 format using the big-endian byte order.
-- Byte:   Encodes a set of characters into a sequence of bytes.
-- String:  Uses the encoding type for a string.
-- Unicode:  Encodes in UTF-16 format using the little-endian byte order.
-- UTF7:   Encodes in UTF-7 format.
-- UTF8:  Encodes in UTF-8 format.
-- Unknown:  The encoding type is unknown or invalid. The data can be treated as binary.

Encoding is a dynamic parameter that the FileSystem provider adds to the Add-Content cmdlet. This parameter works only 
in file system drives.`, `FileSystemCmdletProviderEncoding`),
new Parameter(`Force`, `Adds contents to files even if they are read-only. Without this parameter, read-only files are not affected.`, `SwitchParameter`),
new Parameter(`Stream`, `Adds the content to the specified alternate data stream. If the stream does not yet, exist, Add-Content creates it. 
Enter the stream name. Wildcards are not supported.

Stream is a dynamic parameter that the FileSystem provider adds to the Add-Content cmdlet. This parameter works only 
in file system drives.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
new Parameter(`Confirm`, `Prompts you for confirmation before executing the command.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Describes what would happen if you executed the command without actually executing the command.`, `SwitchParameter`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see about_Transactions.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies, as a string array, items that this cmdlet omits. The value of this parameter qualifies the Path parameter. 
Enter a path element or pattern, such as "*.txt". Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Include`, `Specifies, as a string array, items that this cmdlet includes. The value of this parameter qualifies the Path 
parameter. Enter a path element or pattern, such as "*.txt". Wildcards are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies the path to the items that receive the additional content. Unlike the Path parameter, the value of the 
LiteralPath parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes 
escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to 
interpret any characters as escape sequences.`, `String[]`),
new Parameter(`NoNewline`, `Indicates that this cmdlet does not add a new line/carriage return to the content.


Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `SwitchParameter`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path to the items that receive the additional content. Wildcards are permitted. If you specify multiple 
paths, use commas to separate the paths.`, `String[]`),
new Parameter(`Value`, `Specifies the content to be added. Type a quoted string, such as "This data is for internal use only", or specify an 
object that contains content, such as the DateTime object that Get-Date generates.


You cannot specify the contents of a file by typing its path, because the path is just a string, but you can use a 
Get-Content command to get the content and pass it to the Value parameter.`, `Object[]`),
        ],
        `Appends content, such as words or data, to a file.`,
        `Add-Content [-Value] <Object[]> [-Confirm] [-Credential <PSCredential>] [-Encoding {Unknown | String | Unicode | Byte 
| BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-NoNewline] [-PassThru] [-Stream <String>] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]

Add-Content [-Path] <String[]> [-Value] <Object[]> [-Confirm] [-Credential <PSCredential>] [-Encoding {Unknown | 
String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-NoNewline] [-PassThru] [-Stream <String>] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]

Add-Content [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | 
Oem}] [-Force] [-Stream <string>] [-Confirm] [-WhatIf] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-History`,
        [
            new Parameter(`InputObject`, `Specifies an array of entries to add to the history as HistoryInfo object to the session history. You can use this 
parameter to submit a HistoryInfo object, such as the ones that are returned by the Get-History , Import-Clixml, or 
Import-Csv cmdlets, to Add-History .`, `PSObject[]`),
new Parameter(`Passthru`, `Indicates that this cmdlet returns a history object for each history entry. By default, this cmdlet does not generate 
any output.`, `SwitchParameter`),
        ],
        `Appends entries to the session history.`,
        `Add-History [[-InputObject] <PSObject[]>] [-Passthru] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-JobTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-KdsRootKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-LocalGroupMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-Member`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-PSSnapin`,
        [
            new Parameter(`Name`, `Specifies the name of the snap-in. This is the Name, not the AssemblyName or ModuleName. Wildcards are permitted.


To find the names of the registered snap-ins on your system, type "Get-PSSnapin -Registered".`, `String[]`),
new Parameter(`PassThru`, `Indicates that this cmdlet returns an object that represents each added snap-in. By default, this cmdlet does not 
generate any output.`, `SwitchParameter`),
        ],
        `Adds one or more Windows PowerShell snap-ins to the current session.`,
        `Add-PSSnapin [-Name] <String[]> [-PassThru] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-SignerRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-Type`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-WebConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-WebConfigurationLock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-WebConfigurationProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-WindowsCapability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-WindowsDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Add-WindowsPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Backup-AzureKeyVaultKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Backup-AzureKeyVaultSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Backup-AzureRmApiManagement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Backup-AzureRmBackupItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Backup-AzureRmRecoveryServicesBackupItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Backup-WebConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Checkpoint-Computer`,
        [
            new Parameter(`Description`, `Specifies a descriptive name for the restore point. This parameter is required.`, `String`),
new Parameter(`RestorePointType`, `Specifies the type of restore point. The default is APPLICATION_INSTALL.


The acceptable values for this parameter are:


- APPLICATION_INSTALL


- APPLICATION_UNINSTALL


- DEVICE_DRIVER_INSTALL


- MODIFY_SETTINGS


- CANCELLED_OPERATION`, `String`),
        ],
        `Creates a system restore point on the local computer.`,
        `Checkpoint-Computer [-Description] <String> [[-RestorePointType] {APPLICATION_INSTALL | APPLICATION_UNINSTALL | 
DEVICE_DRIVER_INSTALL | MODIFY_SETTINGS | CANCELLED_OPERATION}] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-AzureProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-AzureRemoteAppVmStaleAdObject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-Content`,
        [
            new Parameter(`Stream`, `Deletes the content in the specified alternate data stream, but does not delete the alternate data stream. Enter the 
stream name. Wildcards are not supported.

Stream is a dynamic parameter that the FileSystem provider adds to the Set-Content cmdlet. This parameter works only 
in file system drives.

You can use the Clear-Content cmdlet to clear the content of an alternate data stream. However, it is not the 
recommended way to eliminate security checks that block files that are downloaded from the Internet. If you verify 
that a downloaded file is safe, use the Unblock-File cmdlet.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as "User01" or "Domain01\User01", or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies, as a string array, strings that this cmdlet omits from the path to the content. The value of this parameter 
qualifies the Path parameter. Enter a path element or pattern, such as "*.txt". Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies, as a string array, content that this cmdlet clears. The value of this parameter qualifies the Path 
parameter. Enter a path element or pattern, such as "*.txt". Wildcards are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies the paths to the items from which content is deleted. Unlike the Path parameter, the value of LiteralPath is 
used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, 
enclose it in single quotation marks. Single quotation marks tell having Windows PowerShell not to interpret any 
characters as escape sequences.`, `String[]`),
new Parameter(`Path`, `Specifies the paths to the items from which content is deleted. Wildcards are permitted. The paths must be paths to 
items, not to containers. For example, you must specify a path to one or more files, not a path to a directory. 
Wildcards are permitted. This parameter is required, but the parameter name ("Path") is optional.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Deletes the contents of an item, but does not delete the item.`,
        `Clear-Content [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] -LiteralPath <String[]> [-Stream <String>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Clear-Content [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] [-Stream <String>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Clear-Content [-Stream <string>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-EventLog`,
        [
            new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name of a remote computer. To 
specify the local computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of the 
Get-EventLog cmdlet even if your computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`LogName`, `Specifies the event logs. Enter the log name (the value of the Log property; not the LogDisplayName) of one or more 
event logs, separated by commas.`, `String[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Clears all entries from specified event logs on the local or remote computers.`,
        `Clear-EventLog [-LogName] <String[]> [[-ComputerName] <String[]>] [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-History`,
        [
            new Parameter(`CommandLine`, `Specifies commands that this cmdlet deletes. If you enter more than one string, Clear-History deletes commands that 
have any of the strings.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Count`, `Specifies the number of history entries that this cmdlet clears, starting with the oldest entry in the history.


If you use the Count and Id parameters in the same command, the cmdlet clears the number of entries specified by the 
Count parameter, starting with the entry specified by the Id parameter. For example, if Count is 10 and Id is 30, 
Clear-History clears items 21 through 30 inclusive.


If you use the Count and CommandLine parameters in the same command, Clear-History clears the number of entries 
specified by the Count parameter, starting with the entry specified by the CommandLine parameter.`, `Int32`),
new Parameter(`Id`, `Specifies the history IDs of commands that this cmdlet deletes.


To find the history ID of a command, use the Get-History cmdlet.`, `Int32[]`),
new Parameter(`Newest`, `Indicates that this cmdlet deletes the newest entries in the history. By default, Clear-History deletes the oldest 
entries in the history.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Deletes entries from the command history.`,
        `Clear-History [[-Count] <Int32>] [-CommandLine <String[]>] [-Confirm] [-Newest] [-WhatIf] [<CommonParameters>]

Clear-History [[-Id] <Int32[]>] [[-Count] <Int32>] [-Confirm] [-Newest] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-IISCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-IISConfigCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-Item`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies, as a string array, items to exclude. The value of this parameter qualifies the Path parameter. Enter a path 
element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when the cmdlet gets the objects, rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Indicates that the cmdlet clears items that cannot otherwise be changed, such as read- only aliases. The cmdlet cannot 
clear constants. Implementation varies from provider to provider. For more information, see about_Providers. The 
cmdlet cannot override security restrictions, even when the Force parameter is used.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies, as a string array, items to that this cmdlet clears. The value of this parameter qualifies the Path 
parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies the path to the items being cleared. Unlike Path , the value of the LiteralPath parameter is used exactly as 
it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell wps_2 not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Path`, `Specifies the path to the items being cleared. Wildcards are permitted. This parameter is required, but the parameter 
name (Path) is optional.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Clears the contents of an item, but does not delete the item.`,
        `Clear-Item [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] -LiteralPath <String[]> [-UseTransaction] [-WhatIf] [<CommonParameters>]

Clear-Item [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] [-UseTransaction] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-ItemProperty`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes. The value of this parameter qualifies the 
Path parameter. Enter a path element or pattern, such as .txt or s . Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when the cmdlet gets the objects rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Indicates that this cmdlet deletes properties from items that cannot otherwise be accessed by the user. Implementation 
varies from provider to provider. For more information, see about_Providers.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet clears. The value of this parameter qualifies the Path 
parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies the path to the property being cleared. Unlike the Path parameter, the value of LiteralPath is used exactly 
as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in 
single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape 
sequences.`, `String[]`),
new Parameter(`Name`, `Specifies the name of the property to be cleared, such as the name of a registry value. Wildcards are not permitted.`, `String`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path to the property being cleared. Wildcards are permitted.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Clears the value of a property but does not delete the property.`,
        `Clear-ItemProperty [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Clear-ItemProperty [-Path] <String[]> [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] 
[-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-KdsCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-RecycleBin`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`DriveLetter`, ``, `String[]`),
new Parameter(`Force`, ``, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        ``,
        `Clear-RecycleBin [[-DriveLetter] <String[]>] [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-Tpm`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-UevAppxPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-UevConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-Variable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-WebCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-WebConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-WebRequestTracingSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-WebRequestTracingSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Clear-WindowsCorruptMountPoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Compare-Object`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Complete-BitsTransfer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Complete-DtcDiagnosticTransaction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Complete-Transaction`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Commits the active transaction.`,
        `Complete-Transaction [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Confirm-AzureStorSimpleLegacyVolumeContainerStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Confirm-SecureBootUEFI`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Connect-PSSession`,
        [
            new Parameter(`AllowRedirection`, `Indicates that this cmdlet allows redirection of this connection to an alternate URI.


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different 
URI. By default, Windows PowerShell does not redirect connections, but you can use this parameter to allow it to 
redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount 
session option value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the 
MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
new Parameter(`ApplicationName`, `Specifies the name of an application. This cmdlet connects only to sessions that use the specified application.


Enter the application name segment of the connection URI. For example, in the following connection URI, the 
application name is WSMan: "http://localhost:5985/WSMAN". The application name of a session is stored in the 
Runspace.ConnectionInfo.AppName property of the session.


The value of this parameter is used to select and filter sessions. It does not change the application that the session 
uses.`, `String`),
new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate user credentials in the command to reconnect to the disconnected 
session. The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


For information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the 
Microsoft Developer Network (MSDN) library.

Caution: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to 
a remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to connect to the 
disconnected session. Enter the certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts. They 
do not work with domain accounts.


To get a certificate thumbprint, use a Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
new Parameter(`ComputerName`, `Specifies the computers on which the disconnected sessions are stored. Sessions are stored on the computer that is at 
the server-side or receiving end of a connection. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one computer. Wildcard characters are not 
permitted. To specify the local computer, type the computer name, localhost, or a dot (.)`, `String[]`),
new Parameter(`ConfigurationName`, `Connects only to sessions that use the specified session configuration.


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the 
configuration name, the following schema URI is prepended: http://schemas.microsoft.com/powershell. The configuration 
name of a session is stored in the ConfigurationName property of the session.


The value of this parameter is used to select and filter sessions. It does not change the session configuration that 
the session uses.


For more information about session configurations, see about_Session_Configurations.`, `String`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`ConnectionUri`, `Specifies the URIs of the connection endpoints for the disconnected sessions.


The URI must be fully qualified. The format of this string is as follows:


"<Transport>://<ComputerName>:<Port>/<ApplicationName>"


The default value is as follows:


"http://localhost:5985/WSMAN"


If you do not specify a connection URI, you can use the UseSSL and Port parameters to specify the connection URI 
values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport 
segment, but do not specify a port, the session is created with standards ports: 80 for HTTP and 443 for HTTPS. To use 
the default ports for Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection 
unless you use the AllowRedirection parameter in the command.`, `Uri[]`),
new Parameter(`Credential`, `Specifies a user account that has permission to connect to the disconnected session. The default is the current user.


Type a user name, such as User01 or Domain01\User01. Or, enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
new Parameter(`Id`, `Specifies the IDs of the disconnected sessions. The Id parameter works only when the disconnected session was 
previously connected to the current session.


This parameter is valid, but not effective, when the session is stored on the local computer, but was not connected to 
the current session.`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies the instance IDs of the disconnected sessions.


The instance ID is a GUID that uniquely identifies a PSSession on a local or remote computer.


The instance ID is stored in the InstanceID property of the PSSession .`, `Guid[]`),
new Parameter(`Name`, `Specifies the friendly names of the disconnected sessions.`, `String[]`),
new Parameter(`Port`, `Specifies the network port on the remote computer that is used to reconnect to the session. To connect to a remote 
computer, the remote computer must be listening on the port that the connection uses. The default ports are 5985, 
which is the WinRM port for HTTP, and 5986, which is the WinRM port for HTTPS.


Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that port. 
To configure the listener, type the following two commands at the Windows PowerShell prompt:


"Remove-Item -Path WSMan:\Localhost\listener\listener* -Recurse"


"New-Item -Path WSMan:\Localhost\listener -Transport http -Address * -Port <port-number>"


Do not use the Port parameter unless you must. The port that is set in the command applies to all computers or 
sessions on which the command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
new Parameter(`Session`, `Specifies the disconnected sessions. Enter a variable that contains the PSSession objects or a command that creates or 
gets the PSSession objects, such as a Get-PSSession command.`, `PSSession[]`),
new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session 
option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is 
set. Otherwise, the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference 
variable and in the session configuration. However, they do not take precedence over maximum values, quotas or limits 
set in the session configuration.


For a description of the session options that includes the default values, see New-PSSessionOption. For information 
about the $PSSessionOption preference variable, see about_Preference_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113248). For more information about session configurations, see 
about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this 
parameter or enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to connect to the disconnected session. By 
default, SSL is not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter is an 
additional protection that sends the data across an HTTPS connection instead of an HTTP connection.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Reconnects to disconnected sessions.`,
        `Connect-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Confirm] [-Credential <PSCredential>] [-Name <String[]>] [-SessionOption <PSSessionOption>] 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Confirm] [-Credential <PSCredential>] -InstanceId <Guid[]> [-SessionOption <PSSessionOption>] 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-ComputerName] <String[]> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate 
| NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] 
[-ConfigurationName <String>] [-Confirm] [-Credential <PSCredential>] [-Name <String[]>] [-Port <Int32>] 
[-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [-UseSSL] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-ComputerName] <String[]> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate 
| NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] 
[-ConfigurationName <String>] [-Confirm] [-Credential <PSCredential>] -InstanceId <Guid[]> [-Port <Int32>] 
[-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [-UseSSL] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-Id] <Int32[]> [-Confirm] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-Confirm] -InstanceId <Guid[]> [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-Confirm] -Name <String[]> [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Connect-PSSession [-Session] <PSSession[]> [-Confirm] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Connect-WSMan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertFrom-CIPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertFrom-Csv`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertFrom-Json`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertFrom-SecureString`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertFrom-String`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertFrom-StringData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Convert-Path`,
        [
            new Parameter(`LiteralPath`, `Specifies, as a string array, the path to be converted. The value of the LiteralPath parameter is used exactly as it 
is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Path`, `Specifies the Windows PowerShell path to be converted.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Converts a path from a Windows PowerShell path to a Windows PowerShell provider path.`,
        `Convert-Path -LiteralPath <String[]> [-UseTransaction] [<CommonParameters>]

Convert-Path [-Path] <String[]> [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Convert-String`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertTo-AzureRmVMManagedDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertTo-Csv`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertTo-Html`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertTo-Json`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertTo-ProcessMitigationPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertTo-SecureString`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertTo-TpmOwnerAuth`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertTo-WebApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ConvertTo-Xml`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-AzureRemoteAppUserDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-Item`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Container`, `Indicates that this cmdlet preserves container objects during the copy operation.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Destination`, `Specifies the path to the new location. To rename a copied item, include the new name in the value.`, `String`),
new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation. Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when the cmdlet gets the objects, rather than have Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Indicates that this cmdlet will copy items that cannot otherwise be changed, such as copying over a read-only file or 
alias.`, `SwitchParameter`),
new Parameter(`FromSession`, `Specifies the PSSession object from which a remote file is being copied. When you use this parameter, the Path and 
LiteralPath parameters refer to the local path on the remote machine.`, `PSSession`),
new Parameter(`Include`, `Specifies, as a string array, only those items upon which the cmdlet will act, excluding all others.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path to the item. The value of the LiteralPath parameter is used exactly as it is typed. No characters are 
interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies, as a string array, the path to the items to copy.`, `String[]`),
new Parameter(`Recurse`, `Indicates that this cmdlet performs a recursive copy.`, `SwitchParameter`),
new Parameter(`ToSession`, `Specifies the PSSession object to which a remote file is being copied. When you use this parameter, the Path and 
LiteralPath parameters refer to the local path on the remote machine.`, `PSSession`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Copies an item from one location to another.`,
        `Copy-Item [[-Destination] <String>] [-Confirm] [-Container] [-Credential <PSCredential>] [-Exclude <String[]>] 
[-Filter <String>] [-Force] [-FromSession <PSSession>] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] 
[-Recurse] [-ToSession <PSSession>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Copy-Item [-Path] <String[]> [[-Destination] <String>] [-Confirm] [-Container] [-Credential <PSCredential>] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-FromSession <PSSession>] [-Include <String[]>] [-PassThru] [-Recurse] 
[-ToSession <PSSession>] [-UseTransaction] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Copy-ItemProperty`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Destination`, `Specifies the path to the destination location.`, `String`),
new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes. Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when this cmdlet gets the objects rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies, as a string array, an item or items upon which the cmdlet will act, excluding all others.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path to the item property. The value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Name`, `Specifies the name of the property to be copied.`, `String`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies, as a string array, the path to the property to be copied.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Copies a property and value from a specified location to another location.`,
        `Copy-ItemProperty [-Destination] <String> [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] 
[-WhatIf] [<CommonParameters>]

Copy-ItemProperty [-Path] <String[]> [-Destination] <String> [-Name] <String> [-Confirm] [-Credential <PSCredential>] 
[-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Debug-Job`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies the ID number of a running job. To get the ID number of a job, run the Get-Job cmdlet.`, `Int32`),
new Parameter(`InstanceId`, `Specifies the instance ID GUID of a running job. To get the InstanceId of a job, run the Get-Job cmdlet, piping the 
results into a Format- * cmdlet, as shown in the following example:


"Get-Job | Format-List -Property Id,Name,InstanceId,State"`, `Guid`),
new Parameter(`Job`, `Specifies a running job object. The simplest way to use this parameter is to save the results of a Get-Job command 
that returns the running job that you want to debug in a variable, and then specify the variable as the value of this 
parameter.`, `Job`),
new Parameter(`Name`, `Specifies a job by the friendly name of the job. When you start a job, you can specify a job name by adding the 
JobName parameter, in cmdlets such as Invoke-Command and Start-Job.`, `String`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Debugs a running background, remote, or Windows PowerShell Workflow job.`,
        `Debug-Job [-Id] <Int32> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Job [-InstanceId] <Guid> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Job [-Job] <Job> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Job [-Name] <String> [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Debug-Process`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies the process IDs of the processes to be debugged. The Id parameter name is optional.


To find the process ID of a process, type "Get-Process".`, `Int32[]`),
new Parameter(`InputObject`, `Specifies the process objects that represent processes to be debugged. Enter a variable that contains the process 
objects or a command that gets the process objects, such as the Get-Process cmdlet. You can also pipe process objects 
to this cmdlet.`, `Process[]`),
new Parameter(`Name`, `Specifies the names of the processes to be debugged. If there is more than one process with the same name, this cmdlet 
attaches a debugger to all processes with that name.  The Name parameter is optional.`, `String[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Debugs one or more processes running on the local computer.`,
        `Debug-Process [-Id] <Int32[]> [-Confirm] [-WhatIf] [<CommonParameters>]

Debug-Process [-Confirm] -InputObject <Process[]> [-WhatIf] [<CommonParameters>]

Debug-Process [-Name] <String[]> [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Debug-Runspace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AppBackgroundTaskDiagnosticLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-Appv`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AppvClientConnectionGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureBatchAutoScale`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureBatchComputeNodeScheduling`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureBatchJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureBatchJobSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureDataCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmBackupProtection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmDataCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmOperationalInsightsIISLogCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmOperationalInsightsLinuxCustomLogCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmOperationalInsightsLinuxPerformanceCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmOperationalInsightsLinuxSyslogCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmRecoveryServicesBackupProtection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmTrafficManagerEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureRmVMDiskEncryption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureServiceProjectRemoteDesktop`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureWebsiteApplicationDiagnostic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-AzureWebsiteDebug`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-ComputerRestore`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Drive`, `Specifies the file system drives. Enter one or more file system drive letters, each followed by a colon and a 
backslash and enclosed in quotation marks, such as C:\ or D:\. This parameter is required.


You cannot use this cmdlet to disable System Restore on a remote network drive, even if the drive is mapped to the 
local computer, and you cannot disable System Restore on drives that are not eligible for System Restore, such as 
external drives.


To disable System Restore on any drive, System Restore must be disabled on the system drive, either before or 
concurrently.`, `String[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Disables the System Restore feature on the specified file system drive.`,
        `Disable-ComputerRestore [-Drive] <String[]> [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-IISCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-IISSharedConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-JobTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-LocalUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-PSBreakpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-PSRemoting`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Prevents remote users from running commands on the local computer.`,
        `Disable-PSRemoting [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-PSSessionConfiguration`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
new Parameter(`Name`, `Specifies an array of names of session configurations to disable. Enter one or more configuration names. Wildcard 
characters are permitted. You can also pipe a string that contains a configuration name or a session configuration 
object to Disable-PSSessionConfiguration .


If you omit this parameter, Disable-PSSessionConfiguration disables the Microsoft.PowerShell session configuration.`, `String[]`),
new Parameter(`NoServiceRestart`, `@{Text=}`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Disables session configurations on the local computer.`,
        `Disable-PSSessionConfiguration [[-Name] <String[]>] [-Confirm] [-Force] [-NoServiceRestart] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-RunspaceDebug`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-ScheduledJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-TlsCipherSuite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-TlsEccCurve`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-TlsSessionTicketKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-TpmAutoProvisioning`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-Uev`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-UevAppxPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-UevTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-WebCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-WebGlobalModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-WebRequestTracing`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-WindowsErrorReporting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-WindowsOptionalFeature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disable-WSManCredSSP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disconnect-AzureRemoteAppSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disconnect-PSSession`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies an array of IDs of sessions that this cmdlet disconnects. Type one or more IDs, separated by commas, or use 
the range operator (..) to specify a range of IDs.


To get the ID of a session, use the Get-PSSession cmdlet. The instance ID is stored in the ID property of the session.`, `Int32[]`),
new Parameter(`IdleTimeoutSec`, `Changes the idle time-out value of the disconnected PSSession . Enter a value in seconds. The minimum value is 60 (1 
minute).


The idle time-out determines how long the disconnected PSSession is maintained on the remote computer. When the 
time-out expires, the PSSession is deleted.


Disconnected PSSession objects are considered to be idle from the moment that they are disconnected, even if commands 
are running in the disconnected session.


The default value for the idle time-out of a session is set by the value of the IdleTimeoutMs property of the session 
configuration. The default value is 7200000 milliseconds (2 hours).


The value of this parameter takes precedence over the value of the IdleTimeout property of the $PSSessionOption 
preference variable and the default idle time-out value in the session configuration. However, this value cannot 
exceed the value of the MaxIdleTimeoutMs property of the session configuration. The default value of MaxIdleTimeoutMs 
is 12 hours (43200000 milliseconds).`, `Int32`),
new Parameter(`InstanceId`, `Specifies an array of GUIDs of sessions that this cmdlet disconnects.


The instance ID is a GUID that uniquely identifies a session on a local or remote computer. The instance ID is unique, 
even across multiple sessions on multiple computers.


To get the instance ID of a session, use Get-PSSession . The instance ID is stored in the InstanceID property of the 
session.`, `Guid[]`),
new Parameter(`Name`, `Specifies an array of friendly names of sessions that this cmdlet disconnects. Wildcard characters are permitted.


To get the friendly name of a session, use Get-PSSession . The friendly name is stored in the Name property of the 
session.`, `String[]`),
new Parameter(`OutputBufferingMode`, `Specifies how command output is managed in the disconnected session when the output buffer is full. The default value 
is Block.


If the command in the disconnected session is returning output and the output buffer fills, the value of this 
parameter effectively determines whether the command continues to run while the session is disconnected. A value of 
Block suspends the command until the session is reconnected. A value of Drop allows the command to complete, although 
data might be lost. When using the Drop value, redirect the command output to a file on disk.


The acceptable values for this parameter are:


- Block. When the output buffer is full, execution is suspended until the buffer is clear.


- Drop. When the output buffer is full, execution continues. As new output is saved, the oldest output is discarded.


- None. No output buffering mode is specified. The value of the OutputBufferingMode property of the session 
configuration is used for the disconnected session.`, `OutputBufferingMode`),
new Parameter(`Session`, `Specifies an array of sessions. Enter PSSession objects, such as those that the New-PSSession cmdlet returns. You can 
also pipe a PSSession object to Disconnect-PSSession. Get-PSSession can get all PSSession objects that end at a remote 
computer. These include PSSession objects that are disconnected and PSSession objects that are connected to other 
sessions on other computers. Disconnect-PSSession disconnects only PSSession that are connected to the current 
session. If you pipe other PSSession objects to Disconnect-PSSession , the Disconnect-PSSession command fails.`, `PSSession[]`),
new Parameter(`ThrottleLimit`, `Sets the throttle limit for the Disconnect-PSSession command.


The throttle limit is the maximum number of concurrent connections that can be established to run this command. If you 
omit this parameter or enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Disconnects from a session.`,
        `Disconnect-PSSession [-Id] <Int32[]> [-Confirm] [-IdleTimeoutSec <Int32>] [-OutputBufferingMode {None | Drop | Block}] 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Disconnect-PSSession [-Confirm] [-IdleTimeoutSec <Int32>] -InstanceId <Guid[]> [-OutputBufferingMode {None | Drop | 
Block}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Disconnect-PSSession [-Confirm] [-IdleTimeoutSec <Int32>] -Name <String[]> [-OutputBufferingMode {None | Drop | 
Block}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Disconnect-PSSession [-Session] <PSSession[]> [-Confirm] [-IdleTimeoutSec <Int32>] [-OutputBufferingMode {None | Drop 
| Block}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Disconnect-WSMan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Dismount-AppxVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Dismount-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Edit-AzureRmSiteRecoveryRecoveryPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Edit-AzureRmWebAppBackupConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Edit-CIPolicyRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AppBackgroundTaskDiagnosticLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-Appv`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AppvClientConnectionGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureBatchAutoScale`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureBatchComputeNodeScheduling`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureBatchJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureBatchJobSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureBatchTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureDataCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmBackupContainerReregistration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmBackupProtection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmDataCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmDataLakeStoreKeyVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmOperationalInsightsIISLogCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmOperationalInsightsLinuxCustomLogCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmOperationalInsightsLinuxPerformanceCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmOperationalInsightsLinuxSyslogCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmRecoveryServicesBackupProtection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmTrafficManagerEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureRmTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureServiceProjectRemoteDesktop`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureWebsiteApplicationDiagnostic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-AzureWebsiteDebug`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-ComputerRestore`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Drive`, `Specifies the file system drives. Enter one or more file system drive letters, each followed by a colon and a 
backslash and enclosed in quotation marks, such as C:\ or D:\. This parameter is required.


You cannot use this cmdlet to enable System Restore on a remote network drive, even if the drive is mapped to the 
local computer, and you cannot enable System Restore on drives that are not eligible for System Restore, such as 
external drives.


To enable System Restore on any drive, System Restore must be enabled on the system drive, either before or 
concurrently.`, `String[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Enables the System Restore feature on the specified file system drive.`,
        `Enable-ComputerRestore [-Drive] <String[]> [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-IISCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-IISSharedConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-JobTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-LocalUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-PSBreakpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-PSRemoting`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
new Parameter(`SkipNetworkProfileCheck`, `Indicates that this cmdlet enables remoting on client versions of the Windows operating system when the computer is on 
a public network. This parameter enables a firewall rule for public networks that allows remote access only from 
computers in the same local subnet.


This parameter does not affect server versions of the Windows operating system, which, by default, have a local subnet 
firewall rule for public networks. If the local subnet firewall rule is disabled on a server version, 
Enable-PSRemoting re-enables it, regardless of the value of this parameter.


To remove the local subnet restriction and enable remote access from all locations on public networks, use the 
Set-NetFirewallRule cmdlet in the NetSecurity module.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Configures the computer to receive remote commands.`,
        `Enable-PSRemoting [-Confirm] [-Force] [-SkipNetworkProfileCheck] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-PSSessionConfiguration`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Indicates that the cmdlet does not prompt you for confirmation, and restarts the WinRM service without prompting. 
Restarting the service makes the configuration change effective.


To prevent a restart and suppress the restart prompt, use the NoServiceRestart parameter.`, `SwitchParameter`),
new Parameter(`Name`, `Specifies the names of session configurations to enable. Enter one or more configuration names. Wildcard characters 
are permitted.


You can also pipe a string that contains a configuration name or a session configuration object to 
Enable-PSSessionConfiguration .


If you omit this parameter, Enable-PSSessionConfiguration enables the Microsoft.PowerShell session configuration.`, `String[]`),
new Parameter(`NoServiceRestart`, `Indicates that the cmdlet does not restart the service.`, `SwitchParameter`),
new Parameter(`SecurityDescriptorSddl`, `Specifies a security descriptor with which this cmdlet replaces the security descriptor on the session configuration.


If you omit this parameter, Enable-PSSessionConfiguration only deletes the deny all item from the security descriptor.`, `String`),
new Parameter(`SkipNetworkProfileCheck`, `Indicates that this cmdlet enables the session configuration when the computer is on a public network. This parameter 
enables a firewall rule for public networks that allows remote access only from computers in the same local subnet. By 
default, Enable-PSSessionConfiguration fails on a public network.


This parameter is designed for client versions of the Windows operating system. By default, server versions of the 
Windows operating system have a local subnet firewall rule for public networks. However, if the local subnet firewall 
rule is disabled on a server version of the Windows operating system, this parameter re-enables it.


To remove the local subnet restriction and enable remote access from all locations on public networks, use the 
Set-NetFirewallRule cmdlet in the NetSecurity module. For more information, see Enable-PSRemoting.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Enables the session configurations on the local computer.`,
        `Enable-PSSessionConfiguration [[-Name] <String[]>] [-Confirm] [-Force] [-NoServiceRestart] [-SecurityDescriptorSddl 
<String>] [-SkipNetworkProfileCheck] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-RunspaceDebug`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-ScheduledJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-TlsCipherSuite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-TlsEccCurve`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-TlsSessionTicketKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-TpmAutoProvisioning`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-Uev`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-UevAppxPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-UevTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-WebCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-WebGlobalModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-WebRequestTracing`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-WindowsErrorReporting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-WindowsOptionalFeature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enable-WSManCredSSP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enter-PSHostProcess`,
        [
            new Parameter(`AppDomainName`, `@{Text=}`, `String`),
new Parameter(`HostProcessInfo`, `@{Text=}`, `PSHostProcessInfo`),
new Parameter(`Id`, `Specifies a process by the process ID. To get a process ID, run the Get-Process cmdlet.`, `Int32`),
new Parameter(`Name`, `Specifies a process by the process name. To get a process name, run the Get-Process cmdlet. You can also get process 
names from the Properties dialog box of a process in Task Manager.`, `String`),
new Parameter(`Process`, `Specifies a process by the process object. The simplest way to use this parameter is to save the results of a 
Get-Process command that returns process that you want to enter in a variable, and then specify the variable as the 
value of this parameter.`, `Process`),
        ],
        `Connects to and enters into an interactive session with a local process.`,
        `Enter-PSHostProcess [-HostProcessInfo] <PSHostProcessInfo> [[-AppDomainName] <String>] [<CommonParameters>]

Enter-PSHostProcess [-Id] <Int32> [[-AppDomainName] <String>] [<CommonParameters>]

Enter-PSHostProcess [-Name] <String> [[-AppDomainName] <String>] [<CommonParameters>]

Enter-PSHostProcess [-Process] <Process> [[-AppDomainName] <String>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Enter-PSSession`,
        [
            new Parameter(`AllowRedirection`, `Allows redirection of this connection to an alternate Uniform Resource Identifier (URI). By default, redirection is 
not allowed.


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different 
URI. By default, Windows PowerShell does not redirect connections, but you can use this parameter to allow it to 
redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount 
session option value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the 
MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
new Parameter(`ApplicationName`, `Specifies the application name segment of the connection URI. Use this parameter to specify the application name when 
you are not using the ConnectionURI parameter in the command.


The default value is the value of the $PSSessionApplicationName preference variable on the local computer. If this 
preference variable is not defined, the default value is WSMAN. This value is appropriate for most uses. For more 
information, see about_Preference_Variables.


The WinRM service uses the application name to select a listener to service the connection request. The value of this 
parameter should match the value of the URLPrefix property of a listener on the remote computer.`, `String`),
new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate the user's credentials. The acceptable values for this parameter 
are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


CredSSP authentication is available only in Windows Vista, Windows Server 2008, and later versions of the Windows 
operating system.


For information about the values of this parameter, see the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the 
Microsoft Developer Network (MSDN).

Caution: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to 
a remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to perform this action. 
Enter the certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they 
do not work with domain accounts.


To get a certificate, use the Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
new Parameter(`ComputerName`, `Specifies a computer name. This cmdlet starts an interactive session with the specified remote computer. Enter only 
one computer name. The default is the local computer.


Type the NetBIOS name, the IP address, or the fully qualified domain name of the computer. You can also pipe a 
computer name to Enter-PSSession .


To use an IP address in the value of the ComputerName parameter, the command must include the Credential parameter. 
Also, the computer must be configured for HTTPS transport or the IP address of the remote computer must be included in 
the WinRM TrustedHosts list on the local computer. For instructions for adding a computer name to the TrustedHosts 
list, see "How to Add a Computer to the Trusted Host List" in about_Remote_Troubleshooting.


Note: In Windows Vista and later versions of the Windows operating system, to include the local computer in the value 
of the ComputerName parameter, you must start Windows PowerShell with the Run as administrator option.`, `String`),
new Parameter(`ConfigurationName`, `Specifies the session configuration that is used for the interactive session.


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the 
configuration name, the following schema URI is prepended: http://schemas.microsoft.com/powershell.


The session configuration for a session is located on the remote computer. If the specified session configuration does 
not exist on the remote computer, the command fails.


The default value is the value of the $PSSessionConfigurationName preference variable on the local computer. If this 
preference variable is not set, the default is Microsoft.PowerShell. For more information, see 
about_Preference_Variables.`, `String`),
new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint for the session. The URI must be fully qualified. The format of 
this string is as follows:


<Transport>://<ComputerName>:<Port>/<ApplicationName>


The default value is as follows:


"http://localhost:5985/WSMAN"


If you do not specify a ConnectionURI , you can use the UseSSL , ComputerName , Port , and ApplicationName parameters 
to specify the ConnectionURI values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport 
segment, but do not specify a port, the session is created by using standards ports: 80 for HTTP and 443 for HTTPS. To 
use the default ports for Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection 
unless you use the AllowRedirection parameter in the command.`, `Uri`),
new Parameter(`ContainerId`, `Specifies the ID of a container.`, `String`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as "User01", "Domain01\User01", or "User@Domain.com", or enter a PSCredential object, such as 
one returned by the Get-Credential cmdlet.


When you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
new Parameter(`EnableNetworkAccess`, `Indicates that this cmdlet adds an interactive security token to loopback sessions. The interactive token lets you run 
commands in the loopback session that get data from other computers. For example, you can run a command in the session 
that copies XML files from a remote computer to the local computer.


A loopback session is a PSSession that originates and ends on the same computer. To create a loopback session, omit 
the ComputerName parameter or set its value to . (dot), localhost, or the name of the local computer.


By default, loopback sessions are created by using a network token, which might not provide sufficient permission to 
authenticate to remote computers.


The EnableNetworkAccess parameter is effective only in loopback sessions. If you use EnableNetworkAccess when you 
create a session on a remote computer, the command succeeds, but the parameter is ignored.


You can also allow remote access in a loopback session by using the CredSSP value of the Authentication parameter, 
which delegates the session credentials to other computers.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies the ID of an existing session. Enter-PSSession uses the specified session for the interactive session.


To find the ID of a session, use the Get-PSSession cmdlet.`, `Int32`),
new Parameter(`InstanceId`, `Specifies the instance ID of an existing session. Enter-PSSession uses the specified session for the interactive 
session.


The instance ID is a GUID. To find the instance ID of a session, use the Get-PSSession cmdlet. You can also use the 
Session , Name , or ID parameters to specify an existing session. Or, you can use the ComputerName parameter to start 
a temporary session.`, `Guid`),
new Parameter(`Name`, `Specifies the friendly name of an existing session. Enter-PSSession uses the specified session for the interactive 
session.


If the name that you specify matches more than one session, the command fails. You can also use the Session , 
InstanceID , or ID parameters to specify an existing session. Or, you can use the ComputerName parameter to start a 
temporary session.


To establish a friendly name for a session, use the Name parameter of the New-PSSession cmdlet.`, `String`),
new Parameter(`Port`, `Specifies the network port on the remote computer that is used for this command. To connect to a remote computer, the 
remote computer must be listening on the port that the connection uses. The default ports are 5985, which is the WinRM 
port for HTTP, and 5986, which is the WinRM port for HTTPS.


Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that port. 
Use the following commands to configure the listener:


"1. winrm delete winrm/config/listener?Address=*+Transport=HTTP"


"2. winrm create winrm/config/listener?Address=*+Transport=HTTP @{Port="<port-number>"}"


Do not use the Port parameter unless you must. The port setting in the command applies to all computers or sessions on 
which the command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
new Parameter(`RunAsAdministrator`, `Indicates that the PSSession runs as administrator.`, `SwitchParameter`),
new Parameter(`Session`, `Specifies a Windows PowerShell session ( PSSession ) to use for the interactive session. This parameter takes a 
session object. You can also use the Name , InstanceID , or ID parameters to specify a PSSession .


Enter a variable that contains a session object or a command that creates or gets a session object, such as a 
New-PSSession or Get-PSSession command. You can also pipe a session object to Enter-PSSession . You can submit only 
one PSSession by using this parameter. If you enter a variable that contains more than one PSSession , the command 
fails.


When you use Exit-PSSession or the EXIT keyword, the interactive session ends, but the PSSession that you created 
remains open and available for use.`, `PSSession`),
new Parameter(`SessionOption`, `Sets advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session 
option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is 
set. Otherwise, the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference 
variable and in the session configuration. However, they do not take precedence over maximum values, quotas or limits 
set in the session configuration.


For a description of the session options, including the default values, see New-PSSessionOption . For information 
about the $PSSessionOption preference variable, see about_Preference_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113248). For more information about session configurations, see 
about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to establish a connection to the remote 
computer. By default, SSL is not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter is an 
additional protection that sends the data across an HTTPS connection instead of an HTTP connection.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
new Parameter(`VMId`, `Specifies the ID of a virtual machine.`, `Guid`),
new Parameter(`VMName`, `Specifies the name of a virtual machine.`, `String`),
        ],
        `Starts an interactive session with a remote computer.`,
        `Enter-PSSession [[-ConnectionUri] <Uri>] [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Credential <PSCredential>] [-EnableNetworkAccess] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Enter-PSSession [-ComputerName] <String> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Credential <PSCredential>] [-EnableNetworkAccess] [-Port <Int32>] [-SessionOption <PSSessionOption>] 
[-UseSSL] [<CommonParameters>]

Enter-PSSession [-VMId] <Guid> [-ConfigurationName <String>] -Credential <PSCredential> [<CommonParameters>]

Enter-PSSession [-VMName] <String> [-ConfigurationName <String>] -Credential <PSCredential> [<CommonParameters>]

Enter-PSSession [-ContainerId] <String> [-ConfigurationName <String>] [-RunAsAdministrator] [<CommonParameters>]

Enter-PSSession [[-Id] <Int32>] [<CommonParameters>]

Enter-PSSession [-InstanceId <Guid>] [<CommonParameters>]

Enter-PSSession [-Name <String>] [<CommonParameters>]

Enter-PSSession [[-Session] <PSSession>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Exit-PSHostProcess`,
        [
            
        ],
        `Closes an interactive session with a local process.`,
        `Exit-PSHostProcess [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Exit-PSSession`,
        [
            
        ],
        `Ends an interactive session with a remote computer.`,
        `Exit-PSSession [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Expand-WindowsCustomDataImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Expand-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-Alias`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRemoteAppTemplateImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRemoteAppUserDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRmApiManagementApi`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRmAutomationDscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRmAutomationDscNodeReportContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRmAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRmDataLakeStoreItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRmMlWebService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRmRedisCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureRmResourceGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-AzureVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-BinaryMiLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-Certificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-Clixml`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-Console`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Indicates that this cmdlet overwrites the data in a console file without warning, even if the file has the read-only 
attribute. The read-only attribute is changed and is not reset when the command finishes.`, `SwitchParameter`),
new Parameter(`NoClobber`, `Indicates that this cmdlet does not overwrite  an existing console file. By default, if a file occurs in the specified 
path, Export-Console overwrites the file without warning.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies a path and file name for the console file (*.psc1). Enter an optional path and name. Wildcard characters are 
not permitted.


If you specify only a file name, Export-Console creates a file that has that name and the .psc1 file name extension in 
the current directory.


This parameter is required unless you have opened Windows PowerShell with the PSConsoleFile parameter or exported a 
console file during the current session. It is also required when you use the NoClobber parameter to prevent the 
current console file from being overwritten.


If you omit this parameter, Export-Console overwrites the console file that was used most recently in this session. 
The path of the most recently used console file is stored in the value of the $ConsoleFileName automatic variable. For 
more information, see about_Automatic_Variables.`, `String`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Exports the names of snap-ins in the current session to a console file.`,
        `Export-Console [[-Path] <String>] [-Confirm] [-Force] [-NoClobber] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-Counter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-Csv`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-FormatData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-IISConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-ModuleMember`,
        [
            new Parameter(`Alias`, `Specifies the aliases that are exported from the script module file. Enter the alias names. Wildcard characters are 
permitted.`, `String[]`),
new Parameter(`Cmdlet`, `Specifies the cmdlets that are exported from the script module file. Enter the cmdlet names. Wildcard characters are 
permitted.


You cannot create cmdlets in a script module file, but you can import cmdlets from a binary module into a script 
module and re-export them from the script module.`, `String[]`),
new Parameter(`Function`, `Specifies the functions that are exported from the script module file. Enter the function names. Wildcard characters 
are permitted. You can also pipe function name strings to Export-ModuleMember .`, `String[]`),
new Parameter(`Variable`, `Specifies the variables that are exported from the script module file. Enter the variable names, without a dollar 
sign. Wildcard characters are permitted.`, `String[]`),
        ],
        `Specifies the module members that are exported.`,
        `Export-ModuleMember [[-Function] <String[]>] [-Alias <String[]>] [-Cmdlet <String[]>] [-Variable <String[]>] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-PfxCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-ProvisioningPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-PSSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-StartLayout`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-StartLayoutEdgeAssets`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-TlsSessionTicketKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-Trace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-UevConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-UevPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-WindowsCapabilitySource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-WindowsDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Export-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-AzureRmResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-AzureRmResourceGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-Package`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Find-PackageProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `ForEach-Object`,
        [
            new Parameter(`ArgumentList`, `Specifies an array of arguments to a method call.


This parameter was introduced in Windows PowerShell 3.0.`, `Object[]`),
new Parameter(`Begin`, `Specifies a script block that runs before this cmdlet processes any input objects.`, `ScriptBlock`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`End`, `Specifies a script block that runs after this cmdlet processes all input objects.`, `ScriptBlock`),
new Parameter(`InputObject`, `Specifies the input objects. ForEach-Object runs the script block or operation statement on each input object. Enter a 
variable that contains the objects, or type a command or expression that gets the objects.


When you use the InputObject parameter with ForEach-Object , instead of piping command results to ForEach-Object , the 
InputObject value is treated as a single object. This is true even if the value is a collection that is the result of 
a command, such as "-InputObject (Get-Process)". Because InputObject cannot return individual properties from an array 
or collection of objects, we recommend that if you use ForEach-Object to perform operations on a collection of objects 
for those objects that have specific values in defined properties, you use ForEach-Object in the pipeline, as shown in 
the examples in this topic.`, `PSObject`),
new Parameter(`MemberName`, `Specifies the property to get or the method to call.


Wildcard characters are permitted, but work only if the resulting string resolves to a unique value. If, for example, 
you run "Get-Process | ForEach -MemberName Name", and more than one member exists with a name that contains the string 
Name, such as the ProcessName and Name * properties, the command fails.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`Process`, `Specifies the operation that is performed on each input object. Enter a script block that describes the operation.`, `ScriptBlock[]`),
new Parameter(`RemainingScripts`, `Specifies all script blocks that are not taken by the Process parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `ScriptBlock[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Performs an operation against each item in a collection of input objects.`,
        `ForEach-Object [-MemberName] <String> [-ArgumentList <Object[]>] [-Confirm] [-InputObject <PSObject>] [-WhatIf] 
[<CommonParameters>]

ForEach-Object [-Process] <ScriptBlock[]> [-Begin <ScriptBlock>] [-Confirm] [-End <ScriptBlock>] [-InputObject 
<PSObject>] [-RemainingScripts <ScriptBlock[]>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Format-Custom`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Format-List`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Format-SecureBootUEFI`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Format-Table`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Format-Wide`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Acl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Alias`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppLockerFileInformation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppLockerPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppvClientApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppvClientConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppvClientConnectionGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppvClientMode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppvClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppvPublishingServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppvStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppxDefaultVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppxPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppxPackageManifest`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppxProvisionedPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AppxVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AuthenticodeSignature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAclConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAffinityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureApplicationGatewayConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureApplicationGatewaySslCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationJobOutput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationRunbookDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationScheduledRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureAutomationVariable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchComputeNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchJobSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchJobStatistics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchNodeAgentSku`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchNodeFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchNodeFileContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchPoolStatistics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchPoolUsageMetrics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchRemoteDesktopProtocolFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchRemoteLoginSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchSubtask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureBatchTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureDeploymentEvent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureDns`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureEffectiveRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureEnvironment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureInternalLoadBalancer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureIPForwarding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureKeyVaultCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureKeyVaultCertificateContact`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureKeyVaultCertificateIssuer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureKeyVaultCertificateOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureKeyVaultCertificatePolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureKeyVaultKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureKeyVaultManagedStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureKeyVaultManagedStorageSasDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureKeyVaultSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureLocalNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureMediaServicesAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureNetworkInterfaceConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureNetworkSecurityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureNetworkSecurityGroupAssociation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureNetworkSecurityGroupConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureNetworkSecurityGroupForSubnet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureOSDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureOSVersion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzurePublicIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzurePublishSettingsFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppCollectionUsageDetails`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppCollectionUsageSummary`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppOperationResult`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppProgram`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppStartMenuProgram`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppTemplateImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppVmStaleAdObject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppVNet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppVpnDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppVpnDeviceConfigScript`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteAppWorkspace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRemoteDesktopFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureReservedIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmADAppCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmADApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmADGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmADGroupMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmADServicePrincipal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmADSpCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmADUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAlertHistory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAlertRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAnalysisServicesServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementApi`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementAuthorizationServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementBackend`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementIdentityProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementLogger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementOpenIdConnectProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementProduct`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementSsoToken`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementTenantAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementTenantGitAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementTenantSyncState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApiManagementUserSsoUrl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayAuthenticationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayAvailableWafRuleSets`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayBackendAddressPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayBackendHealth`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayBackendHttpSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayConnectionDraining`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayFrontendIPConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayFrontendPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayHttpListener`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayIPConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayRequestRoutingRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewaySku`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewaySslCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewaySslPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayUrlPathMapConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmApplicationGatewayWebApplicationFirewallConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAppServicePlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAppServicePlanMetrics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationDscCompilationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationDscCompilationJobOutput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationDscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationDscNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationDscNodeConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationDscNodeReport`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationDscOnboardingMetaconfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRMAutomationHybridWorkerGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationJobOutput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationJobOutputRecord`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationRegistrationInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationScheduledRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationVariable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutomationWebhook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutoscaleHistory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAutoscaleSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmAvailabilitySet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBackupContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBackupItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBackupJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBackupJobDetails`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBackupProtectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBackupRecoveryPoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBackupVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBackupVaultCredentials`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBatchAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBatchAccountKeys`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBatchApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBatchApplicationPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBatchLocationQuotas`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBgpServiceCommunity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBillingInvoice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmBillingPeriod`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnCustomDomain`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnEdgeNodes`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnEndpointNameAvailability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnEndpointResourceUsage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnOrigin`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnProfileResourceUsage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnProfileSsoUrl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCdnSubscriptionResourceUsage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCognitiveServicesAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCognitiveServicesAccountKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmCognitiveServicesAccountSkus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmConsumptionUsageDetail`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmContainerRegistry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmContainerRegistryCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmContainerService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmContext`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataFactory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataFactoryActivityWindow`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataFactoryDataset`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataFactoryGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataFactoryHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataFactoryLinkedService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataFactoryPipeline`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataFactoryRun`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataFactorySlice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeAnalyticsAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeAnalyticsCatalogItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeAnalyticsDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeAnalyticsFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeAnalyticsJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeStoreAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeStoreChildItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeStoreFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeStoreItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeStoreItemAclEntry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeStoreItemContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeStoreItemOwner`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeStoreItemPermission`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDataLakeStoreTrustedIdProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDiagnosticSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDnsRecordSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDnsZone`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDtlAllowedVMSizesPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDtlAutoShutdownPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDtlAutoStartPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDtlVMsPerLabPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmDtlVMsPerUserPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEffectiveNetworkSecurityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEffectiveRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEnvironment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEventHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEventHubAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEventHubConsumerGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEventHubKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEventHubNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEventHubNamespaceAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmEventHubNamespaceKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmExpressRouteCircuit`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmExpressRouteCircuitARPTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmExpressRouteCircuitAuthorization`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmExpressRouteCircuitPeeringConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmExpressRouteCircuitRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmExpressRouteCircuitRouteTableSummary`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmExpressRouteCircuitStats`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmExpressRouteServiceProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmHDInsightCluster`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmHDInsightJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmHDInsightJobOutput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmHDInsightPersistedScriptAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmHDInsightProperties`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmHDInsightScriptActionHistory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIntegrationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIntegrationAccountAgreement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIntegrationAccountCallbackUrl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIntegrationAccountCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIntegrationAccountGeneratedIcn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIntegrationAccountMap`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIntegrationAccountPartner`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIntegrationAccountReceivedIcn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIntegrationAccountSchema`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIotHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIotHubConnectionString`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIotHubEventHubConsumerGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIotHubJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIotHubKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIotHubQuotaMetric`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIotHubRegistryStatistic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmIotHubValidSku`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmKeyVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLoadBalancer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLoadBalancerBackendAddressPoolConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLoadBalancerFrontendIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLoadBalancerInboundNatPoolConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLoadBalancerInboundNatRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLoadBalancerProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLoadBalancerRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLocalNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLogicApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLogicAppRunAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLogicAppRunHistory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLogicAppTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLogicAppTriggerCallbackUrl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLogicAppTriggerHistory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLogicAppUpgradedDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmLogProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMediaService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMediaServiceKeys`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMediaServiceNameAvailability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMetric`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMetricDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMlCommitmentAssociation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMlCommitmentPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMlCommitmentPlanUsageHistory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMlWebService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmMlWebServiceKeys`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkInterfaceIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkSecurityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkSecurityRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkUsage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkWatcher`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkWatcherFlowLogStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkWatcherNextHop`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkWatcherPacketCapture`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkWatcherSecurityGroupView`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkWatcherTopology`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNetworkWatcherTroubleshootingResult`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNotificationHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNotificationHubAuthorizationRules`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNotificationHubListKeys`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNotificationHubPNSCredentials`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNotificationHubsNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNotificationHubsNamespaceAuthorizationRules`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmNotificationHubsNamespaceListKeys`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsIntelligencePacks`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsLinkTargets`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsSavedSearch`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsSavedSearchResults`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsSchema`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsSearchResults`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsStorageInsight`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsWorkspace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsWorkspaceManagementGroups`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsWorkspaceSharedKeys`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmOperationalInsightsWorkspaceUsage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmPolicyAssignment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmPolicyDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmPowerBIWorkspace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmPowerBIWorkspaceCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmPowerBIWorkspaceCollectionAccessKeys`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmProviderFeature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmProviderOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmPublicIpAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupJobDetails`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupManagementServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupProtectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupRecoveryPoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupRetentionPolicyObject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesBackupSchedulePolicyObject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRecoveryServicesVaultSettingsFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRedisCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRedisCacheKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRedisCachePatchSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRelayAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRelayHybridConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRelayKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRelayNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRelayOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRemoteDesktopFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmResourceGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmResourceGroupDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmResourceGroupDeploymentOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmResourceLock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmResourceProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRoleAssignment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRoleDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRouteConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRouteFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRouteFilterRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSchedulerJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSchedulerJobHistory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServerManagementGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServerManagementNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServerManagementSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusNamespaceAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusNamespaceKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusQueue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusQueueAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusQueueKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusTopic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusTopicAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceBusTopicKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmServiceFabricCluster`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryFabric`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryNetworkMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryProtectableItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryProtectionContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryProtectionContainerMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryProtectionEntity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryRecoveryPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryRecoveryPoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryReplicationProtectedItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryServicesProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoverySite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryStorageClassification`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryStorageClassificationMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryVaultSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryVaultSettingsFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSiteRecoveryVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSnapshot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlCapability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseActivity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseAdvisor`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseAuditingPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseBackupLongTermRetentionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseDataMaskingPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseDataMaskingRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseExpanded`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseFailoverGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseGeoBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseGeoBackupPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseImportExportStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseIndexRecommendations`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseRecommendedAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseReplicationLink`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseRestorePoints`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseSecureConnectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseThreatDetectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseTransparentDataEncryption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseTransparentDataEncryptionActivity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDatabaseUpgradeHint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlDeletedDatabaseBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlElasticPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlElasticPoolActivity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlElasticPoolAdvisor`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlElasticPoolDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlElasticPoolRecommendation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlElasticPoolRecommendedAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerActiveDirectoryAdministrator`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerAdvisor`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerAuditingPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerBackupLongTermRetentionVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerCommunicationLink`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerDisasterRecoveryConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerDisasterRecoveryConfigurationActivity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerKeyVaultKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerRecommendedAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerServiceObjective`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerThreatDetectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerTransparentDataEncryptionProtector`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerUpgrade`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSqlServerUpgradeHint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStorageAccountKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStorageAccountNameAvailability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStorageUsage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStreamAnalyticsDefaultFunctionDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStreamAnalyticsFunction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStreamAnalyticsInput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStreamAnalyticsJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStreamAnalyticsOutput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStreamAnalyticsQuota`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmStreamAnalyticsTransformation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmTag`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmTenant`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmTrafficManagerEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmUsage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVirtualNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVirtualNetworkGatewayAdvertisedRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVirtualNetworkGatewayBgpPeerStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVirtualNetworkGatewayConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVirtualNetworkGatewayConnectionSharedKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVirtualNetworkGatewayLearnedRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVirtualNetworkPeering`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVirtualNetworkSubnetConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMAccessExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMADDomainExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMAEMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMBootDiagnosticsData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMChefExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMCustomScriptExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMDiskEncryptionStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMDscExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMDscExtensionStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMExtensionImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMExtensionImageType`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMImageOffer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMImagePublisher`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMImageSku`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMSize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMSqlServerExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVmss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVmssSku`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVmssVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVMUsage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVpnClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVpnClientRevokedCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmVpnClientRootCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWcfRelay`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppBackupConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppBackupList`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppMetrics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppPublishingProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppSlot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppSlotConfigName`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppSlotMetrics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppSlotPublishingProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRmWebAppSSLBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRoleSize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSBAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSBLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSBNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSchedulerJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSchedulerJobHistory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSchedulerLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureServiceADDomainExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureServiceAntimalwareConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureServiceAvailableExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureServiceDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureServiceExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureServiceProjectRoleRuntime`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureServiceRemoteDesktopExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryNetworkMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryProtectionContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryProtectionEntity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryRecoveryPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryRecoveryPlanFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoverySite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryStorage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryStorageMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryVaultSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryVaultSettingsFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSiteRecoveryVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlDatabaseCopy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlDatabaseImportExportStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlDatabaseOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlDatabaseServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlDatabaseServerFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlDatabaseServerQuota`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlDatabaseServiceObjective`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlDatabaseUsages`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSqlRecoverableDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStaticVNetIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageBlob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageBlobContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageBlobCopyState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageContainerStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageCORSRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageFileContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageFileCopyState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageQueue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageQueueStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageServiceLoggingProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageServiceMetricsProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageShareStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorageTableStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStoreAddOn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleAccessControlRecord`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleDeviceBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleDeviceBackupPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleDeviceConnectedInitiator`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleDeviceVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleDeviceVolumeContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleFailoverVolumeContainers`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleLegacyVolumeContainerConfirmStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleLegacyVolumeContainerMigrationPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleLegacyVolumeContainerStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleResourceContext`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleStorageAccountCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureStorSimpleTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSubnet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSubnetRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVirtualNetworkGatewayConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVirtualNetworkGatewayDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVirtualNetworkGatewayIPsecParameters`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVirtualNetworkGatewayKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMAccessExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMAvailableExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMBGInfoExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMChefExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMCustomScriptExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMDscExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMDscExtensionStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMImageDiskConfigSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMMicrosoftAntimalwareExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMPuppetExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVMSqlServerExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVNetConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVNetConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVNetGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVNetGatewayDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVNetGatewayIPsecParameters`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVNetGatewayKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureVNetSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWebHostingPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWebHostingPlanMetric`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWebsite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWebsiteDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWebsiteJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWebsiteJobHistory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWebsiteLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWebsiteLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWebsiteMetric`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-AzureWinRMUri`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-BitsTransfer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Certificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CertificateAutoEnrollmentPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CertificateEnrollmentPolicyServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CertificateNotificationTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ChildItem`,
        [
            new Parameter(`Attributes`, `Gets files and folders with the specified attributes. This parameter supports all attributes and lets you specify 
complex combinations of attributes.

For example, to get non-system files (not directories) that are encrypted or compressed, type:
    Get-ChildItem -Attributes !Directory+!System+Encrypted, !Directory+!System+Compressed

To find files and folders with commonly used attributes, you can use the Attributes parameter, or the Directory, File, 
Hidden, ReadOnly, and System switch parameters.

The Attributes parameter supports the following attributes: Archive, Compressed, Device, Directory, Encrypted, Hidden, 
Normal, NotContentIndexed, Offline, ReadOnly, ReparsePoint, SparseFile, System, and Temporary. For a description of 
these attributes, see the FileAttributes enumeration at http://go.microsoft.com/fwlink/?LinkId=201508.

Use the following operators to combine attributes.
    !    NOT
   +    AND
   ,      OR
No spaces are permitted between an operator and its attribute. However, spaces are permitted before commas.

You can use the following abbreviations for commonly used attributes:
    D    Directory
    H    Hidden
    R    Read-only
    S     System`, `FileAttributes]`),
new Parameter(`Directory`, `Gets directories (folders).  

To get only directories, use the Directory parameter and omit the File parameter. To exclude directories, use the File 
parameter and omit the Directory parameter, or use the Attributes parameter. 

To get directories, use the Directory parameter, its "ad" alias, or the Directory attribute of the Attributes 
parameter.`, `SwitchParameter`),
new Parameter(`File`, `Gets files. 

To get only files, use the File parameter and omit the Directory parameter. To exclude files, use the Directory 
parameter and omit the File parameter, or use the Attributes parameter.

To get files, use the File parameter, its "af" alias, or the File value of the Attributes parameter.`, `SwitchParameter`),
new Parameter(`Hidden`, `Gets only hidden files and directories (folders).  By default, Get-ChildItem gets only non-hidden items, but you can 
use the Force parameter to include hidden items in the results.

To get only hidden items, use the Hidden parameter, its "h" or "ah" aliases, or the Hidden value of the Attributes 
parameter. To exclude hidden items, omit the Hidden parameter or use the Attributes parameter.`, `SwitchParameter`),
new Parameter(`ReadOnly`, `Gets only read-only files and directories (folders).  

To get only read-only items, use the ReadOnly parameter, its "ar" alias, or the ReadOnly value of the Attributes 
parameter. To exclude read-only items, use the Attributes parameter.`, `SwitchParameter`),
new Parameter(`System`, `Gets only system files and directories (folders).

To get only system files and folders, use the System parameter, its "as" alias, or the System value of the Attributes 
parameter. To exclude system files and folders, use the Attributes parameter.`, `SwitchParameter`),
new Parameter(`Force`, `Gets hidden files and folders. By default, hidden files and folder are excluded. You can also get hidden files and 
folders by using the Hidden parameter or the Hidden value of the Attributes parameter.`, `SwitchParameter`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see about_Transactions.`, `SwitchParameter`),
new Parameter(`Depth`, `{{Fill Depth Description}}`, `UInt32`),
new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value of this parameter 
qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value of this parameter 
qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.


The Include parameter is effective only when the command includes the Recurse parameter or the path leads to the 
contents of a directory, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows 
directory.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies, as a string arrya, a path to one or more locations. Unlike the Path parameter, the value of the LiteralPath 
parameter is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape 
characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any 
characters as escape sequences.`, `String[]`),
new Parameter(`Name`, `Indicates that this cmdlet gets only the names of the items in the locations. If you pipe the output of this command 
to another command, only the item names are sent.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies a path to one or more locations. Wildcards are permitted. The default location is the current directory (.).`, `String[]`),
new Parameter(`Recurse`, `Indicates that this cmdlet gets the items in the specified locations and in all child items of the locations.


In Windows PowerShell 2.0 and earlier versions of Windows PowerShell, the Recurse parameter works only when the value 
of the Path parameter is a container that has child items, such as C:\Windows or C:\Windows\ , and not when it is an 
item does not have child items, such as C:\Windows\ .exe.`, `SwitchParameter`),
        ],
        `Gets the files and folders in a file system drive.`,
        `Get-ChildItem [[-Filter] <String>] [-Attributes {ReadOnly | Hidden | System | Directory | Archive | Device | Normal | 
Temporary | SparseFile | ReparsePoint | Compressed | Offline | NotContentIndexed | Encrypted | IntegrityStream | 
NoScrubData}] [-Depth <UInt32>] [-Directory] [-Exclude <String[]>] [-File] [-Force] [-Hidden] [-Include <String[]>] 
-LiteralPath <String[]> [-Name] [-ReadOnly] [-Recurse] [-System] [-UseTransaction] [<CommonParameters>]

Get-ChildItem [[-Path] <String[]>] [[-Filter] <String>] [-Attributes {ReadOnly | Hidden | System | Directory | Archive 
| Device | Normal | Temporary | SparseFile | ReparsePoint | Compressed | Offline | NotContentIndexed | Encrypted | 
IntegrityStream | NoScrubData}] [-Depth <UInt32>] [-Directory] [-Exclude <String[]>] [-File] [-Force] [-Hidden] 
[-Include <String[]>] [-Name] [-ReadOnly] [-Recurse] [-System] [-UseTransaction] [<CommonParameters>]

Get-ChildItem [-Attributes <FileAttributes]>] [-Directory] [-File] [-Force] [-Hidden] [-ReadOnly] [-System] 
[-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CimAssociatedInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CimClass`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CimInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CimSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CIPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CIPolicyIdInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CIPolicyInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Clipboard`,
        [
            new Parameter(`Format`, `Specifies the type, or format, of the clipboard. The acceptable values for this parameter are:


- Text


- FileDropList


- Image


- Audio`, `ClipboardFormat`),
new Parameter(`Raw`, `Indicates that this cmdlet ignores newline characters and gets the entire contents of the clipboard.`, `SwitchParameter`),
new Parameter(`TextFormatType`, `Specifies the text data format type of the clipboard. The acceptable values for this parameter are:


- Text


- UnicodeText


- Rtf


- Html


- CommaSeparatedValue`, `TextDataFormat`),
        ],
        `Gets the current Windows clipboard entry.`,
        `Get-Clipboard [-Format {Text | FileDropList | Image | Audio}] [-Raw] [-TextFormatType {Text | UnicodeText | Rtf | Html 
| CommaSeparatedValue}] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-CmsMessage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Command`,
        [
            new Parameter(`All`, `Indicates that this cmdlet gets all commands, including commands of the same type that have the same name. By default, 
Get-Command gets only the commands that run when you type the command name.


For more information about the method that Windows PowerShell uses to select the command to run when multiple commands 
have the same name, see about_Command_Precedence (http://go.microsoft.com/fwlink/?LinkID=113214) in the TechNet 
library. For information about module-qualified command names and running commands that do not run by default because 
of a name conflict, see about_Modules (http://go.microsoft.com/fwlink/?LinkID=144311).


This parameter was introduced in Windows PowerShell 3.0.


In Windows PowerShell 2.0, Get-Command gets all commands by default.`, `SwitchParameter`),
new Parameter(`ArgumentList`, `Specifies an array of arguments. This cmdlet gets information about a cmdlet or function when it is used with the 
specified parameters ("arguments"). The alias for ArgumentList is Args .


To detect dynamic parameters that are available only when certain other parameters are used, set the value of 
ArgumentList to the parameters that trigger the dynamic parameters.


To detect the dynamic parameters that a provider adds to a cmdlet, set the value of the ArgumentList parameter to a 
path in the provider drive, such as WSMan:, HKLM:, or Cert:. When the command is a Windows PowerShell provider cmdlet, 
enter only one path in each command. The provider cmdlets return only the dynamic parameters for the first path the 
value of ArgumentList . For information about the provider cmdlets, see about_Providers 
(http://go.microsoft.com/fwlink/?LinkID=113250) in the TechNet library.`, `Object[]`),
new Parameter(`CommandType`, `Specifies the  types of commands that this cmdlet gets. Enter one or more command types. Use CommandType or its alias, 
Type . By default, Get-Command gets all cmdlets, functions, and workflows, and aliases.


The acceptable values for this parameter are:


- Alias. Gets the aliases of all Windows PowerShell commands. For more information, see about_Aliases.


- All. Gets all command types. This parameter value is the equivalent of "Get-Command *".


- Application. Gets non-Windows-PowerShell files in paths listed in the Path environment variable ($env:path), 
including .txt, .exe, and .dll files. For more information about the Path environment variable, see 
about_Environment_Variables. - Cmdlet. Gets all cmdlets.


- ExternalScript. Gets all .ps1 files in the paths listed in the Path environment variable ($env:path). - Filter and 
Function. Gets all Windows PowerShell advanced and simple functions and filters.


- Script. Gets all script blocks. To get Windows PowerShell scripts (.ps1 files), use the ExternalScript value.


- Workflow. Gets all workflows. For more information about workflows, see Introducing Windows PowerShell Workflow.`, `CommandTypes`),
new Parameter(`FullyQualifiedModule`, `Specifies modules with names that are specified in the form of ModuleSpecification objects, described by the Remarks 
section of Module Specification Constructor 
(Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx on the Microsoft Developer Network 
(MSDN). For example, the FullyQualifiedModule parameter accepts a module name that is specified in the format 
@{ModuleName = "modulename"; ModuleVersion = "version_number"} or @{ModuleName = "modulename"; ModuleVersion = 
"version_number"; Guid = "GUID"}. ModuleName and ModuleVersion are required, but Guid is optional.


You cannot specify the FullyQualifiedModule parameter in the same command as a Module parameter. The two parameters 
are mutually exclusive.`, `ModuleSpecification[]`),
new Parameter(`ListImported`, `Indicates that this cmdlet gets only commands in the current session.


Starting in Windows PowerShell 3.0, by default, Get-Command gets all installed commands, including, but not limited 
to, the commands in the current session. In Windows PowerShell 2.0, it gets only commands in the current session.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Module`, `Specifies an array of modules. This cmdlet gets the commands that came from the specified modules or snap-ins. Enter 
the names of modules or snap-ins, or enter snap-in or module objects.


This parameter takes string values, but the value of this parameter can also be a PSModuleInfo or PSSnapinInfo object, 
such as the objects that the Get-Module, Get-PSSnapin, and Import-PSSession cmdlets return.


You can refer to this parameter by its name, Module , or by its alias, PSSnapin . The parameter name that you choose 
has no effect on the command output.`, `String[]`),
new Parameter(`Name`, `Specifies an array of names. This cmdlet gets only commands that have the specified name. Enter a name or name 
pattern. Wildcard characters are permitted.


To get commands that have the same name, use the All parameter. When two commands have the same name, by default, 
Get-Command gets the command that runs when you type the command name.`, `String[]`),
new Parameter(`Noun`, `Specifies an array of command nouns. This cmdlet gets commands, which include cmdlets, functions, workflows, and 
aliases, that have names that include the specified noun. Enter one or more nouns or noun patterns. Wildcard 
characters are permitted.`, `String[]`),
new Parameter(`ParameterName`, `Specifies an array of parameter names. This cmdlet gets commands in the session that have the specified parameters. 
Enter parameter names or parameter aliases. Wildcard characters are supported.


The ParameterName and ParameterType parameters search only commands in the current session.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
new Parameter(`ParameterType`, `Specifies an array of parameter names. This cmdlet gets commands in the session that have parameters of the specified 
type. Enter the full name or partial name of a parameter type. Wildcard characters are supported.


The ParameterName and ParameterType parameters search only commands in the current session.


This parameter was introduced in Windows PowerShell 3.0.`, `PSTypeName[]`),
new Parameter(`ShowCommandInfo`, `Indicates that this cmdlet displays command information.


For more information about the method that Windows PowerShell uses to select the command to run when multiple commands 
have the same name, see about_Command_Precedence. For information about module-qualified command names and running 
commands that do not run by default because of a name conflict, see about_Modules.


This parameter was introduced in Windows PowerShell 3.0.


In Windows PowerShell 2.0, Get-Command gets all commands by default.`, `SwitchParameter`),
new Parameter(`Syntax`, `Indicates that this cmdlet gets only the following specified data about the command:


- Aliases. Gets the standard name.


- Cmdlets. Gets the syntax.


- Functions and filters. Gets the function definition.


- Scripts and applications or files. Gets the path and filename.`, `SwitchParameter`),
new Parameter(`TotalCount`, `Specifies the number of commands to get. You can use this parameter to limit the output of a command.`, `Int32`),
new Parameter(`Verb`, `Specifies an array of command verbs. This cmdlet gets commands, which include cmdlets, functions, workflows, and 
aliases, that have names that include the specified verb. Enter one or more verbs or verb patterns. Wildcard 
characters are permitted.`, `String[]`),
        ],
        `Gets all commands.`,
        `Get-Command [[-Name] <String[]>] [[-ArgumentList] <Object[]>] [-All] [-CommandType {Alias | Function | Filter | Cmdlet 
| ExternalScript | Application | Script | Workflow | Configuration | All}] [-FullyQualifiedModule 
<ModuleSpecification[]>] [-ListImported] [-Module <String[]>] [-ParameterName <String[]>] [-ParameterType 
<PSTypeName[]>] [-ShowCommandInfo] [-Syntax] [-TotalCount <Int32>] [<CommonParameters>]

Get-Command [[-ArgumentList] <Object[]>] [-All] [-FullyQualifiedModule <ModuleSpecification[]>] [-ListImported] 
[-Module <String[]>] [-Noun <String[]>] [-ParameterName <String[]>] [-ParameterType <PSTypeName[]>] [-ShowCommandInfo] 
[-Syntax] [-TotalCount <Int32>] [-Verb <String[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ComputeProcess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ComputerInfo`,
        [
            new Parameter(`Property`, `Specifies, as a string array, the computer properties in which this cmdlet displays.`, `String[]`),
        ],
        `Gets a consolidated object of system and operating system properties.`,
        `Get-ComputerInfo [[-Property] <String[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ComputerRestorePoint`,
        [
            new Parameter(`LastStatus`, `Indicates that this cmdlet gets the status of the most recent system restore operation.`, `SwitchParameter`),
new Parameter(`RestorePoint`, `Specifies the restore points, as sequence numbers, that this cmdlet gets. Enter the sequence numbers of one or more 
restore points. By default, this cmdlet gets all restore points on the local computer.`, `Int32[]`),
        ],
        `Gets the restore points on the local computer.`,
        `Get-ComputerRestorePoint -LastStatus [<CommonParameters>]

Get-ComputerRestorePoint [[-RestorePoint] <Int32[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Content`,
        [
            new Parameter(`Encoding`, `Specifies the file encoding. The default is ASCII.

Valid values are:

-- ASCII:  Uses the encoding for the ASCII (7-bit) character set.
-- BigEndianUnicode:  Encodes in UTF-16 format using the big-endian byte order.
-- Byte:   Encodes a set of characters into a sequence of bytes.
-- String:  Uses the encoding type for a string.
-- Unicode:  Encodes in UTF-16 format using the little-endian byte order.
-- UTF7:   Encodes in UTF-7 format.
-- UTF8:  Encodes in UTF-8 format.
-- Unknown:  The encoding type is unknown or invalid. The data can be treated as binary.

Encoding is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works only 
in file system drives.

When reading from and writing to binary files, use a value of Byte for the Encoding dynamic parameter and a value of 0 
for the ReadCount parameter.  A ReadCount value of 0 reads the entire file in a single read operation and converts it 
into a single object (PSObject).  The default ReadCount value, 1, reads one byte in each read operation and converts 
each byte into a separate object, which causes errors when you use the Set-Content cmdlet to write the bytes to a 
file. For more information, see the examples.`, `FileSystemCmdletProviderEncoding`),
new Parameter(`Delimiter`, `Specifies the delimiter that Get-Content uses to divide the file into objects while it reads. 

The default is "\n", the end-of-line character. 

Therefore, by default, when reading a text file, Get-Content returns a collection of string objects, each of which 
ends with an end-of-line character. 

When you enter a delimiter that does not exist in the file, Get-Content returns the entire file as a single, 
undelimited object.

You can use this parameter to split a large file into smaller files by specifying a file separator, such as "End of 
Example", as the delimiter. The delimiter is preserved (not discarded) and becomes the last item in each file section.

Delimiter is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works 
only in file system drives.

Troubleshooting Note: Currently, when the value of the Delimiter parameter is an empty string, Get-Content does not 
return anything. This is a known issue. To force Get-Content to return the entire file as a single, undelimited 
string, enter a value that does not exist in the file.`, `string`),
new Parameter(`Force`, `Gets the contents of all files, including hidden files. By default, Get-Content does not get the contents of hidden 
files unless you specify the hidden file by name.`, `SwitchParameter`),
new Parameter(`Raw`, `Ignores newline characters and returns the entire contents of a file in one string. By default, the contents of a file 
is returned as a array of strings that is delimited by the newline character.

Raw is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works only in 
file system drives.

This parameter is introduced in Windows PowerShell 3.0.`, `switch`),
new Parameter(`Wait`, `Waits for the cmdlet to get the content before returning the command prompt. While waiting, Get-Content checks the 
file once each second until you interrupt it, such as by pressing CTRL+C.

Wait is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works only in 
file system drives.`, `SwitchParameter`),
new Parameter(`Stream`, `Gets the contents of the specified alternate NTFS file stream from the file. Enter the stream name. Wildcards are not 
supported. 

Stream is a dynamic parameter that the FileSystem provider adds to the Get-Content cmdlet. This parameter works only 
in file system drives.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see about_Transactions.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers that are installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies, as a string array, the item or items that this cmdlet omits when performing the operation. The value of 
this parameter qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when this cmdlet gets the objects, rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Include`, `Specifies, as a string array, the item or items that this cmdlet includes in the operation. The value of this 
parameter qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies the path to an item. Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Path`, `Specifies the path to an item. Get-Content gets the content of the item. Wildcards are permitted.`, `String[]`),
new Parameter(`ReadCount`, `Specifies how many lines of content are sent through the pipeline at a time. The default value is 1. A value of 0 
(zero) sends all of the content at one time.


This parameter does not change the content displayed, but it does affect the time it takes to display the content. As 
the value of ReadCount increases, the time it takes to return the first line increases, but the total time for the 
operation decreases. This can make a perceptible difference in very large items.`, `Int64`),
new Parameter(`Tail`, `Specifies the number of lines from the end of a file or other item.


This parameter was introduced in Windows PowerShell 3.0.


You can use the Tail parameter name or its alias, Last.`, `Int32`),
new Parameter(`TotalCount`, `Specifies the number of lines from the beginning of a file or other item. The default is -1 (all lines).


You can use the TotalCount parameter name or its aliases, First or Head.`, `Int64`),
        ],
        `Gets the contents of a file.`,
        `Get-Content [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | Unicode | Byte | 
BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail 
<Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

Get-Content [-Path] <String[]> [-Credential <PSCredential>] [-Delimiter <String>] [-Encoding {Unknown | String | 
Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-Raw] [-ReadCount <Int64>] [-Stream <String>] [-Tail 
<Int32>] [-TotalCount <Int64>] [-UseTransaction] [-Wait] [<CommonParameters>]

Get-Content [-Delimiter <string>] [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | 
UTF32 | Ascii | Default | Oem}] [-Force] [-Raw <switch>] [-Stream <string>] [-Wait] [-UseTransaction] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ControlPanelItem`,
        [
            new Parameter(`CanonicalName`, `Specifies, as a string array, the control panel items by their canonical names or name patterns that this cmdlet gets. 
Wildcards are permitted. If you enter multiple names, this cmdlet gets control panel items that match any of the 
names, as though the items in the name list were separated by an "or" operator.


By default, this cmdlet gets all control panel items in the system.`, `String[]`),
new Parameter(`Category`, `Specifies, as a string array, the categories of the control panel items in the specified categories that this cmdlet 
gets. Enter a category name or name pattern. Wildcards are permitted. If you enter multiple names, this cmdlet gets 
control panel items that match any of the names, as though the items in the name list were separated by an "or" 
operator. By default, this cmdlet gets all control panel items in the system.`, `String[]`),
new Parameter(`Name`, `Specifies, as a string array, the names or name patterns of the control panel that this cmdlet gets. Wildcards are 
permitted. You can also pipe a name or name pattern to this cmdlet.`, `String[]`),
        ],
        `Gets control panel items.`,
        `Get-ControlPanelItem -CanonicalName <String[]> [-Category <String[]>] [<CommonParameters>]

Get-ControlPanelItem [[-Name] <String[]>] [-Category <String[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Counter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Credential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Culture`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DAPolicyChange`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Date`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DeliveryOptimizationLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DeliveryOptimizationPerfSnap`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DeliveryOptimizationPerfSnapThisMonth`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DeliveryOptimizationStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DODownloadMode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DOPercentageMaxBackgroundBandwidth`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-DOPercentageMaxForegroundBandwidth`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Event`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-EventLog`,
        [
            new Parameter(`After`, `Specifies the data and time that this cmdlet get events that occur after. Enter a DateTime object, such as the one 
returned by the Get-Date cmdlet.`, `DateTime`),
new Parameter(`AsBaseObject`, `Indicates that this cmdlet returns a standard System.Diagnostics.EventLogEntry object for each event. Without this 
parameter, this cmdlet returns an extended PSObject object with additional EventLogName , Source , and InstanceId 
properties.


To see the effect of this parameter, pipe the events to the Get-Member cmdlet and examine the TypeName value in the 
result.`, `SwitchParameter`),
new Parameter(`AsString`, `Indicates that this cmdlet returns the output as strings, instead of objects.`, `SwitchParameter`),
new Parameter(`Before`, `Specifies the data and time that this cmdlet get events that occur before. Enter a DateTime object, such as the one 
returned by the Get-Date cmdlet.`, `DateTime`),
new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name (FQDN) of a remote 
computer. To specify the local computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Get-EventLog 
even if your computer is not configured to run remote commands.`, `String[]`),
new Parameter(`EntryType`, `Specifies, as a string array, the entry type of the events that this cmdlet gets.


The acceptable values for this parameter are:


- Error


- Information


- FailureAudit


- SuccessAudit


- Warning.


The default is all events.`, `String[]`),
new Parameter(`Index`, `Specifies the index values that this cmdlet gets events from.`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies the instance IDs that this cmdlet gets events from.`, `Int64[]`),
new Parameter(`List`, `Indicates that this cmdlet gets a list of event logs on the computer.`, `SwitchParameter`),
new Parameter(`LogName`, `Specifies the event log. Enter the log name (the value of the Log property; not the LogDisplayName) of one event log. 
Wildcard characters are not permitted. This parameter is required.`, `String`),
new Parameter(`Message`, `Specifies a string in the event message that this cmdlet gets event information from. You can use this property to 
search for messages that contain certain words or phrases. Wildcards are permitted.`, `String`),
new Parameter(`Newest`, `Specifies the maximum number of events that this cmdlet gets. This cmdlet gets the specified number of events, 
beginning with the newest event in the log.`, `Int32`),
new Parameter(`Source`, `Specifies, as a string array, sources that were written to the log that this cmdlet gets. Wildcards are permitted.`, `String[]`),
new Parameter(`UserName`, `Specifies, as a string array, user names that are associated with events. Enter names or name patterns, such as 
User01, User , or Domain01\User . Wildcards are permitted.`, `String[]`),
        ],
        `Gets the events in an event log, or a list of the event logs, on the local or remote computers.`,
        `Get-EventLog [-LogName] <String> [[-InstanceId] <Int64[]>] [-After <DateTime>] [-AsBaseObject] [-Before <DateTime>] 
[-ComputerName <String[]>] [-EntryType {Error | Information | FailureAudit | SuccessAudit | Warning}] [-Index 
<Int32[]>] [-Message <String>] [-Newest <Int32>] [-Source <String[]>] [-UserName <String[]>] [<CommonParameters>]

Get-EventLog [-AsString] [-ComputerName <String[]>] [-List] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-EventSubscriber`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ExecutionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-FormatData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Help`,
        [
            new Parameter(`Category`, `Displays help only for items in the specified category and their aliases. The acceptable values for this parameter are:


- Alias


- Cmdlet


- Provider


- General


- FAQ


- Glossary


- HelpFile


- ScriptCommand


- Function


- Filter


- ExternalScript


- All


- DefaultHelp


- Workflow


- DscResource


- Class


- Configuration




Conceptual topics are in the HelpFile category.`, `String[]`),
new Parameter(`Component`, `Displays commands with the specified component value, such as "Exchange." Enter a component name. Wildcard characters 
are permitted.


This parameter has no effect on displays of conceptual ("About_") help.`, `String[]`),
new Parameter(`Detailed`, `Adds parameter descriptions and examples to the basic help display.


This parameter is effective only when help files are for the command are installed on the computer. It has no effect 
on displays of conceptual ("About_") help.`, `SwitchParameter`),
new Parameter(`Examples`, `Displays only the name, synopsis, and examples. To display only the examples, type "(Get-Help <cmdlet-name>).Examples".


This parameter is effective only when help files are for the command are installed on the computer. It has no effect 
on displays of conceptual ("About_") help.`, `SwitchParameter`),
new Parameter(`Full`, `Displays the whole help topic for a cmdlet. This includes parameter descriptions and attributes, examples, input and 
output object types, and additional notes.


This parameter is effective only when help files are for the command are installed on the computer. It has no effect 
on displays of conceptual ("About_") help.`, `SwitchParameter`),
new Parameter(`Functionality`, `Displays help for items with the specified functionality. Enter the functionality. Wildcard characters are permitted.


This parameter has no effect on displays of conceptual ("About_") help.`, `String[]`),
new Parameter(`Name`, `Gets help about the specified command or concept. Enter the name of a cmdlet, function, provider, script, or workflow, 
such as "Get-Member", a conceptual topic name, such as "about_Objects", or an alias, such as "ls". Wildcard characters 
are permitted in cmdlet and provider names, but you cannot use wildcard characters to find the names of function help 
and script help topics.


To get help for a script that is not located in a path that is listed in the Path environment variable, type the path 
and file name of the script.


If you enter the exact name of a help topic, Get-Help displays the topic contents. If you enter a word or word pattern 
that appears in several help topic titles, Get-Help displays a list of the matching titles. If you enter a word that 
does not match any help topic titles, Get-Help displays a list of topics that include that word in their contents.


The names of conceptual topics, such as "about_Objects", must be entered in English, even in non-English versions of 
Windows PowerShell.`, `String`),
new Parameter(`Online`, `Displays the online version of a help topic in the default Internet browser. This parameter is valid only for cmdlet, 
function, workflow and script help topics. You cannot use the Online parameter in Get-Help commands in a remote 
session.


For information about supporting this feature in help topics that you write, see about_Comment_Based_Help 
(http://go.microsoft.com/fwlink/?LinkID=144309), and Supporting Online Help 
(http://go.microsoft.com/fwlink/?LinkID=242132), and How to Write Cmdlet 
Helphttp://go.microsoft.com/fwlink/?LinkID=123415 (http://go.microsoft.com/fwlink/?LinkID=123415) in the Microsoft 
Developer Network MSDN library.`, `SwitchParameter`),
new Parameter(`Parameter`, `Displays only the detailed descriptions of the specified parameters. Wildcards are permitted.


This parameter has no effect on displays of conceptual ("About_") help.`, `String`),
new Parameter(`Path`, `Gets help that explains how the cmdlet works in the specified provider path. Enter a Windows PowerShell provider path.


This parameter gets a customized version of a cmdlet help topic that explains how the cmdlet works in the specified 
Windows PowerShell provider path. This parameter is effective only for help about a provider cmdlet and only when the 
provider includes a custom version of the provider cmdlet help topic in its help file. To use this parameter, install 
the help file for the module that includes the provider.


To see the custom cmdlet help for a provider path, go to the provider path location and enter a Get-Help command or, 
from any path location, use the Path parameter of Get-Help to specify the provider path. You can also find custom 
cmdlet help online in the provider help section of the help topics. For example, you can find help for the New-Item 
cmdlet in the Wsman:\*\ClientCertificate path (http://go.microsoft.com/fwlink/?LinkID=158676).


For more information about Windows PowerShell providers, see about_Providers 
(http://go.microsoft.com/fwlink/?LinkID=113250) in the TechNet library.`, `String`),
new Parameter(`Role`, `Displays help customized for the specified user role. Enter a role. Wildcard characters are permitted.


Enter the role that the user plays in an organization. Some cmdlets display different text in their help files based 
on the value of this parameter. This parameter has no effect on help for the core cmdlets.`, `String[]`),
new Parameter(`ShowWindow`, `Displays the help topic in a window for easier reading. The window includes a Find search feature and a Settings box 
that lets you set options for the display. These include options to display only selected sections of a help topic.


The ShowWindow parameter supports help topics for commands, which include cmdlets, functions, CIM commands, workflows, 
and scripts, and conceptual About topics. It does not support provider help.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        ],
        `Displays information about Windows PowerShell commands and concepts.`,
        `Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | 
ScriptCommand | Function | Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | 
Configuration}] [-Component <String[]>] -Detailed [-Functionality <String[]>] [-Path <String>] [-Role <String[]>] 
[<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | 
ScriptCommand | Function | Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | 
Configuration}] [-Component <String[]>] -Examples [-Functionality <String[]>] [-Path <String>] [-Role <String[]>] 
[<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | 
ScriptCommand | Function | Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | 
Configuration}] [-Component <String[]>] [-Full] [-Functionality <String[]>] [-Path <String>] [-Role <String[]>] 
[<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | 
ScriptCommand | Function | Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | 
Configuration}] [-Component <String[]>] [-Functionality <String[]>] -Online [-Path <String>] [-Role <String[]>] 
[<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | 
ScriptCommand | Function | Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | 
Configuration}] [-Component <String[]>] [-Functionality <String[]>] -Parameter <String> [-Path <String>] [-Role 
<String[]>] [<CommonParameters>]

Get-Help [[-Name] <String>] [-Category {Alias | Cmdlet | Provider | General | FAQ | Glossary | HelpFile | 
ScriptCommand | Function | Filter | ExternalScript | All | DefaultHelp | Workflow | DscResource | Class | 
Configuration}] [-Component <String[]>] [-Functionality <String[]>] [-Path <String>] [-Role <String[]>] -ShowWindow 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-History`,
        [
            new Parameter(`Count`, `Specifies the number of the most recent history entries that this cmdlet gets. By, default, Get-History gets all 
entries in the session history. If you use both the Count and Id parameters in a command, the display ends with the 
command that is specified by the Id parameter.


In Windows PowerShell 2.0, by default, Get-History gets the 32 most recent entries.`, `Int32`),
new Parameter(`Id`, `Specifies an array of the IDs of entries in the session history. Get-History gets only specified entries. If you use 
both the Id and Count parameters in a command, Get-History gets the most recent entries ending with the entry 
specified by the Id parameter.`, `Int64[]`),
        ],
        `Gets a list of the commands entered during the current session.`,
        `Get-History [[-Id] <Int64[]>] [[-Count] <Int32>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Host`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-HotFix`,
        [
            new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name (FQDN) of a remote computer.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of this cmdlet 
even if your computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.`, `PSCredential`),
new Parameter(`Description`, `Specifies the hotfix descriptions that this cmdlet gets. Wildcards are permitted. The default is all hotfixes on the 
computer.`, `String[]`),
new Parameter(`Id`, `Specifies the hotfix IDs that this cmdlet gets. The default is all hotfixes on the computer.`, `String[]`),
        ],
        `Gets the hotfixes that have been applied to the local and remote computers.`,
        `Get-HotFix [-ComputerName <String[]>] [-Credential <PSCredential>] [-Description <String[]>] [<CommonParameters>]

Get-HotFix [[-Id] <String[]>] [-ComputerName <String[]>] [-Credential <PSCredential>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISAppPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISConfigAttributeValue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISConfigCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISConfigCollectionElement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISConfigElement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISConfigSection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISServerManager`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISSharedConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-IISSiteBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Item`,
        [
            new Parameter(`Stream`, `Gets the specified alternate NTFS file stream from the file. Enter the stream name. Wildcards are supported. To get 
all streams, use an asterisk (*). This parameter is not valid on folders.

Stream is a dynamic parameter that the FileSystem provider adds to the Get-Item cmdlet. This parameter works only in 
file system drives.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user-name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes in the operation. The value of this parameter 
qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.


The Exclude parameter is effective only when the command includes the contents of an item, such as C:\Windows\*, where 
the wildcard character specifies the contents of the C:\Windows directory.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when this cmdlet gets the objects, rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Indicates that this cmdlet gets items that cannot otherwise be accessed, such as hidden items. Implementation varies 
from provider to provider. For more information, see about_Providers. Even using the Force parameter, the cmdlet 
cannot override security restrictions.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value of this parameter 
qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.


The Include parameter is effective only when the command includes the contents of an item, such as C:\Windows\*, where 
the wildcard character specifies the contents of the C:\Windows directory.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path to the item. Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Path`, `Specifies the path to an item. This cmdlet gets the item at the specified location. Wildcards are permitted. This 
parameter is required, but the parameter name ("Path") is optional.


Use a dot (.) to specify the current location. Use the wildcard character (*) to specify all the items in the current 
location.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Gets files and folders.`,
        `Get-Item [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] 
-LiteralPath <String[]> [-Stream <String[]>] [-UseTransaction] [<CommonParameters>]

Get-Item [-Path] <String[]> [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] [-Stream <String[]>] [-UseTransaction] [<CommonParameters>]

Get-Item [-Stream <string>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ItemProperty`,
        [
            new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation. Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when this cmdlet gets the objects rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path to the item property. The value of LiteralPath is used exactly as it is typed. No characters are 
interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single 
quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Name`, `Specifies the name of the property or properties to retrieve.`, `String[]`),
new Parameter(`Path`, `Specifies the path to the item or items.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Gets the properties of a specified item.`,
        `Get-ItemProperty [[-Name] <String[]>] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include 
<String[]>] -LiteralPath <String[]> [-UseTransaction] [<CommonParameters>]

Get-ItemProperty [-Path] <String[]> [[-Name] <String[]>] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter 
<String>] [-Include <String[]>] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ItemPropertyValue`,
        [
            new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user. Type a user 
name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the Get-Credential 
cmdlet. If you type a user name, you are prompted for a password. This parameter is not supported by any providers 
that are installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are more efficient 
than other parameters, because the provider applies them when the cmdlet gets the objects rather than having Windows 
PowerShell filter the objects after they are retrieved.`, `String`),
new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path to the item property. In contrast to the Path parameter, the value of LiteralPath is used exactly as 
it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single 
quotation marks.`, `String[]`),
new Parameter(`Name`, `Specifies the name of the property or properties to retrieve.`, `String[]`),
new Parameter(`Path`, `Specifies the path to the item or items.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Gets the value for one or more properties of a specified item.`,
        `Get-ItemPropertyValue [-Name] <String[]> [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Include <String[]>] -LiteralPath <String[]> [-UseTransaction] [<CommonParameters>]

Get-ItemPropertyValue [[-Path] <String[]>] [-Name] <String[]> [-Credential <PSCredential>] [-Exclude <String[]>] 
[-Filter <String>] [-Include <String[]>] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Job`,
        [
            new Parameter(`After`, `Gets completed jobs that ended after the specified date and time. Enter a DateTime object, such as one returned by the 
Get-Date cmdlet or a string that can be converted to a DateTime object, such as "Dec 1, 2012 2:00 AM" or "11/06".


This parameter works only on custom job types, such as workflow jobs and scheduled jobs, that have an EndTime 
property. It does not work on standard background jobs, such as those created by using the Start-Job cmdlet. For 
information about support for this parameter, see the help topic for the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `DateTime`),
new Parameter(`Before`, `Gets completed jobs that ended before the specified date and time. Enter a DateTime object.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs, that have an EndTime 
property. It does not work on standard background jobs, such as those created by using the Start-Job cmdlet. For 
information about support for this parameter, see the help topic for the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `DateTime`),
new Parameter(`ChildJobState`, `Gets only the child jobs that have the specified state. The acceptable values for this parameter are:


- NotStarted


-  Running


-  Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




By default, Get-Job does not get child jobs. By using the IncludeChildJob parameter, Get-Job gets all child jobs. If 
you use the ChildJobState parameter, the IncludeChildJob parameter has no effect.

This parameter was introduced in Windows PowerShell 3.0.`, `JobState`),
new Parameter(`Command`, `Specifies an array of commands as strings. This cmdlet gets the jobs that include the specified commands. The default 
is all jobs. You can use wildcard characters to specify a command pattern.`, `String[]`),
new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet gets jobs that satisfy all of the conditions. Enter a hash table 
where the keys are job properties and the values are job property values.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs. It does not work on standard 
background jobs, such as those created by using the Start-Job cmdlet. For information about support for this 
parameter, see the help topic for the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Hashtable`),
new Parameter(`HasMoreData`, `Indicates whether this cmdlet gets only jobs that have the specified HasMoreData property value. The HasMoreData 
property indicates whether all job results have been received in the current session. To get jobs that have more 
results, specify a value of $True. To get jobs that do not have more results, specify a value of $False.


To get the results of a job, use the Receive-Job cmdlet.


When you use the Receive-Job cmdlet, it deletes from its in-memory, session-specific storage the results that it 
returned. When it has returned all results of the job in the current session, it sets the value of the HasMoreData 
property of the job to $False) to indicate that it has no more results for the job in the current session. Use the 
Keep parameter of Receive-Job to prevent Receive-Job from deleting results and changing the value of the HasMoreData 
property. For more information, type "Get-Help Receive-Job".


The HasMoreData property is specific to the current session. If results for a custom job type are saved outside of the 
session, such as the scheduled job type, which saves job results on disk, you can use the Receive-Job cmdlet in a 
different session to get the job results again, even if the value of HasMoreData is $False. For more information, see 
the help topics for the custom job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Boolean`),
new Parameter(`Id`, `Specifies an array of IDs of jobs that this cmdlet gets.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and to type 
than the instance ID, but it is unique only in the current session. You can type one or more IDs separated by commas. 
To find the ID of a job, type "Get-Job" without parameters.`, `Int32[]`),
new Parameter(`IncludeChildJob`, `Indicates that this cmdlet returns child jobs, in addition to parent jobs.


This parameter is especially useful for investigating workflow jobs, for which Get-Job returns a container parent job, 
and job failures, because the reason for the failure is saved in a property of the child job.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`InstanceId`, `Specifies an array of instance IDs of jobs that this cmdlet gets. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use 
Get-Job .`, `Guid[]`),
new Parameter(`Name`, `Specifies an array of instance friendly names of jobs that this cmdlet gets. Enter a job name, or use wildcard 
characters to enter a job name pattern. By default, Get-Job gets all jobs in the current session.`, `String[]`),
new Parameter(`Newest`, `Specifies a number of jobs to get. This cmdlet gets the jobs that ended most recently.


The Newest parameter does not sort or return the newest jobs in end-time order. To sort the output, use the 
Sort-Object cmdlet.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
new Parameter(`State`, `Specifies a job state. This cmdlet gets only jobs in the specified state. The acceptable values for this parameter are:


- NotStarted
- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




By default, Get-Job gets all the jobs in the current session.

For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx) in the 
Microsoft Developer Network (MSDN).`, `JobState`),
        ],
        `Gets Windows PowerShell background jobs that are running in the current session.`,
        `Get-Job [[-Id] <Int32[]>] [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | Completed | 
Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] [-HasMoreData 
<Boolean>] [-IncludeChildJob] [-Newest <Int32>] [<CommonParameters>]

Get-Job [-Name] <String[]> [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | Completed 
| Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] [-HasMoreData 
<Boolean>] [-IncludeChildJob] [-Newest <Int32>] [<CommonParameters>]

Get-Job [-InstanceId] <Guid[]> [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | 
Completed | Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] 
[-HasMoreData <Boolean>] [-IncludeChildJob] [-Newest <Int32>] [<CommonParameters>]

Get-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | 
Suspending | Stopping | AtBreakpoint} [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | 
Completed | Failed | Stopped | Blocked | Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] 
[-HasMoreData <Boolean>] [-IncludeChildJob] [-Newest <Int32>] [<CommonParameters>]

Get-Job [-After <DateTime>] [-Before <DateTime>] [-ChildJobState {NotStarted | Running | Completed | Failed | Stopped 
| Blocked | Suspended | Disconnected | Suspending | Stopping | AtBreakpoint}] [-Command <String[]>] [-HasMoreData 
<Boolean>] [-IncludeChildJob] [-Newest <Int32>] [<CommonParameters>]

Get-Job [-Filter] <Hashtable> [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-JobTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-KdsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-KdsRootKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-LocalGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-LocalGroupMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-LocalUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Location`,
        [
            new Parameter(`PSDrive`, `Specifies the current location in the specified Windows PowerShell drive that this cmdlet gets in the operation.


For instance, if you are in the Certificate: drive, you can use this parameter to find your current location in the C: 
drive.`, `String[]`),
new Parameter(`PSProvider`, `Specifies the current location in the drive supported by the Windows PowerShell provider that this cmdlet gets in the 
operation.


If the specified provider supports more than one drive, this cmdlet returns the location on the most recently accessed 
drive.


For example, if you are in the C: drive, you can use this parameter to find your current location in the drives of the 
Windows PowerShellRegistry provider.`, `String[]`),
new Parameter(`Stack`, `Indicates that this cmdlet displays the locations in the current location stack.


To display the locations in a different location stack, use the StackName parameter. For information about location 
stacks, see the Notes.`, `SwitchParameter`),
new Parameter(`StackName`, `Specifies, as a string array, the named location stacks. Enter one or more location stack names.


To display the locations in the current location stack, use the Stack parameter. To make a location stack the current 
location stack, use the Set-Location parameter. For information about location stacks, see the Notes.


This cmdlet cannot display the locations in the unnamed default stack unless it is the current stack.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Gets information about the current working location or a location stack.`,
        `Get-Location [-PSDrive <String[]>] [-PSProvider <String[]>] [-UseTransaction] [<CommonParameters>]

Get-Location [-Stack] [-StackName <String[]>] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Member`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Module`,
        [
            new Parameter(`All`, `Indicates that this cmdlet gets all modules in each module folder, including nested modules, manifest (.psd1) files, 
script module (.psm1) files, and binary module (.dll) files. Without this parameter, Get-Module gets only the default 
module in each module folder.`, `SwitchParameter`),
new Parameter(`CimNamespace`, `Specifies the namespace of an alternate CIM provider that exposes CIM modules. The default value is the namespace of 
the Module Discovery WMI provider.


Use this parameter to get CIM modules from computers and devices that are not running the Windows operating system.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`CimResourceUri`, `Specifies an alternate location for CIM modules. The default value is the resource URI of the Module Discovery WMI 
provider on the remote computer.


Use this parameter to get CIM modules from computers and devices that are not running the Windows operating system.


This parameter was introduced in Windows PowerShell 3.0.`, `Uri`),
new Parameter(`CimSession`, `Specifies a CIM session on the remote computer. Enter a variable that contains the CIM session or a command that gets 
the CIM session, such as a Get-CIMSessionhttp://go.microsoft.com/fwlink/?LinkId=227966 command. Get-Module uses the 
CIM session connection to get modules from the remote computer. When you import the module by using the Import-Module 
cmdlet and use the commands from the imported module in the current session, the commands actually run on the remote 
computer.


You can use this parameter to get modules from computers and devices that are not running the Windows operating 
system, and computers that have Windows PowerShell, but do not have Windows PowerShell remoting enabled.


The CimSession parameter gets all modules in the CIMSession . However, you can import only CIM-based and Cmdlet 
Definition XML (CDXML)-based modules.`, `CimSession`),
new Parameter(`FullyQualifiedName`, `Specifies names of modules in the form of ModuleSpecification objects. These objects are described in the Remarks 
section of ModuleSpecification Constructor 
(Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx 
(http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx) in the Microsoft Developer Network (MSDN) 
library. For example, the FullyQualifiedName parameter accepts a module name that is specified in the following 
formats:


@{ModuleName = "modulename"; ModuleVersion = "version_number"} @{ModuleName = "modulename"; ModuleVersion = 
"version_number"; Guid = "GUID"}. ModuleName and ModuleVersion are required, but Guid is optional.


You cannot specify the FullyQualifiedName parameter in the same command as a Name parameter.`, `ModuleSpecification[]`),
new Parameter(`ListAvailable`, `Indicates that this cmdlet gets all installed modules. Get-Module gets modules in paths listed in the PSModulePath 
environment variable. Without this parameter, Get-Module gets only the modules that are both listed in the 
PSModulePath environment variable, and that are loaded in the current session. ListAvailable does not return 
information about modules that are not found in the PSModulePath environment variable, even if those modules are 
loaded in the current session.`, `SwitchParameter`),
new Parameter(`Name`, `Specifies names or name patterns of modules that this cmdlet gets. Wildcard characters are permitted. You can also 
pipe the names to Get-Module . You cannot specify the FullyQualifiedName parameter in the same command as a Name 
parameter. Name cannot accept a module GUID as a value. To return modules by specifying a GUID, use FullyQualifiedName 
instead.`, `String[]`),
new Parameter(`PSEdition`, `@{Text=}`, `String`),
new Parameter(`PSSession`, `Gets the modules in the specified user-managed Windows PowerShell session ( PSSession ). Enter a variable that 
contains the session, a command that gets the session, such as a Get-PSSession command, or a command that creates the 
session, such as a New-PSSession command.


When the session is connected to a remote computer, you must specify the ListAvailable parameter.


A Get-Module command that uses the PSSession parameter is equivalent to using the Invoke-Command cmdlet to run a 
"Get-Module -ListAvailable" command in a PSSession .


This parameter was introduced in Windows PowerShell 3.0.`, `PSSession`),
new Parameter(`Refresh`, `Indicates that this cmdlet refreshes the cache of installed commands. The command cache is created when the session 
starts. It enables the Get-Command cmdlet to get commands from modules that are not imported into the session.


This parameter is designed for development and testing scenarios in which the contents of modules have changed since 
the session started.


When you specify the Refresh parameter in a command, you must specify ListAvailable .


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        ],
        `Gets the modules that have been imported or that can be imported into the current session.`,
        `Get-Module [[-Name] <String[]>] [-All] [-FullyQualifiedName <ModuleSpecification[]>] [<CommonParameters>]

Get-Module [[-Name] <String[]>] [-All] [-FullyQualifiedName <ModuleSpecification[]>] -ListAvailable [-PSEdition 
<String>] [-Refresh] [<CommonParameters>]

Get-Module [[-Name] <String[]>] [-CimNamespace <String>] [-CimResourceUri <Uri>] -CimSession <CimSession> 
[-FullyQualifiedName <ModuleSpecification[]>] [-ListAvailable] [-Refresh] [<CommonParameters>]

Get-Module [[-Name] <String[]>] [-FullyQualifiedName <ModuleSpecification[]>] [-ListAvailable] [-PSEdition <String>] 
-PSSession <PSSession> [-Refresh] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Package`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PackageProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PackageSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PfxCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PfxData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PmemDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PmemPhysicalDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PmemUnusedRegion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Process`,
        [
            new Parameter(`ComputerName`, `Specifies the computers for which this cmdlet gets active processes. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name (FQDN) of one or more computers. To specify the 
local computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of this cmdlet 
even if your computer is not configured to run remote commands.`, `String[]`),
new Parameter(`FileVersionInfo`, `Indicates that this cmdlet gets the file version information for the program that runs in the process.


On Windows Vista and later versions of Windows, you must open Windows PowerShell with the Run as administrator option 
to use this parameter on processes that you do not own.


You cannot use the FileVersionInfo and ComputerName parameters of the Get-Process cmdlet in the same command. To get 
file version information for a process on a remote computer, use the Invoke-Command cmdlet.


Using this parameter is equivalent to getting the MainModule.FileVersionInfo property of each process object. When you 
use this parameter, Get-Process returns a FileVersionInfo object (System.Diagnostics.FileVersionInfo), not a process 
object. So, you cannot pipe the output of the command to a cmdlet that expects a process object, such as Stop-Process.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies one or more processes by process ID (PID). To specify multiple IDs, use commas to separate the IDs. To find 
the PID of a process, type "Get-Process".`, `Int32[]`),
new Parameter(`IncludeUserName`, `Indicates that the UserName value of the Process object is returned with results of the command.`, `SwitchParameter`),
new Parameter(`InputObject`, `Specifies one or more process objects. Enter a variable that contains the objects, or type a command or expression 
that gets the objects.`, `Process[]`),
new Parameter(`Module`, `Indicates that this cmdlet gets the modules that have been loaded by the processes.


On Windows Vista and later versions of Windows, you must open Windows PowerShell with the Run as administrator option 
to use this parameter on processes that you do not own.


You cannot use the Module and ComputerName parameters of the Get-Process cmdlet in the same command. To get the 
modules that have been loaded by a process on a remote computer, use the Invoke-Command cmdlet.


This parameter is equivalent to getting the Modules property of each process object. When you use this parameter, this 
cmdlet returns a ProcessModule object (System.Diagnostics.ProcessModule), not a process object. So, you cannot pipe 
the output of the command to a cmdlet that expects a process object, such as Stop-Process.


When you use both the Module and FileVersionInfo parameters in the same command, this cmdlet returns a FileVersionInfo 
object with information about the file version of all modules.`, `SwitchParameter`),
new Parameter(`Name`, `Specifies one or more processes by process name. You can type multiple process names (separated by commas) and use 
wildcard characters. The parameter name ("Name") is optional.`, `String[]`),
        ],
        `Gets the processes that are running on the local computer or a remote computer.`,
        `Get-Process [[-Name] <String[]>] [-ComputerName <String[]>] [-FileVersionInfo] [-Module] [<CommonParameters>]

Get-Process [-ComputerName <String[]>] [-FileVersionInfo] -Id <Int32[]> [-Module] [<CommonParameters>]

Get-Process [-ComputerName <String[]>] [-FileVersionInfo] -InputObject <Process[]> [-Module] [<CommonParameters>]

Get-Process -Id <Int32[]> -IncludeUserName [<CommonParameters>]

Get-Process [[-Name] <String[]>] -IncludeUserName [<CommonParameters>]

Get-Process -IncludeUserName -InputObject <Process[]> [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ProcessMitigation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ProvisioningPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSBreakpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSCallStack`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSDrive`,
        [
            new Parameter(`LiteralName`, `Specifies the name of the drive.


The value of LiteralName is used exactly as it is typed. No characters are interpreted as wildcards. If the name 
includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not 
to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Name`, `Specifies, as a string array, the name or name of drives that this cmdlet gets in the operation. Type the drive name 
or letter without a colon (:).`, `String[]`),
new Parameter(`PSProvider`, `Specifies, as a string array, the Windows PowerShell provider. This cmdlet gets only the drives supported by this 
provider. Type the name of a provider, such as FileSystem, Registry, or Certificate.`, `String[]`),
new Parameter(`Scope`, `Specifies the scope in which this cmdlet gets the drives.


The acceptable values for this parameter are:


- Global


- Local


- Script


- a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its 
parent).


"Local" is the default. For more information, see about_Scopes (http://go.microsoft.com/fwlink/?LinkID=113260).`, `String`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Gets drives in the current session.`,
        `Get-PSDrive [-LiteralName] <String[]> [-PSProvider <String[]>] [-Scope <String>] [-UseTransaction] [<CommonParameters>]

Get-PSDrive [[-Name] <String[]>] [-PSProvider <String[]>] [-Scope <String>] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSHostProcessInfo`,
        [
            new Parameter(`Id`, `@{Text=}`, `Int32[]`),
new Parameter(`Name`, `@{Text=}`, `String[]`),
new Parameter(`Process`, `@{Text=}`, `Process[]`),
        ],
        ``,
        `Get-PSHostProcessInfo [-Id] <Int32[]> [<CommonParameters>]

Get-PSHostProcessInfo [[-Name] <String[]>] [<CommonParameters>]

Get-PSHostProcessInfo [-Process] <Process[]> [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSProvider`,
        [
            new Parameter(`PSProvider`, `Specifies the name or names of the Windows PowerShell providers about which this cmdlet gets information.`, `String[]`),
        ],
        `Gets information about the specified Windows PowerShell provider.`,
        `Get-PSProvider [[-PSProvider] <String[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSReadlineKeyHandler`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSReadlineOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSSession`,
        [
            new Parameter(`AllowRedirection`, `Indicates that this cmdlet allows redirection of this connection to an alternate Uniform Resource Identifier (URI). By 
default, Windows PowerShell does not redirect connections.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the 
ConnectionUri parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`ApplicationName`, `Specifies the name of an application. This cmdlet connects only to sessions that use the specified application.


Enter the application name segment of the connection URI. For example, in the following connection URI, the 
application name is WSMan: "http://localhost:5985/WSMAN". The application name of a session is stored in the 
Runspace.ConnectionInfo.AppName property of the session.


The value of this parameter is used to select and filter sessions. It does not change the application that the session 
uses.`, `String`),
new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate credentials for the session in which the Get-PSSession command 
runs.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the 
ComputerName or ConnectionUri parameter.


The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential.




The default value is Default.


For information about the values of this parameter, see the description of the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the 
Microsoft Developer Network (MSDN) library.


CAUTION: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to 
a remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.

This parameter was introduced in Windows PowerShell 3.0.`, `AuthenticationMechanism`),
new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to create the session in 
which the Get-PSSession command runs. Enter the certificate thumbprint of the certificate.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the 
ComputerName or ConnectionUri parameter.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they 
do not work with domain accounts.


To get a certificate thumbprint, use a Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`ComputerName`, `Specifies an array of names of computers. Gets the sessions that connect to the specified computers. Wildcard 
characters are not permitted. There is no default value.


Beginning in Windows PowerShell 3.0, PSSession objects are stored on the computers at the remote end of each 
connection. To get the sessions on the specified computers, Windows PowerShell creates a temporary connection to each 
computer and runs a Get-PSSession command.


Type the NetBIOS name, an IP address, or a fully-qualified domain name of one or more computers. To specify the local 
computer, type the computer name, localhost, or a dot (.).


Note: This parameter gets sessions only from computers that run Windows PowerShell 3.0 or later versions of Windows 
PowerShell. Earlier versions do not store sessions.`, `String[]`),
new Parameter(`ConfigurationName`, `Specifies the name of a configuration. This cmdlet gets only to sessions that use the specified session configuration.


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the 
configuration name, the following schema URI is prepended: http://schemas.microsoft.com/powershell. The configuration 
name of a session is stored in the ConfigurationName property of the session.


The value of this parameter is used to select and filter sessions. It does not change the session configuration that 
the session uses.


For more information about session configurations, see about_Session_Configurations.`, `String`),
new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint for the temporary session in which the Get-PSSession command 
runs. The URI must be fully qualified.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the 
ConnectionUri parameter.


The format of this string is:


<Transport>://<ComputerName>:<Port>/<ApplicationName>


The default value is: http://localhost:5985/WSMAN.


If you do not specify a ConnectionUri , you can use the UseSSL , ComputerName , Port , and ApplicationName parameters 
to specify the ConnectionURI values. Valid values for the Transport segment of the URI are HTTP and HTTPS. If you 
specify a connection URI with a Transport segment, but do not specify a port, the session is created with standards 
ports: 80 for HTTP and 443 for HTTPS. To use the default ports for Windows PowerShell remoting, specify port 5985 for 
HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection 
unless you use the AllowRedirection parameter in the command.


This parameter was introduced in Windows PowerShell 3.0.


This parameter gets sessions only from computers that run Windows PowerShell 3.0 or later versions of Windows 
PowerShell. Earlier versions do not store sessions.`, `Uri[]`),
new Parameter(`ContainerId`, `Specifies an array of IDs of containers. This cmdlet starts an interactive session with each of the specified 
containers. To see the containers that are available to you, use the Get-Container cmdlet.`, `String[]`),
new Parameter(`Credential`, `Specifies a user credential. This cmdlet runs the command with the permissions of the specified user. Specify a user 
account that has permission to connect to the remote computer and run a Get-PSSession command. The default is the 
current user. Type a user name, such as "User01", "Domain01\User01", or "User@Domain.com", or enter a PSCredential 
object, such as one returned by the Get-Credential cmdlet. When you type a user name, this cmdlet prompts you for a 
password.


This parameter configures to the temporary connection that is created to run a Get-PSSession command with the 
ComputerName or ConnectionUri parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
new Parameter(`Id`, `Specifies an array of session IDs. This cmdlet gets only the sessions with the specified IDs. Type one or more IDs, 
separated by commas, or use the range operator (..) to specify a range of IDs. You cannot use the ID parameter 
together with the ComputerName parameter.


An ID is an integer that uniquely identifies the user-managed sessions in the current session. It is easier to 
remember and type than the InstanceId , but it is unique only within the current session. The ID of a session is 
stored in the ID property of the session.`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies an array of instance IDs of sessions. This cmdlet gets only the sessions with the specified instance IDs.


The instance ID is a GUID that uniquely identifies a session on a local or remote computer. The InstanceID is unique, 
even when you have multiple sessions running in Windows PowerShell.


The instance ID of a session is stored in the InstanceID property of the session.`, `Guid[]`),
new Parameter(`Name`, `Specifies an array of session names. This cmdlet gets only the sessions that have the specified friendly names. 
Wildcard characters are permitted.


The friendly name of a session is stored in the Name property of the session.`, `String[]`),
new Parameter(`Port`, `Specifies the specified network port that is used for the temporary connection in which the Get-PSSession command 
runs. To connect to a remote computer, the remote computer must be listening on the port that the connection uses. The 
default ports are 5985, which is the WinRM port for HTTP, and 5986, which is the WinRM port for HTTPS.


Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that port. 
To configure the listener, type the following two commands at the Windows PowerShell prompt:


"Remove-Item -Path WSMan:\Localhost\listener\listener* -Recurse"


"New-Item -Path WSMan:\Localhost\listener -Transport http -Address * -Port <port-number>"


This parameter configures to the temporary connection that is created to run a Get-PSSession command with the 
ComputerName or ConnectionUri parameter.


Do not use the Port parameter unless you must. The Port set in the command applies to all computers or sessions on 
which the command runs. An alternate port setting might prevent the command from running on all computers.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session 
option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is 
set. Otherwise, the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference 
variable and in the session configuration. However, they do not take precedence over maximum values, quotas or limits 
set in the session configuration.


For a description of the session options, including the default values, see New-PSSessionOption. For information about 
the $PSSessionOption preference variable, see about_Preference_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113248) in the Microsoft TechNet library. For more information about session 
configurations, see about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
new Parameter(`State`, `Specifies a session state. This cmdlet gets only sessions in the specified state. The acceptable values for this 
parameter are: All, Opened, Disconnected, Closed, and Broken. The default value is All.


The session state value is relative to the current sessions. Sessions that were not created in the current sessions 
and are not connected to the current session have a state of Disconnected even when they are connected to a different 
session.


The state of a session is stored in the State property of the session.


This parameter was introduced in Windows PowerShell 3.0.`, `SessionFilterState`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run the Get-PSSession command. If 
you omit this parameter or enter a value of 0 (zero), the default value, 32, is used. The throttle limit applies only 
to the current command, not to the session or to the computer.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to establish the connection in which the 
Get-PSSession command runs. By default, SSL is not used. If you use this parameter, but SSL is not available on the 
port used for the command, the command fails.


This parameter configures the temporary connection that is created to run a Get-PSSession command with the 
ComputerName parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`VMId`, `Specifies an array of ID of virtual machines. This cmdlet starts an interactive session with each of the specified 
virtual machines. To see the virtual machines that are available to you, use the following command:


"Get-VM | Select-Object -Property Name, ID"`, `Guid[]`),
new Parameter(`VMName`, `Specifies an array of names of virtual machines. This cmdlet starts an interactive session with each of the specified 
virtual machines. To see the virtual machines that are available to you, use the Get-VM cmdlet.`, `String[]`),
        ],
        `Gets the Windows PowerShell sessions on local and remote computers.`,
        `Get-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Credential <PSCredential>] -InstanceId <Guid[]> [-SessionOption <PSSessionOption>] [-State {All | Opened | 
Disconnected | Closed | Broken}] [-ThrottleLimit <Int32>] [<CommonParameters>]

Get-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Credential <PSCredential>] [-Name <String[]>] [-SessionOption <PSSessionOption>] [-State {All | Opened | 
Disconnected | Closed | Broken}] [-ThrottleLimit <Int32>] [<CommonParameters>]

Get-PSSession [-ComputerName] <String[]> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Credential <PSCredential>] [-Name <String[]>] [-Port <Int32>] [-SessionOption <PSSessionOption>] [-State 
{All | Opened | Disconnected | Closed | Broken}] [-ThrottleLimit <Int32>] [-UseSSL] [<CommonParameters>]

Get-PSSession [-ComputerName] <String[]> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Credential <PSCredential>] -InstanceId <Guid[]> [-Port <Int32>] [-SessionOption <PSSessionOption>] [-State 
{All | Opened | Disconnected | Closed | Broken}] [-ThrottleLimit <Int32>] [-UseSSL] [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] -InstanceId <Guid[]> [-State {All | Opened | Disconnected | Closed | 
Broken}] -VMId <Guid[]> [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] -ContainerId <String[]> [-Name <String[]>] [-State {All | Opened | 
Disconnected | Closed | Broken}] [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] -ContainerId <String[]> -InstanceId <Guid[]> [-State {All | Opened | 
Disconnected | Closed | Broken}] [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] [-Name <String[]>] [-State {All | Opened | Disconnected | Closed | 
Broken}] -VMId <Guid[]> [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] [-Name <String[]>] [-State {All | Opened | Disconnected | Closed | 
Broken}] -VMName <String[]> [<CommonParameters>]

Get-PSSession [-ConfigurationName <String>] -InstanceId <Guid[]> [-State {All | Opened | Disconnected | Closed | 
Broken}] -VMName <String[]> [<CommonParameters>]

Get-PSSession [-Id] <Int32[]> [<CommonParameters>]

Get-PSSession [-InstanceId <Guid[]>] [<CommonParameters>]

Get-PSSession [-Name <String[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSSessionCapability`,
        [
            new Parameter(`ConfigurationName`, `Specifies the constrained session configuration (endpoint) that you are inspecting.`, `String`),
new Parameter(`Full`, `Indicates that this cmdlet returns the entire initial session state for the specified user at the specified 
constrained endpoint.`, `SwitchParameter`),
new Parameter(`Username`, `Specifies the user whose capabilities you are inspecting.`, `String`),
        ],
        `Gets the capabilities of a specific user on a constrained session configuration.`,
        `Get-PSSessionCapability [-ConfigurationName] <String> [-Username] <String> [-Full] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSSessionConfiguration`,
        [
            new Parameter(`Force`, `Suppresses the prompt to restart the WinRM service, if the service is not already running.`, `SwitchParameter`),
new Parameter(`Name`, `Specifies an array of names. This cmdlet gets the session configurations with the specified name or name pattern. 
Enter one or more session configuration names. Wildcard characters are permitted.`, `String[]`),
        ],
        `Gets the registered session configurations on the computer.`,
        `Get-PSSessionConfiguration [[-Name] <String[]>] [-Force] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-PSSnapin`,
        [
            new Parameter(`Name`, `Specifies an array of snap-in names. This cmdlet gets only the specified Windows PowerShell snap-ins. Wildcard 
characters are permitted.`, `String[]`),
new Parameter(`Registered`, `Indicates that this cmdlet gets the Windows PowerShell snap-ins that have been registered on the system even if they 
have not yet been added to the session.


The snap-ins that are installed with Windows PowerShell do not appear in this list.


Without this parameter, Get-PSSnapin gets the Windows PowerShell snap-ins that have been added to the session.`, `SwitchParameter`),
        ],
        `Gets the Windows PowerShell snap-ins on the computer.`,
        `Get-PSSnapin [[-Name] <String[]>] [-Registered] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Random`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Runspace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-RunspaceDebug`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ScheduledJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-ScheduledJobOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SecureBootPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SecureBootUEFI`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Service`,
        [
            new Parameter(`ComputerName`, `Gets the services running on the specified computers. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name (FQDN) of a remote computer. To specify the 
local computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Get-Service 
even if your computer is not configured to run remote commands.`, `String[]`),
new Parameter(`DependentServices`, `Indicates that this cmdlet gets only the services that depend upon the specified service.


By default, this cmdlet gets all services.`, `SwitchParameter`),
new Parameter(`DisplayName`, `Specifies, as a string array, the display names of services to be retrieved. Wildcards are permitted. By default, this 
cmdlet gets all services on the computer.`, `String[]`),
new Parameter(`Exclude`, `Specifies, as a string array, a service or services that this cmdlet excludes from the operation. The value of this 
parameter qualifies the Name parameter. Enter a name element or pattern, such as "s*". Wildcards are permitted.`, `String[]`),
new Parameter(`Include`, `Specifies, as a string array, a service or services that this cmdlet includes in the operation. The value of this 
parameter qualifies the Name parameter. Enter a name element or pattern, such as "s*". Wildcards are permitted.`, `String[]`),
new Parameter(`InputObject`, `Specifies ServiceController objects representing the services to be retrieved. Enter a variable that contains the 
objects, or type a command or expression that gets the objects. You can also pipe a service object to this cmdlet.`, `ServiceController[]`),
new Parameter(`Name`, `Specifies the service names of services to be retrieved. Wildcards are permitted. By default, this cmdlet gets all of 
the services on the computer.`, `String[]`),
new Parameter(`RequiredServices`, `Indicates that this cmdlet gets only the services that this service requires.


This parameter gets the value of the ServicesDependedOn property of the service. By default, this cmdlet gets all 
services.`, `SwitchParameter`),
        ],
        `Gets the services on a local or remote computer.`,
        `Get-Service [-ComputerName <String[]>] [-DependentServices] -DisplayName <String[]> [-Exclude <String[]>] [-Include 
<String[]>] [-RequiredServices] [<CommonParameters>]

Get-Service [-ComputerName <String[]>] [-DependentServices] [-Exclude <String[]>] [-Include <String[]>] [-InputObject 
<ServiceController[]>] [-RequiredServices] [<CommonParameters>]

Get-Service [[-Name] <String[]>] [-ComputerName <String[]>] [-DependentServices] [-Exclude <String[]>] [-Include 
<String[]>] [-RequiredServices] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-SystemDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TimeZone`,
        [
            new Parameter(`Id`, `Specifies, as a string array, the ID or IDs of the time zones that this cmdlet gets.`, `String[]`),
new Parameter(`ListAvailable`, `Indicates that this cmdlet gets all available time zones.`, `SwitchParameter`),
new Parameter(`Name`, `Specifies, as a string array, the name or names of the time zones that this cmdlet gets.`, `String[]`),
        ],
        `Gets the current time zone or a list of available time zones.`,
        `Get-TimeZone -Id <String[]> [<CommonParameters>]

Get-TimeZone -ListAvailable [<CommonParameters>]

Get-TimeZone [[-Name] <String[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TlsCipherSuite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TlsEccCurve`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Tpm`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TpmEndorsementKeyInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TpmSupportedFeature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TraceSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Transaction`,
        [
            
        ],
        `Gets the current (active) transaction.`,
        `Get-Transaction [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TroubleshootingPack`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TrustedProvisioningCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-TypeData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-UevAppxPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-UevConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-UevStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-UevTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-UevTemplateProgram`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-UICulture`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Unique`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-UsageAggregates`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Variable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackCloudService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackCloudVMRoleSizeProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackLogicalNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackStaticIPAddressPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackVMOSDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackVMRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackVMSizeProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackVMSubnet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackVMTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WAPackVNet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebAppDomain`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebAppPoolState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebConfigFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebConfigurationBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebConfigurationLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebConfigurationLock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebConfigurationProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebFilePath`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebGlobalModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebHandler`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebItemState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebManagedModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebRequest`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-Website`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebsiteState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebURL`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WebVirtualDirectory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WIMBootEntry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WinAcceptLanguageFromLanguageListOptOut`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WinCultureFromLanguageListOptOut`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WinDefaultInputMethodOverride`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsCapability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsDeveloperLicense`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsEdition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsErrorReporting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsImageContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsOptionalFeature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WindowsSearchSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WinEvent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WinHomeLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WinLanguageBarOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WinSystemLocale`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WinUILanguageOverride`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WinUserLanguageList`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WmiObject`,
        [
            new Parameter(`Amended`, `Indicates whether the objects that are returned from WMI should contain amended information. Typically, amended 
information is localizable information, such as object and property descriptions, that is attached to the WMI object.`, `SwitchParameter`),
new Parameter(`AsJob`, `Indicates that this cmdlet runs the command as a background job. Use this parameter to run commands that take a long 
time to finish.


When you use the AsJob parameter, the command returns an object that represents the background job and then displays 
the command prompt. You can continue to work in the session while the job finishes. If Get-WmiObject is used on a 
remote computer, the job is created on the local computer, and the results from remote computers are automatically 
returned to the local computer. To manage the job, use the cmdlets that contain the Job cmdlets. To get the job 
results, use the Receive-Job cmdlet.


To use this parameter with remote computers, the local and remote computers must be configured for remoting. 
Additionally, you must start Windows PowerShell by using the Run as administrator option in Windows Vista and later 
versions of Windows. For more information, see about_Remote_Requirements.


For more information about Windows PowerShellbackground jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
new Parameter(`Authentication`, `Specifies the authentication level to be used with the WMI connection. The acceptable values for this parameter are:


-1: Unchanged


0: Default


1: None (No authentication in performed.)


2: Connect (Authentication is performed only when the client establishes a relationship with the application.)


3: Call (Authentication is performed only at the beginning of each call when the application receives the request.)


4: Packet (Authentication is performed on all the data that is received from the client.)


5: PacketIntegrity (All the data that is transferred between the client  and the application is authenticated and 
verified.)


6: PacketPrivacy (The properties of the other authentication levels are used, and all the data is encrypted.)`, `AuthenticationLevel`),
new Parameter(`Authority`, `Specifies the authority to use to authenticate the WMI connection. You can specify standard NTLM or Kerberos 
authentication. To use NTLM, set the authority setting to ntlmdomain:<DomainName>, where <DomainName> identifies a 
valid NTLM domain name. To use Kerberos, specify kerberos:<DomainName>\<ServerName>". You cannot include the authority 
setting when you connect to the local computer.`, `String`),
new Parameter(`Class`, `Specifies the name of a WMI class. When this parameter is used, the cmdlet retrieves instances of the WMI class.`, `String`),
new Parameter(`ComputerName`, `Specifies the target computer for the management operation. Enter a fully qualified domain name (FQDN), a NetBIOS 
name, or an IP address. When the remote computer is in a different domain than the local computer, the fully qualified 
domain name is required.


The default is the local computer. To specify the local computer, such as in a list of computer names, use 
"localhost", the local computer name, or a dot (.).


This parameter does not rely on Windows PowerShell remoting, which uses WS-Management. You can use the ComputerName 
parameter of Get-WmiObject even if your computer is not configured to run WS-Management remote commands.`, `String[]`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user. Type a user 
name, such as User01, Domain01\User01, or User@Contoso.com. Or, enter a PSCredential object, such as an object that is 
returned by the Get-Credential cmdlet. When you type a user name, you are prompted for a password.`, `PSCredential`),
new Parameter(`DirectRead`, `Specifies whether direct access to the WMI provider is requested for the specified class without any regard to its 
base class or to its derived classes.`, `SwitchParameter`),
new Parameter(`EnableAllPrivileges`, `Indicates that this cmdlet enables all the privileges of the current user before the command makes the WMI call.`, `SwitchParameter`),
new Parameter(`Filter`, `Specifies a Where clause to use as a filter. Uses the syntax of the WMI Query Language (WQL).


Important: Do not include the Where keyword in the value of the parameter. For example, the following commands return 
only the logical disks that have a DeviceID of 'c:' and services that have the name 'WinRM' without using the Where 
keyword.


"Get-WmiObject Win32_LogicalDisk -filter "DeviceID = 'c:' ""


"Get-WmiObject win32_service -filter "name='WinRM'""`, `String`),
new Parameter(`Impersonation`, `Specifies the impersonation level to use.


The acceptable values for this parameter are:


0: Default. Reads the local registry for the default impersonation level , which is usually set to "3: Impersonate".


1: Anonymous. Hides the credentials of the caller.


2: Identify. Allows objects to query the credentials of the caller.


3: Impersonate. Allows objects to use the credentials of the caller.


4: Delegate. Allows objects to permit other objects to use the credentials of the caller.`, `ImpersonationLevel`),
new Parameter(`List`, `Gets the names of the WMI classes in the WMI repository namespace that is specified by the Namespace parameter.


If you specify the List parameter, but not the Namespace parameter, Get-WmiObject uses the Root\Cimv2 namespace by 
default. This cmdlet does not use the Default Namespace registry entry in the 
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM\Scripting registry key to determine the default namespace.`, `SwitchParameter`),
new Parameter(`Locale`, `Specifies the preferred locale for WMI objects. Enter a value in MS_<LCID> format.`, `String`),
new Parameter(`Namespace`, `Specifies the WMI repository namespace where the specified WMI class is located when used with the Class parameter. 
When used with the List parameter, it specifies the namespace from which to gather WMI class information.`, `String`),
new Parameter(`Property`, `Specifies the WMI class properties that this cmdlet gets information from. Enter the property names.`, `String[]`),
new Parameter(`Query`, `Specifies WMI Query Language (WQL) statement that this cmdlet runs. This parameter does not support event queries.`, `String`),
new Parameter(`Recurse`, `Indicates that this cmdlet searches the current namespace and all other namespaces for the class name that is 
specified by the Class parameter.`, `SwitchParameter`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of WMI operations that can be executed simultaneously. This parameter is valid only when 
the AsJob parameter is used in the command.`, `Int32`),
        ],
        `Gets instances of WMI classes or information about the available classes.`,
        `Get-WmiObject [-Class] <String> [[-Property] <String[]>] [-Amended] [-AsJob] [-Authentication {Default | None | 
Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName 
<String[]>] [-Credential <PSCredential>] [-DirectRead] [-EnableAllPrivileges] [-Filter <String>] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] [-ThrottleLimit 
<Int32>] [<CommonParameters>]

Get-WmiObject [[-Class] <String>] [-Amended] [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | 
PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Credential 
<PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] 
[-List] [-Locale <String>] [-Namespace <String>] [-Recurse] [-ThrottleLimit <Int32>] [<CommonParameters>]

Get-WmiObject [-Amended] [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | 
PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Credential <PSCredential>] 
[-DirectRead] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] 
[-Locale <String>] [-Namespace <String>] -Query <String> [-ThrottleLimit <Int32>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WSManCredSSP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Get-WSManInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Grant-AzureHDInsightHttpServicesAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Grant-AzureHDInsightRdpAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Grant-AzureRmDiskAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Grant-AzureRmHDInsightHttpServicesAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Grant-AzureRmHDInsightRdpServicesAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Grant-AzureRmSnapshotAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Group-Object`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-Alias`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureKeyVaultCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzurePublishSettingsFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmApiManagementApi`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmApiManagementHostnameCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmAutomationDscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmAutomationDscNodeConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmContext`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmDataLakeStoreItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmMlWebService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmRedisCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureRmSiteRecoveryVaultSettingsFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureSiteRecoveryVaultSettingsFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureStorSimpleLegacyApplianceConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureStorSimpleLegacyVolumeContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-AzureVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-BinaryMiLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-Certificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-Clixml`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-Counter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-Csv`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-LocalizedData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-Module`,
        [
            new Parameter(`Alias`, `Specifies the aliases that this cmdlet imports from the module into the current session. Enter a comma-separated list 
of aliases. Wildcard characters are permitted.


Some modules automatically export selected aliases into your session when you import the module. This parameter lets 
you select from among the exported aliases.`, `String[]`),
new Parameter(`ArgumentList`, `Specifies an array of arguments, or parameter values, that are passed to a script module during the Import-Module 
command. This parameter is valid only when you are importing a script module.


You can also refer to the ArgumentList parameter by its alias, args . For more information, see about_Aliases.`, `Object[]`),
new Parameter(`AsCustomObject`, `Indicates that this cmdlet returns a custom object with members that represent the imported module members. This 
parameter is valid only for script modules.


When you use the AsCustomObject parameter, Import-Module imports the module members into the session and then returns 
a PSCustomObject object instead of a PSModuleInfo object. You can save the custom object in a variable and use dot 
notation to invoke the members.`, `SwitchParameter`),
new Parameter(`Assembly`, `Specifies an array of assembly objects. This cmdlet imports the cmdlets and providers implemented in the specified 
assembly objects. Enter a variable that contains assembly objects or a command that creates assembly objects. You can 
also pipe an assembly object to Import-Module .


When you use this parameter, only the cmdlets and providers implemented by the specified assemblies are imported. If 
the module contains other files, they are not imported, and you might be missing important members of the module. Use 
this parameter for debugging and testing the module, or when you are instructed to use it by the module author.`, `Assembly[]`),
new Parameter(`CimNamespace`, `Specifies the namespace of an alternate CIM provider that exposes CIM modules. The default value is the namespace of 
the Module Discovery WMI provider.


Use this parameter to import CIM modules from computers and devices that are not running a Windows operating system.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`CimResourceUri`, `Specifies an alternate location for CIM modules. The default value is the resource URI of the Module Discovery WMI 
provider on the remote computer.


Use this parameter to import CIM modules from computers and devices that are not running a Windows operating system.


This parameter was introduced in Windows PowerShell 3.0.`, `Uri`),
new Parameter(`CimSession`, `Specifies a CIM session on the remote computer. Enter a variable that contains the CIM session or a command that gets 
the CIM session, such as a Get-CIMSessionhttp://go.microsoft.com/fwlink/?LinkId=227966 command. Import-Module uses the 
CIM session connection to import modules from the remote computer into the current session. When you use the commands 
from the imported module in the current session, the commands actually run on the remote computer.


You can use this parameter to import modules from computers and devices that are not running the Windows operating 
system, and Windows computers that have Windows PowerShell, but do not have Windows PowerShell remoting enabled.


This parameter was introduced in Windows PowerShell 3.0.`, `CimSession`),
new Parameter(`Cmdlet`, `Specifies an array of cmdlets that this cmdlet imports from the module into the current session. Wildcard characters 
are permitted.


Some modules automatically export selected cmdlets into your session when you import the module. This parameter lets 
you select from among the exported cmdlets.`, `String[]`),
new Parameter(`DisableNameChecking`, `Indicates that this cmdlet suppresses the message that warns you when you import a cmdlet or function whose name 
includes an unapproved verb or a prohibited character.


By default, when a module that you import exports cmdlets or functions that have unapproved verbs in their names, 
Windows PowerShell displays the following warning message:


"WARNING: Some imported command names include unapproved verbs which might make them less discoverable.  Use the 
Verbose parameter for more detail or type Get-Verb to see the list of approved verbs."


This message is only a warning. The complete module is still imported, including the non-conforming commands. Although 
the message is displayed to module users, the naming problem should be fixed by the module author.`, `SwitchParameter`),
new Parameter(`Force`, `Indicates that this cmdlet re-imports a module and its members, even if the module or its members have an access mode 
of read-only.`, `SwitchParameter`),
new Parameter(`FullyQualifiedName`, `Specifies the fully qualified name of the module specification.`, `ModuleSpecification[]`),
new Parameter(`Function`, `Specifies an array of functions that this cmdlet imports from the module into the current session. Wildcard characters 
are permitted.


Some modules automatically export selected functions into your session when you import the module. This parameter lets 
you select from among the exported functions.`, `String[]`),
new Parameter(`Global`, `Indicates that this cmdlet imports modules into the global session state so they are available to all commands in the 
session. By default, the commands in a module, including commands from nested modules, are imported into the caller's 
session state. To restrict the commands that a module exports, use an Export-ModuleMember command in the script module.


The Global parameter is equivalent to the Scope parameter with a value of Global.`, `SwitchParameter`),
new Parameter(`MaximumVersion`, `Specifies a maximum version. This cmdlet imports only a version of the module that is less than or equal to the 
specified value. If no version qualifies, Import-Module generates an error.`, `String`),
new Parameter(`MinimumVersion`, `Specifies a minimum version. This cmdlet imports only a version of the module that is greater than or equal to the 
specified value. If no version qualifies, Import-Module generates an error.


By default, Import-Module imports the module without checking the version number.


Use the MinimumVersion parameter name or its alias, Version.


To specify an exact version, use the RequiredVersion parameter. You can also use the Module and Version parameters of 
the #Requires keyword to require a specific version of a module in a script.


This parameter was introduced in Windows PowerShell 3.0.`, `Version`),
new Parameter(`ModuleInfo`, `Specifies an array of module objects to import. Enter a variable that contains the module objects, or a command that 
gets the module objects, such as the following command: "Get-Module -ListAvailable". You can also pipe module objects 
to Import-Module .`, `PSModuleInfo[]`),
new Parameter(`Name`, `Specifies the names of the modules to import. Enter the name of the module or the name of a file in the module, such 
as a .psd1, .psm1, .dll, or ps1 file. File paths are optional. Wildcard characters are not permitted. You can also 
pipe module names and file names to Import-Module .


If you omit a path, Import-Module looks for the module in the paths saved in the PSModulePath environment variable 
($env:PSModulePath).


Specify only the module name whenever possible. When you specify a file name, only the members that are implemented in 
that file are imported. If the module contains other files, they are not imported, and you might be missing important 
members of the module.`, `String[]`),
new Parameter(`NoClobber`, `Indicates that this cmdlet does not import commands that have the same names as existing commands in the current 
session. By default, Import-Module imports all exported module commands.


Commands that have the same names can hide or replace commands in the session. To avoid command name conflicts in a 
session, use the Prefix or NoClobber parameters. For more information about name conflicts and command precedence, see 
"Modules and Name Conflicts" in about_Modules and about_Command_Precedence.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`PSSession`, `Specifies a Windows PowerShell user-managed session ( PSSession ) from which this cmdlet import modules into the 
current session. Enter a variable that contains a PSSession or a command that gets a PSSession , such as a 
Get-PSSession command.


When you import a module from a different session into the current session, you can use the cmdlets from the module in 
the current session, just as you would use cmdlets from a local module. Commands that use the remote cmdlets actually 
run in the remote session, but the remoting details are managed in the background by Windows PowerShell.


This parameter uses the Implicit Remoting feature of Windows PowerShell. It is equivalent to using the 
Import-PSSession cmdlet to import particular modules from a session. Import-Module cannot import Windows PowerShell 
Core modules from another session. The Windows PowerShell Core modules have names that begin with Microsoft.PowerShell.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSession`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`Prefix`, `Specifies a prefix that this cmdlet adds to the nouns in the names of imported module members.


Use this parameter to avoid name conflicts that might occur when different members in the session have the same name. 
This parameter does not change the module, and it does not affect files that the module imports for its own use. These 
are known as nested modules. This cmdlet affects only the names of members in the current session.


For example, if you specify the prefix UTC and then import a Get-Date cmdlet, the cmdlet is known in the session as 
Get-UTCDate , and it is not confused with the original Get-Date cmdlet.


The value of this parameter takes precedence over the DefaultCommandPrefix property of the module, which specifies the 
default prefix.`, `String`),
new Parameter(`RequiredVersion`, `Specifies a version of the module that this cmdlet imports. If the version is not installed, Import-Module generates 
an error.


By default, Import-Module imports the module without checking the version number.


To specify a minimum version, use the MinimumVersion parameter. You can also use the Module and Version parameters of 
the #Requires keyword to require a specific version of a module in a script.


This parameter was introduced in Windows PowerShell 3.0.


Scripts that use RequiredVersion to import modules that are included with existing releases of the Windows operating 
system do not automatically run in future releases of the Windows operating system. This is because Windows PowerShell 
module version numbers in future releases of the Windows operating system are higher than module version numbers in 
existing releases of the Windows operating system.`, `Version`),
new Parameter(`Scope`, `Specifies a scope into which this cmdlet imports the module.


The acceptable values for this parameter are:


- Global . Available to all commands in the session. Equivalent to the Global parameter. - Local . Available only in 
the current scope.


By default, the module is imported into the current scope, which could be a script or module.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`Variable`, `Specifies an array of variables that this cmdlet imports from the module into the current session. Enter a list of 
variables. Wildcard characters are permitted.


Some modules automatically export selected variables into your session when you import the module. This parameter lets 
you select from among the exported variables.`, `String[]`),
        ],
        `Adds modules to the current session.`,
        `Import-Module [-Assembly] <Assembly[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet 
<String[]>] [-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-NoClobber] [-PassThru] [-Prefix 
<String>] [-Scope {Local | Global}] [-Variable <String[]>] [<CommonParameters>]

Import-Module [-Name] <String[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-CimNamespace 
<String>] [-CimResourceUri <Uri>] -CimSession <CimSession> [-Cmdlet <String[]>] [-DisableNameChecking] [-Force] 
[-Function <String[]>] [-Global] [-MaximumVersion <String>] [-MinimumVersion <Version>] [-NoClobber] [-PassThru] 
[-Prefix <String>] [-RequiredVersion <Version>] [-Scope {Local | Global}] [-Variable <String[]>] [<CommonParameters>]

Import-Module [-FullyQualifiedName] <ModuleSpecification[]> [-Alias <String[]>] [-ArgumentList <Object[]>] 
[-AsCustomObject] [-Cmdlet <String[]>] [-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-NoClobber] 
[-PassThru] [-Prefix <String>] [-Scope {Local | Global}] [-Variable <String[]>] [<CommonParameters>]

Import-Module [-FullyQualifiedName] <ModuleSpecification[]> [-Alias <String[]>] [-ArgumentList <Object[]>] 
[-AsCustomObject] [-Cmdlet <String[]>] [-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-NoClobber] 
-PSSession <PSSession> [-PassThru] [-Prefix <String>] [-Scope {Local | Global}] [-Variable <String[]>] 
[<CommonParameters>]

Import-Module [-Name] <String[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet <String[]>] 
[-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-MaximumVersion <String>] [-MinimumVersion 
<Version>] [-NoClobber] [-PassThru] [-Prefix <String>] [-RequiredVersion <Version>] [-Scope {Local | Global}] 
[-Variable <String[]>] [<CommonParameters>]

Import-Module [-Name] <String[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet <String[]>] 
[-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-MaximumVersion <String>] [-MinimumVersion 
<Version>] [-NoClobber] -PSSession <PSSession> [-PassThru] [-Prefix <String>] [-RequiredVersion <Version>] [-Scope 
{Local | Global}] [-Variable <String[]>] [<CommonParameters>]

Import-Module [-ModuleInfo] <PSModuleInfo[]> [-Alias <String[]>] [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet 
<String[]>] [-DisableNameChecking] [-Force] [-Function <String[]>] [-Global] [-NoClobber] [-PassThru] [-Prefix 
<String>] [-Scope {Local | Global}] [-Variable <String[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-PackageProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-PfxCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-PSSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-StartLayout`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-TpmOwnerAuth`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Import-UevConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Initialize-PmemPhysicalDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Initialize-Tpm`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Install-AzureRmServerManagementGatewayProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Install-Package`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Install-PackageProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Install-ProvisioningPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Install-TrustedProvisioningCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-AzureHDInsightHiveJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-AzureRecoveryServicesVaultUpgrade`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-AzureRemoteAppSessionLogoff`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-AzureRmHDInsightHiveJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-AzureRmResourceAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-AzureRmServerManagementPowerShellCommand`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-CimMethod`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-Command`,
        [
            new Parameter(`AllowRedirection`, `Allows redirection of this connection to an alternate Uniform Resource Identifier (URI).


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different 
URI. By default, Windows PowerShell does not redirect connections, but you can use this parameter to allow it to 
redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount 
session option value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the 
MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
new Parameter(`ApplicationName`, `Specifies the application name segment of the connection URI. Use this parameter to specify the application name when 
you are not using the ConnectionURI parameter in the command.


The default value is the value of the $PSSessionApplicationName preference variable on the local computer. If this 
preference variable is not defined, the default value is WSMAN. This value is appropriate for most uses. For more 
information, see about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248).


The WinRM service uses the application name to select a listener to service the connection request. The value of this 
parameter should match the value of the URLPrefix property of a listener on the remote computer.`, `String`),
new Parameter(`ArgumentList`, `Supplies the values of local variables in the command. The variables in the command are replaced by these values 
before the command is run on the remote computer. Enter the values in a comma-separated list. Values are associated 
with variables in the order that they are listed. The alias for ArgumentList is Args.


The values in the ArgumentList parameter can be actual values, such as 1024, or they can be references to local 
variables, such as $max.


To use local variables in a command, use the following command format:


"{param($<name1>[, $<name2>]...) <command-with-local-variables>} -ArgumentList <value> -or- <local-variable>"


The param keyword lists the local variables that are used in the command. ArgumentList supplies the values of the 
variables, in the order that they are listed.`, `Object[]`),
new Parameter(`AsJob`, `Indicates that this cmdlet runs the command as a background job on a remote computer. Use this parameter to run 
commands that take an extensive time to finish.


When you use the AsJob parameter, the command returns an object that represents the job, and then displays the command 
prompt. You can continue to work in the session while the job finishes. To manage the job, use the Job cmdlets. To get 
the job results, use the Receive-Job cmdlet.


The AsJob parameter resembles using the Invoke-Command cmdlet to run a Start-Job command remotely. However, with AsJob 
, the job is created on the local computer, even though the job runs on a remote computer, and the results of the 
remote job are automatically returned to the local computer.


For more information about Windows PowerShell background jobs, see about_Jobs 
(http://go.microsoft.com/fwlink/?LinkID=113251) and about_Remote_Jobs (http://go.microsoft.com/fwlink/?LinkID=135184).`, `SwitchParameter`),
new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate the user's credentials. The acceptable values for this parameter 
are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


CredSSP authentication is available only in Windows Vista, Windows Server 2008, and later versions of the Windows 
operating system.


For information about the values of this parameter, see the description of the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the 
Microsoft Developer Network (MSDN) library.

CAUTION: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to 
a remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to connect to the 
disconnected session. Enter the certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they 
do not work with domain accounts.


To get a certificate thumbprint, use a Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
new Parameter(`ComputerName`, `Specifies the computers on which the command runs. The default is the local computer.


When you use the ComputerName parameter, Windows PowerShell creates a temporary connection that is used only to run 
the specified command and is then closed. If you need a persistent connection, use the Session parameter.


Type the NETBIOS name, IP address, or fully qualified domain name of one or more computers in a comma-separated list. 
To specify the local computer, type the computer name, localhost, or a dot (.).


To use an IP address in the value of ComputerName , the command must include the Credential parameter. Also, the 
computer must be configured for HTTPS transport or the IP address of the remote computer must be included in the WinRM 
TrustedHosts list on the local computer. For instructions for adding a computer name to the TrustedHosts list, see 
"How to Add a Computer to the Trusted Host List" in about_Remote_Troubleshooting.


On Windows Vista and later versions of the Windows operating system, to include the local computer in the value of 
ComputerName , you must open Windows PowerShell by using the Run as administrator option.`, `String[]`),
new Parameter(`ConfigurationName`, `Specifies the session configuration that is used for the new PSSession .


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the 
configuration name, the following schema URI is prepended: http://schemas.microsoft.com/PowerShell.


The session configuration for a session is located on the remote computer. If the specified session configuration does 
not exist on the remote computer, the command fails.


The default value is the value of the $PSSessionConfigurationName preference variable on the local computer. If this 
preference variable is not set, the default is Microsoft.PowerShell. For more information, see 
about_Preference_Variables.`, `String`),
new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint of the session. The URI must be fully qualified.


The format of this string is as follows:


"<Transport>://<ComputerName>:<Port>/<ApplicationName>"


The default value is as follows:


"http://localhost:5985/WSMAN"


If you do not specify a connection URI, you can use the UseSSL and Port parameters to specify the connection URI 
values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport 
segment, but do not specify a port, the session is created with standards ports: 80 for HTTP and 443 for HTTPS. To use 
the default ports for Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection 
unless you use the AllowRedirection parameter in the command.`, `Uri[]`),
new Parameter(`ContainerId`, `Specifies an array of container IDs.`, `String[]`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01. Or, enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
new Parameter(`EnableNetworkAccess`, `Indicates that this cmdlet adds an interactive security token to loopback sessions. The interactive token lets you run 
commands in the loopback session that get data from other computers. For example, you can run a command in the session 
that copies XML files from a remote computer to the local computer.


A loopback session is a PSSession that originates and ends on the same computer. To create a loopback session, omit 
the ComputerName parameter or set its value to . (dot), localhost, or the name of the local computer.


By default, loopback sessions are created by using a network token, which might not provide sufficient permission to 
authenticate to remote computers.


The EnableNetworkAccess parameter is effective only in loopback sessions. If you use EnableNetworkAccess when you 
create a session on a remote computer, the command succeeds, but the parameter is ignored.


You can also allow remote access in a loopback session by using the CredSSP value of the Authentication parameter, 
which delegates the session credentials to other computers.


To protect the computer from malicious access, disconnected loopback sessions that have interactive tokens, which are 
those created by using EnableNetworkAccess , can be reconnected only from the computer on which the session was 
created. Disconnected sessions that use CredSSP authentication can be reconnected from other computers. For more 
information, see Disconnect-PSSession.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`FilePath`, `Specifies a local script that this cmdlet runs on one or more remote computers. Enter the path and file name of the 
script, or pipe a script path to Invoke-Command . The script must reside on the local computer or in a directory that 
the local computer can access. Use ArgumentList to specify the values of parameters in the script.


When you use this parameter, Windows PowerShell converts the contents of the specified script file to a script block, 
transmits the script block to the remote computer, and runs it on the remote computer.`, `String`),
new Parameter(`HideComputerName`, `Indicates that this cmdlet omits the computer name of each object from the output display. By default, the name of the 
computer that generated the object appears in the display.


This parameter affects only the output display. It does not change the object.`, `SwitchParameter`),
new Parameter(`InDisconnectedSession`, `Indicates that this cmdlet runs a command or script in a disconnected session.


When you use the InDisconnectedSession parameter, Invoke-Command creates a persistent session on each remote computer, 
starts the command specified by the ScriptBlock or FilePath parameter, and then disconnects from the session. The 
commands continue to run in the disconnected sessions. InDisconnectedSession enables you to run commands without 
maintaining a connection to the remote sessions. Also, because the session is disconnected before any results are 
returned, InDisconnectedSession makes sure that all command results are returned to the reconnected session, instead 
of being split between sessions.


You cannot use InDisconnectedSession with the Session parameter or the AsJob parameter.


Commands that use InDisconnectedSession return a PSSession object that represents the disconnected session. They do 
not return the command output. To connect to the disconnected session, use the Connect-PSSession or Receive-PSSession 
cmdlets. To get the results of commands that ran in the session, use the Receive-PSSession cmdlet. To run commands 
that generate output in a disconnected session, set the value of the OutputBufferingMode session option to Drop. If 
you intend to connect to the disconnected session, set the idle time-out in the session so that it provides sufficient 
time for you to connect before deleting the session.


You can set the output buffering mode and idle time-out in the SessionOption parameter or in the $PSSessionOption 
preference variable. For more information about session options, see New-PSSessionOption and 
about_Preference_Variables.


For more information about the Disconnected Sessions feature, see about_Remote_Disconnected_Sessions.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`InputObject`, `Specifies input to the command. Enter a variable that contains the objects or type a command or expression that gets 
the objects.


When using the InputObject parameter, use the $Input automatic variable in the value of the ScriptBlock parameter to 
represent the input objects.`, `PSObject`),
new Parameter(`JobName`, `Specifies a friendly name for the background job. By default, jobs are named Job<n>, where <n> is an ordinal number.


If you use the JobName parameter in a command, the command is run as a job, and Invoke-Command returns a job object, 
even if you do not include AsJob in the command.


For more information about Windows PowerShell background jobs, see about_Jobs 
(http://go.microsoft.com/fwlink/?LinkID=113251).`, `String`),
new Parameter(`NoNewScope`, `Indicates that this cmdlet runs the specified command in the current scope. By default, Invoke-Command runs commands 
in their own scope.


This parameter is valid only in commands that are run in the current session, that is, commands that omit both the 
ComputerName and Session parameters.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Port`, `Specifies the network port on the remote computer that is used for this command. To connect to a remote computer, the 
remote computer must be listening on the port that the connection uses.  The default ports are 5985, which is the 
WinRM port for HTTP, and 5986, which is the WinRM port for HTTPS.


Before using an alternate port, configure the WinRM listener on the remote computer to listen at that port. To 
configure the listener, type the following two commands at the Windows PowerShell prompt:


"Remove-Item -Path WSMan:\Localhost\listener\listener* -Recurse"


"New-Item -Path WSMan:\Localhost\listener -Transport http -Address * -Port <port-number>"


Do not use the Port parameter unless you must. The port that is set in the command applies to all computers or 
sessions on which the command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
new Parameter(`RunAsAdministrator`, `Indicates that this cmdlet invokes a command as an Administrator.`, `SwitchParameter`),
new Parameter(`ScriptBlock`, `Specifies the commands to run. Enclose the commands in braces ( { } ) to create a script block. This parameter is 
required.


By default, any variables in the command are evaluated on the remote computer. To include local variables in the 
command, use ArgumentList .`, `ScriptBlock`),
new Parameter(`Session`, `Specifies an array of sessions in which this cmdlet runs the command. Enter a variable that contains PSSession objects 
or a command that creates or gets the PSSession objects, such as a New-PSSession or Get-PSSession command.


When you create a PSSession , Windows PowerShell establishes a persistent connection to the remote computer. Use a 
PSSession to run a series of related commands that share data. To run a single command or a series of unrelated 
commands, use the ComputerName parameter. For more information, see about_PSSessions.`, `PSSession[]`),
new Parameter(`SessionName`, `Specifies a friendly name for a disconnected session. You can use the name to refer to the session in subsequent 
commands, such as a Get-PSSession command. This parameter is valid only with the InDisconnectedSession parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session 
option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is 
set. Otherwise, the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference 
variable and in the session configuration. However, they do not take precedence over maximum values, quotas or limits 
set in the session configuration.


For a description of the session options that includes the default values, see New-PSSessionOption . For information 
about the $PSSessionOption preference variable, see about_Preference_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113248). For more information about session configurations, see 
about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this 
parameter or enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to establish a connection to the remote 
computer. By default, SSL is not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter is an 
additional protection that sends the data across an HTTPS, instead of HTTP.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
new Parameter(`VMId`, `Specifies an array of IDs of virtual machines.`, `Guid[]`),
new Parameter(`VMName`, `Specifies an array of names of virtual machines.`, `String[]`),
        ],
        `Runs commands on local and remote computers.`,
        `Invoke-Command [[-ConnectionUri] <Uri[]>] [-ScriptBlock] <ScriptBlock> [-AllowRedirection] [-ArgumentList <Object[]>] 
[-AsJob] [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | 
Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] [-Credential <PSCredential>] 
[-EnableNetworkAccess] [-HideComputerName] [-InDisconnectedSession] [-InputObject <PSObject>] [-JobName <String>] 
[-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [[-ConnectionUri] <Uri[]>] [-FilePath] <String> [-AllowRedirection] [-ArgumentList <Object[]>] [-AsJob] 
[-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] 
[-ConfigurationName <String>] [-Credential <PSCredential>] [-EnableNetworkAccess] [-HideComputerName] 
[-InDisconnectedSession] [-InputObject <PSObject>] [-JobName <String>] [-SessionOption <PSSessionOption>] 
[-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [[-ComputerName] <String[]>] [-ScriptBlock] <ScriptBlock> [-ApplicationName <String>] [-ArgumentList 
<Object[]>] [-AsJob] [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | 
Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName <String>] [-Credential <PSCredential>] 
[-EnableNetworkAccess] [-HideComputerName] [-InDisconnectedSession] [-InputObject <PSObject>] [-JobName <String>] 
[-Port <Int32>] [-SessionName <String[]>] [-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [-UseSSL] 
[<CommonParameters>]

Invoke-Command [[-ComputerName] <String[]>] [-FilePath] <String> [-ApplicationName <String>] [-ArgumentList 
<Object[]>] [-AsJob] [-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | 
Digest | Kerberos}] [-ConfigurationName <String>] [-Credential <PSCredential>] [-EnableNetworkAccess] 
[-HideComputerName] [-InDisconnectedSession] [-InputObject <PSObject>] [-JobName <String>] [-Port <Int32>] 
[-SessionName <String[]>] [-SessionOption <PSSessionOption>] [-ThrottleLimit <Int32>] [-UseSSL] [<CommonParameters>]

Invoke-Command [[-Session] <PSSession[]>] [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsJob] 
[-HideComputerName] [-InputObject <PSObject>] [-JobName <String>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [[-Session] <PSSession[]>] [-FilePath] <String> [-ArgumentList <Object[]>] [-AsJob] [-HideComputerName] 
[-InputObject <PSObject>] [-JobName <String>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [-VMId] <Guid[]> [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName 
<String>] -Credential <PSCredential> [-HideComputerName] [-InputObject <PSObject>] [-ThrottleLimit <Int32>] 
[<CommonParameters>]

Invoke-Command [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] 
-Credential <PSCredential> [-HideComputerName] [-InputObject <PSObject>] [-ThrottleLimit <Int32>] -VMName <String[]> 
[<CommonParameters>]

Invoke-Command [-VMId] <Guid[]> [-FilePath] <String> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] 
-Credential <PSCredential> [-HideComputerName] [-InputObject <PSObject>] [-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [-FilePath] <String> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] -Credential 
<PSCredential> [-HideComputerName] [-InputObject <PSObject>] [-ThrottleLimit <Int32>] -VMName <String[]> 
[<CommonParameters>]

Invoke-Command [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] 
-ContainerId <String[]> [-HideComputerName] [-InputObject <PSObject>] [-JobName <String>] [-RunAsAdministrator] 
[-ThrottleLimit <Int32>] [<CommonParameters>]

Invoke-Command [-FilePath] <String> [-ArgumentList <Object[]>] [-AsJob] [-ConfigurationName <String>] -ContainerId 
<String[]> [-HideComputerName] [-InputObject <PSObject>] [-JobName <String>] [-RunAsAdministrator] [-ThrottleLimit 
<Int32>] [<CommonParameters>]

Invoke-Command [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-InputObject <PSObject>] [-NoNewScope] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-CommandInDesktopPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-DscResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-Expression`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-History`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies the ID of a command in the history. You can type the ID number of the command or the first few characters of 
the command.


If you type characters, Invoke-History matches the most recent commands first. If you omit this parameter, 
Invoke-History runs the last, or most recent, command. To find the ID number of a command, use the Get-History cmdlet.`, `String`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Runs commands from the session history.`,
        `Invoke-History [[-Id] <String>] [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-Item`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation. The value of this 
parameter qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when retrieving the objects rather than having Windows PowerShell filter 
the objects after they are retrieved.`, `String`),
new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet includes in the operation. The value of this parameter 
qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path to the item. Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. No 
characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Path`, `Specifies the path to the selected item.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Performs the default action on the specified item.`,
        `Invoke-Item [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] 
-LiteralPath <String[]> [-UseTransaction] [-WhatIf] [<CommonParameters>]

Invoke-Item [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Include <String[]>] [-UseTransaction] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-RestMethod`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-TroubleshootingPack`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-WebRequest`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-WmiMethod`,
        [
            new Parameter(`ArgumentList`, `Specifies the parameters to pass to the called method. The value of this parameter must be an array of objects, and 
they must appear in the order required by the called method. The Invoke-CimCommand cmdlet does not have these 
limitations.


To determine the order in which to list those objects, run the GetMethodParameters() method on the WMI class, as 
illustrated in Example 1, near the end of this topic.


Important: If the first value is an array that contains more than one element, a second value of $null is required. 
Otherwise, the command generates an error, such as "Unable to cast object of type 'System.Byte' to type 
'System.Array'.".


An example using an array of objects ($binSD) followed by a null value ($null) follows:


PS C:\>$acl = get-acl test.txt


PS C:\>$binSD = $acl.GetSecurityDescriptorBinaryForm()


PS C:\>invoke-wmimethod -class Win32_SecurityDescriptorHelper -Name BinarySDToSDDL -argumentlist $binSD, $null`, `Object[]`),
new Parameter(`AsJob`, `Indicates that this cmdlet runs the command as a background job. Use this parameter to run commands that take a long 
time to finish.


When you use the AsJob parameter, the command returns an object that represents the background job and then displays 
the command prompt. You can continue to work in the session while the job finishes. If Invoke-WmiMethod is used 
against a remote computer, the job is created on the local computer, and the results from remote computers are 
automatically returned to the local computer. To manage the job, use the cmdlets that contain the Job noun (the Job 
cmdlets). To get the job results, use the Receive-Job cmdlet.


To use this parameter with remote computers, the local and remote computers must be configured for remoting. 
Additionally, you must start Windows PowerShell by using the Run as administrator option in Windows Vista and later 
versions of Windows. For more information, see about_Remote_Requirements.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
new Parameter(`Authentication`, `Specifies the authentication level to be used with the WMI connection. The acceptable values for this parameter are:


-1: Unchanged


0: Default


1: None (No authentication in performed.)


2: Connect (Authentication is performed only when the client establishes a relationship with the application.)


3: Call (Authentication is performed only at the beginning of each call when the application receives the request.)


4: Packet (Authentication is performed on all the data that is received from the client.)


5: PacketIntegrity (All the data that is transferred between the client  and the application is authenticated and 
verified.)


6: PacketPrivacy (The properties of the other authentication levels are used, and all the data is encrypted.)`, `AuthenticationLevel`),
new Parameter(`Authority`, `Specifies the authority to use to authenticate the WMI connection. You can specify standard Windows NT LAN Manager 
(NTLM) or Kerberos authentication. To use NTLM, set the authority setting to ntlmdomain:<DomainName>, where 
<DomainName> identifies a valid NTLM domain name. To use Kerberos, specify kerberos:<DomainName\ServerName>. You 
cannot include the authority setting when you connect to the local computer.`, `String`),
new Parameter(`Class`, `Specifies the WMI class that contains a static method to call.`, `String`),
new Parameter(`ComputerName`, `Specifies, as a string array, the computers that this cmdlet runs the command on. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more computers. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your 
computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user. Type a user 
name, such as User01, Domain01\User01, or User@Contoso.com. Or, enter a PSCredential object, such as an object that is 
returned by the Get-Credential cmdlet. When you type a user name, you will be prompted for a password.`, `PSCredential`),
new Parameter(`EnableAllPrivileges`, `Indicates that this cmdlet enables all the privileges of the current user before the command makes the WMI call.`, `SwitchParameter`),
new Parameter(`Impersonation`, `Specifies the impersonation level to use. The acceptable values for this parameter are:


0: Default (Reads the local registry for the default impersonation level, which is usually set to "3: Impersonate".)


1: Anonymous (Hides the credentials of the caller.)


2: Identify (Allows objects to query the credentials of the caller.)


3: Impersonate (Allows objects to use the credentials of the caller.)


4: Delegate (Allows objects to permit other objects to use the credentials of the caller.)`, `ImpersonationLevel`),
new Parameter(`InputObject`, `Specifies a ManagementObject object to use as input. When this parameter is used, all other parameters except the Flag 
and Argument parameters are ignored.`, `ManagementObject`),
new Parameter(`Locale`, `Specifies the preferred locale for WMI objects. Specify the value of the Locale parameter as an array in the MS_<LCID> 
format in the preferred order.`, `String`),
new Parameter(`Name`, `Specifies the name of the method to be invoked. This parameter is mandatory and cannot be null or empty.`, `String`),
new Parameter(`Namespace`, `When used with the Class parameter, this parameter specifies the WMI repository namespace where the referenced WMI 
class or object is located.`, `String`),
new Parameter(`Path`, `Specifies the WMI object path of a WMI class, or specifies the WMI object path of an instance of a WMI class. The 
class or the instance that you specify must contain the method that is specified in the Name parameter.`, `String`),
new Parameter(`ThrottleLimit`, `Specifies a throttle value for the number of WMI operations that can be executed simultaneously. This parameter is 
used together with the AsJob parameter. The throttle limit applies only to the current command, not to the session or 
to the computer.`, `Int32`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Calls WMI methods.`,
        `Invoke-WmiMethod [-Class] <String> [-Name] <String> [-ArgumentList <Object[]>] [-AsJob] [-Authentication {Default | 
None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName 
<String[]>] [-Confirm] [-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | 
Identify | Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-ArgumentList <Object[]>] [-AsJob] [-Confirm] -InputObject <ManagementObject> 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-ArgumentList <Object[]>] [-AsJob] [-Authentication {Default | None | Connect | 
Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] 
[-Confirm] [-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | 
Impersonate | Delegate}] [-Locale <String>] [-Namespace <String>] -Path <String> [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | 
PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential 
<PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] 
[-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | 
PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential 
<PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] 
[-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Invoke-WmiMethod [-Name] <String> [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | 
PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential 
<PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] 
[-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Invoke-WSManAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Join-AzureRmDataLakeStoreItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Join-DtcDiagnosticResourceManager`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Join-Path`,
        [
            new Parameter(`ChildPath`, `Specifies the elements to append to the value of the Path parameter. Wildcards are permitted. The ChildPath parameter 
is required, although the parameter name ("ChildPath") is optional.`, `String`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01. Or, enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Path`, `Specifies the main path (or paths) to which the child-path is appended. Wildcards are permitted.


The value of Path determines which provider joins the paths and adds the path delimiters. The Path parameter is 
required, although the parameter name ("Path") is optional.`, `String[]`),
new Parameter(`Resolve`, `Indicates that this cmdlet displays the items that are referenced by the joined path.`, `SwitchParameter`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Combines a path and a child path into a single path.`,
        `Join-Path [-Path] <String[]> [-ChildPath] <String> [-Credential <PSCredential>] [-Resolve] [-UseTransaction] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Limit-EventLog`,
        [
            new Parameter(`ComputerName`, `Specifies remote computers. The default is the local computer.


Type the NetBIOS name, an Internet Protocol (IP) address, or a fully qualified domain name (FQDN) of a remote 
computer. To specify the local computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Limit-EventLog 
even if your computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`LogName`, `Specifies the event logs. Enter the log name (the value of the Log property; not the LogDisplayName) of one or more 
event logs, separated by commas.  Wildcard characters are not permitted. This parameter is required.`, `String[]`),
new Parameter(`MaximumSize`, `Specifies the maximum size of the event logs in bytes. Enter a value between 64 kilobytes (KB) and 4 gigabytes (GB). 
The value must be divisible by 64 KB (65536).


This parameter specifies the value of the MaximumKilobytes property of the System.Diagnostics.EventLog object that 
represents a classic event log.`, `Int64`),
new Parameter(`OverflowAction`, `Specifies what happens when the event log reaches its maximum size.


The acceptable values for this parameter are:


- DoNotOverwrite:  Existing entries are retained and new entries are discarded.


- OverwriteAsNeeded:  Each new entry overwrites the oldest entry.


- OverwriteOlder:  New events overwrite events older than the value specified by the MinimumRetentionDays property. If 
there are no events older than specified by the MinimumRetentionDays property value, new events are discarded.


This parameter specifies the value of the OverflowAction property of the System.Diagnostics.EventLog object that 
represents a classic event log.`, `OverflowAction`),
new Parameter(`RetentionDays`, `Specifies the minimum number of days that an event must remain in the event log.


This parameter specifies the value of the MinimumRetentionDays property of the System.Diagnostics.EventLog object that 
represents a classic event log.`, `Int32`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Sets the event log properties that limit the size of the event log and the age of its entries.`,
        `Limit-EventLog [-LogName] <String[]> [-ComputerName <String[]>] [-Confirm] [-MaximumSize <Int64>] [-OverflowAction 
{OverwriteOlder | OverwriteAsNeeded | DoNotOverwrite}] [-RetentionDays <Int32>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Measure-Command`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Measure-Object`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Merge-CIPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Mount-AppvClientConnectionGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Mount-AppvClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Mount-AppxVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Mount-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AppxPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureNetworkSecurityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureReservedIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureRmDataLakeStoreItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureRmExpressRouteCircuit`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureRmMlCommitmentAssociation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureRmResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-AzureVirtualNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-Item`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Destination`, `Specifies the path to the location where the items are being moved. The default is the current directory. Wildcards 
are permitted, but the result must specify a single location.


To rename the item being moved, specify a new name in the value of the Destination parameter.`, `String`),
new Parameter(`Exclude`, `Specifies, as a string array, an item or items that this cmdlet excludes from the operation. The value of this 
parameter qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when the cmdlet gets the objects, rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies, as a string array, an item or items that this cmdlet moves in the operation. The value of this parameter 
qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies the path to the current location of the items. Unlike the Path parameter, the value of LiteralPath is used 
exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it 
in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape 
sequences.`, `String[]`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path to the current location of the items. The default is the current directory. Wildcards are permitted.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Moves an item from one location to another.`,
        `Move-Item [[-Destination] <String>] [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Move-Item [-Path] <String[]> [[-Destination] <String>] [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] 
[-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Move-ItemProperty`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Destination`, `Specifies the path to the destination location.`, `String`),
new Parameter(`Exclude`, `Specifies, as a string array, a property or property that this cmdlet excludes from the operation. The value of this 
parameter qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The 
syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other 
parameters, because the provider applies them when this cmdlet gets the objects rather than having Windows PowerShell 
filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies, as a string array, a property or property that this cmdlet moves in the operation. The value of this 
parameter qualifies the Path parameter. Enter a path element or pattern, such as *.txt. Wildcards are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies the path to the current location of the property. Unlike the Path parameter, the value of LiteralPath is 
used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, 
enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters 
as escape sequences.`, `String[]`),
new Parameter(`Name`, `Specifies the name of the property to be moved.`, `String[]`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path to the current location of the property. Wildcards are permitted.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Moves a property from one location to another.`,
        `Move-ItemProperty [-Destination] <String> [-Name] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] 
[-WhatIf] [<CommonParameters>]

Move-ItemProperty [-Path] <String[]> [-Destination] <String> [-Name] <String[]> [-Confirm] [-Credential 
<PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] 
[-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Alias`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AppLockerPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAclConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAffinityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAutomationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAutomationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAutomationConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAutomationCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAutomationModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAutomationSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureAutomationVariable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureBatchCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureBatchComputeNodeUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureBatchJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureBatchJobSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureBatchPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureBatchTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureCertificateSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureDns`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureInternalLoadBalancerConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureIPTag`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureKeyVaultCertificateAdministratorDetails`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureKeyVaultCertificateOrganizationDetails`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureKeyVaultCertificatePolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureLocalNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureMediaServicesAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureMediaServicesKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureNetworkSecurityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureQuickVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRemoteAppCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRemoteAppTemplateImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRemoteAppVNet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureReservedIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmADAppCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmADApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmADServicePrincipal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmADSpCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmADUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAlertRuleEmail`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAlertRuleWebhook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAnalysisServicesServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementApi`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementAuthorizationServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementBackend`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementBackendCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementBackendProxy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementContext`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementHostnameConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementIdentityProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementLogger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementOpenIdConnectProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementProduct`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementRegion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApiManagementVirtualNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayAuthenticationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayBackendAddressPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayBackendHttpSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayConnectionDraining`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayFirewallDisabledRuleGroupConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayFrontendIPConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayFrontendPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayHttpListener`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayIPConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayPathRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayRequestRoutingRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewaySku`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewaySslCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewaySslPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayUrlPathMapConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmApplicationGatewayWebApplicationFirewallConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAppServicePlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationVariable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutomationWebhook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutoscaleNotification`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutoscaleProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutoscaleRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAutoscaleWebhook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmAvailabilitySet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmBackupProtectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmBackupRetentionPolicyObject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmBackupVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmBatchAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmBatchAccountKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmBatchApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmBatchApplicationPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmCdnCustomDomain`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmCdnEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmCdnProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmCognitiveServicesAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmCognitiveServicesAccountKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmContainerRegistry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmContainerService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmContainerServiceConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataFactory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataFactoryDataset`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataFactoryEncryptValue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataFactoryGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataFactoryGatewayKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataFactoryHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataFactoryLinkedService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataFactoryPipeline`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataLakeAnalyticsAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataLakeAnalyticsCatalogCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataLakeAnalyticsCatalogSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataLakeStoreAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDataLakeStoreItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDiskConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDiskUpdateConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDnsRecordConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDnsRecordSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmDnsZone`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmEventHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmEventHubAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmEventHubConsumerGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmEventHubKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmEventHubNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmEventHubNamespaceAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmEventHubNamespaceKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmExpressRouteCircuit`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmExpressRouteCircuitAuthorization`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmExpressRouteCircuitPeeringConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmHDInsightCluster`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmHDInsightClusterConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmHDInsightHiveJobDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmHDInsightMapReduceJobDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmHDInsightPigJobDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmHDInsightSqoopJobDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmHDInsightStreamingMapReduceJobDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmImageConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIntegrationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIntegrationAccountAgreement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIntegrationAccountCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIntegrationAccountMap`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIntegrationAccountPartner`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIntegrationAccountSchema`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIotHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIotHubExportDevices`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIotHubImportDevices`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmIpsecPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmKeyVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmLoadBalancer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmLoadBalancerBackendAddressPoolConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmLoadBalancerFrontendIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmLoadBalancerInboundNatPoolConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmLoadBalancerInboundNatRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmLoadBalancerProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmLoadBalancerRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmLocalNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmLogicApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmMediaService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmMediaServiceStorageConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmMlCommitmentPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmMlWebService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNetworkInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNetworkInterfaceIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNetworkSecurityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNetworkSecurityRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNetworkWatcher`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNetworkWatcherPacketCapture`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNotificationHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNotificationHubAuthorizationRules`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNotificationHubKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNotificationHubsNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNotificationHubsNamespaceAuthorizationRules`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmNotificationHubsNamespaceKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsAzureActivityLogDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsComputerGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsCustomLogDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsLinuxPerformanceObjectDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsLinuxSyslogDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsSavedSearch`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsStorageInsight`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsWindowsEventDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsWindowsPerformanceCounterDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmOperationalInsightsWorkspace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmPacketCaptureFilterConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmPolicyAssignment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmPolicyDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmPowerBIWorkspaceCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmPublicIpAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRecoveryServicesBackupProtectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRecoveryServicesVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRedisCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRedisCacheKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRedisCachePatchSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRedisCacheScheduleEntry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRelayAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRelayHybridConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRelayKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRelayNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmResourceGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmResourceGroupDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmResourceLock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRoleAssignment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRoleDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRouteConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRouteFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRouteFilterRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSchedulerHttpJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSchedulerServiceBusQueueJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSchedulerServiceBusTopicJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSchedulerStorageQueueJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServerManagementGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServerManagementNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServerManagementSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusNamespaceAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusNamespaceKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusQueue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusQueueAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusQueueKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusTopic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusTopicAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceBusTopicKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmServiceFabricCluster`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSiteRecoveryFabric`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSiteRecoveryNetworkMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSiteRecoveryPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSiteRecoveryProtectionContainerMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSiteRecoveryRecoveryPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSiteRecoveryReplicationProtectedItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSiteRecoverySite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSiteRecoveryStorageClassificationMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSiteRecoveryVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSnapshot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSnapshotConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSnapshotUpdateConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlDatabaseCopy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlDatabaseDataMaskingRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlDatabaseExport`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlDatabaseFailoverGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlDatabaseImport`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlDatabaseSecondary`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlElasticPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlServerCommunicationLink`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlServerDisasterRecoveryConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmSqlServerFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmStorageAccountKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmStreamAnalyticsFunction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmStreamAnalyticsInput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmStreamAnalyticsJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmStreamAnalyticsOutput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmStreamAnalyticsTransformation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmTag`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmTrafficManagerEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVirtualNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVirtualNetworkGatewayConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVirtualNetworkGatewayIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVirtualNetworkSubnetConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVMConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVMSqlServerAutoBackupConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVMSqlServerAutoPatchingConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVMSqlServerKeyVaultCredentialConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVmss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVmssConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVmssIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVmssVaultCertificateConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVpnClientRevokedCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmVpnClientRootCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmWcfRelay`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmWebApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmWebAppBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmWebAppDatabaseBackupSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmWebAppSlot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRmWebAppSSLBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRoleTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSBAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSBNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSchedulerHttpJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSchedulerStorageQueueJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureServiceADDomainExtensionConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureServiceDiagnosticsExtensionConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureServiceExtensionConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureServiceProject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureServiceRemoteDesktopExtensionConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSiteRecoveryNetworkMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSiteRecoveryProtectionProfileObject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSiteRecoveryRecoveryPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSiteRecoverySite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSiteRecoveryStorageMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSiteRecoveryVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSqlDatabaseServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSqlDatabaseServerContext`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSqlDatabaseServerFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureSSHKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageAccountSASToken`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageBlobSASToken`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageContainerSASToken`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageContainerStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageContext`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageDirectory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageFileSASToken`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageQueue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageQueueSASToken`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageQueueStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageShareSASToken`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageShareStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageTableSASToken`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorageTableStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStoreAddOn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleAccessControlRecord`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleDeviceBackupPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleDeviceBackupScheduleAddConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleDeviceBackupScheduleUpdateConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleDeviceVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleDeviceVolumeContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleInlineStorageAccountCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleNetworkConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleStorageAccountCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureStorSimpleVirtualDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureVirtualNetworkGatewayConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureVMConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureVMImageDiskConfigSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureVMSqlServerAutoBackupConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureVMSqlServerAutoPatchingConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureVMSqlServerKeyVaultCredentialConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureVNetGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureWebsite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-AzureWebsiteJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-CertificateNotificationTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-CimInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-CimSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-CimSessionOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-CIPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-CIPolicyRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-DtcDiagnosticTransaction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Event`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-EventLog`,
        [
            new Parameter(`CategoryResourceFile`, `Specifies the path of the file that contains category strings for the source events. This file is also known as the 
Category Message File.


The file must be present on the computer on which the event log is being created. This parameter does not create or 
move files.`, `String`),
new Parameter(`ComputerName`, `Specifies the computers on which this cmdlet creates new event logs. The default is the local computer.


Type the NetBIOS name, an IP address or a fully qualified domain name of a remote computer. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of New-EventLog 
even if your computer is not configured to run remote commands.`, `String[]`),
new Parameter(`LogName`, `Specifies the name of the event log.


If the log does not exist, New-EventLog creates the log and uses this value for the Log and LogDisplayName properties 
of the new event log. If the log exists, New-EventLog registers a new source for the event log.`, `String`),
new Parameter(`MessageResourceFile`, `Specifies the path of the file that contains message formatting strings for the source events. This file is also known 
as the Event Message File.


The file must be present on the computer on which the event log is being created. This parameter does not create or 
move files.`, `String`),
new Parameter(`ParameterResourceFile`, `Specifies the path of the file that contains strings used for parameter substitutions in event descriptions. This file 
is also known as the Parameter Message File.


The file must be present on the computer on which the event log is being created. This parameter does not create or 
move files.`, `String`),
new Parameter(`Source`, `Specifies the names of the event log sources, such as application programs that write to the event log. This parameter 
is required.`, `String[]`),
        ],
        `Creates a new event log and a new event source on a local or remote computer.`,
        `New-EventLog [-LogName] <String> [-Source] <String[]> [[-ComputerName] <String[]>] [-CategoryResourceFile <String>] 
[-MessageResourceFile <String>] [-ParameterResourceFile <String>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-FileCatalog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-IISConfigCollectionElement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-IISSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-IISSiteBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Item`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Force`, `Forces this cmdlet to create an item that writes over an existing read-only item. Implementation varies from provider 
to provider. For more information, see about_Providers. Even using the Force parameter, the cmdlet cannot override 
security restrictions.`, `SwitchParameter`),
new Parameter(`ItemType`, `Specifies the provider-specified type of the new item. Starting in Windows PowerShell 5.0, you can create symbolic 
links by specifying SymbolicLink as the value of this parameter.`, `String`),
new Parameter(`Name`, `Specifies the name of the new item.


You can specify the name of the new item in the Name or Path parameter value, and you can specify the path of the new 
item in Name or Path value.`, `String`),
new Parameter(`Path`, `Specifies the path of the location of the new item. Wildcard characters are permitted.


You can specify the name of the new item in Name , or include it in Path .`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`Value`, `Specifies the value of the new item. You can also pipe a value to New-Item .`, `Object`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Creates a new item.`,
        `New-Item [[-Path] <String[]>] [-Confirm] [-Credential <PSCredential>] [-Force] [-ItemType <String>] -Name <String> 
[-UseTransaction] [-Value <Object>] [-WhatIf] [<CommonParameters>]

New-Item [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Force] [-ItemType <String>] [-UseTransaction] 
[-Value <Object>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ItemProperty`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies items that this cmdlet omits. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path parameter.


The syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are more 
efficient than other parameters, because the provider applies them when it retrieves the objects instead of having 
Windows PowerShell filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the cmdlet to create a property on an object that cannot otherwise be accessed by the user. Implementation 
varies from provider to provider. For more information, see about_Providers.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies items that this cmdlet includes. The value of this parameter qualifies the Path parameter. Enter a path 
element or pattern, such as *.txt. Wildcard characters are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path of the item property. The value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Name`, `Specifies a name for the new property. If the property is a registry entry, this parameter specifies the name of the 
entry.`, `String`),
new Parameter(`Path`, `Specifies the path of the item. This parameter identifies the item to which this cmdlet adds the new property.`, `String[]`),
new Parameter(`PropertyType`, `Specifies the type of property that this cmdlet adds. The acceptable values for this parameter are:


- String. Specifies a null-terminated string. Equivalent to REG_SZ.  - ExpandString. Specifies a null-terminated 
string that contains unexpanded references to environment variables that are expanded when the value is retrieved. 
Equivalent to REG_EXPAND_SZ.  - Binary. Specifies binary data in any form. Equivalent to REG_BINARY.  - DWord. 
Specifies a 32-bit binary number. Equivalent to REG_DWORD.  - MultiString. Specifies an array of null-terminated 
strings terminated by two null characters. Equivalent to REG_MULTI_SZ.  - Qword. Specifies a 64-bit binary number. 
Equivalent to REG_QWORD.  - Unknown. Indicates an unsupported registry data type, such as REG_RESOURCE_LIST.`, `String`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`Value`, `Specifies the property value. If the property is a registry entry, this parameter specifies the value of the entry.`, `Object`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Creates a new property for an item and sets its value.`,
        `New-ItemProperty [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] -LiteralPath <String[]> [-PropertyType <String>] [-UseTransaction] [-Value <Object>] 
[-WhatIf] [<CommonParameters>]

New-ItemProperty [-Path] <String[]> [-Name] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] 
[-Filter <String>] [-Force] [-Include <String[]>] [-PropertyType <String>] [-UseTransaction] [-Value <Object>] 
[-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-JobTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-LocalGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-LocalUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Module`,
        [
            new Parameter(`ArgumentList`, `Specifies an array of arguments which are parameter values that are passed to the script block.`, `Object[]`),
new Parameter(`AsCustomObject`, `Indicates that this cmdlet returns a custom object that represents the dynamic module. The module members are 
implemented as script methods of the custom object, but they are not imported into the session. You can save the 
custom object in a variable and use dot notation to invoke the members.


If the module has multiple members with the same name, such as a function and a variable that are both named A, only 
one member with each name can be accessed from the custom object.`, `SwitchParameter`),
new Parameter(`Cmdlet`, `Specifies an array of cmdlets that this cmdlet exports from the module into the current session. Enter a 
comma-separated list of cmdlets. Wildcard characters are permitted. By default, all cmdlets in the module are exported.


You cannot define cmdlets in a script block, but a dynamic module can include cmdlets if it imports the cmdlets from a 
binary module.`, `String[]`),
new Parameter(`Function`, `Specifies an array of functions that this cmdlet exports from the module into the current session. Enter a 
comma-separated list of functions. Wildcard characters are permitted. By default, all functions defined in a module 
are exported.`, `String[]`),
new Parameter(`Name`, `Specifies a name for the new module. You can also pipe a module name to New-Module.


The default value is an autogenerated name that starts with " _DynamicModule " and is followed by a GUID that 
specifies the path of the dynamic module.`, `String`),
new Parameter(`ReturnResult`, `Indicates that this cmdlet runs the script block and returns the script block results instead of returning a module 
object.`, `SwitchParameter`),
new Parameter(`ScriptBlock`, `Specifies the contents of the dynamic module. Enclose the contents in braces ( { } ) to create a script block. This 
parameter is required.`, `ScriptBlock`),
        ],
        `Creates a new dynamic module that exists only in memory.`,
        `New-Module [-Name] <String> [-ScriptBlock] <ScriptBlock> [-ArgumentList <Object[]>] [-AsCustomObject] [-Cmdlet 
<String[]>] [-Function <String[]>] [-ReturnResult] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ModuleManifest`,
        [
            new Parameter(`AliasesToExport`, `Specifies the aliases that the module exports. Wildcard characters are permitted.


You can use this parameter to restrict the aliases that are exported by the module. It can remove aliases from the 
list of exported aliases, but it cannot add aliases to the list.


If you omit this parameter, New-ModuleManifest creates an AliasesToExport key with a value of * (all), meaning that 
all aliases that are exported by the module are exported by the manifest.`, `String[]`),
new Parameter(`Author`, `Specifies the module author.


If you omit this parameter, New-ModuleManifest creates an Author key with the name of the current user.`, `String`),
new Parameter(`ClrVersion`, `Specifies the minimum version of the Common Language Runtime (CLR) of the Microsoft .NET Framework that the module 
requires.`, `Version`),
new Parameter(`CmdletsToExport`, `Specifies the cmdlets that the module exports. Wildcard characters are permitted.


You can use this parameter to restrict the cmdlets that are exported by the module. It can remove cmdlets from the 
list of exported cmdlets, but it cannot add cmdlets to the list.


If you omit this parameter, New-ModuleManifest creates a CmdletsToExport key with a value of * (all), meaning that all 
cmdlets that are exported by the module are exported by the manifest.`, `String[]`),
new Parameter(`CompanyName`, `Identifies the company or vendor who created the module.


If you omit this parameter, New-ModuleManifest creates a CompanyName key with a value of "Unknown".`, `String`),
new Parameter(`CompatiblePSEditions`, `You can use this parameter to restrict the aliases that are exported by the module. It can remove aliases from the 
list of exported aliases, but it cannot add aliases to the list.


If you omit this parameter, New-ModuleManifest creates an AliasesToExport key with a value of * (all), meaning that 
all aliases that are exported by the module are exported by the manifest.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Copyright`, `Specifies a copyright statement for the module.


If you omit this parameter, New-ModuleManifest creates a Copyright key with a value of  "(c) <year> <username>. All 
rights reserved." where <year> is the current year and <username> is the value of the Author key (if one is specified) 
or the name of the current user.`, `String`),
new Parameter(`DefaultCommandPrefix`, `Specifies a prefix that is prepended to the nouns of all commands in the module when they are imported into a session. 
Prefixes prevent command name conflicts in a user's session.


Module users can override this prefix by specifying the Prefix parameter of the Import-Module cmdlet.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`Description`, `Describes the contents of the module.`, `String`),
new Parameter(`DotNetFrameworkVersion`, `Specifies the minimum version of the Microsoft .NET Framework that the module requires.`, `Version`),
new Parameter(`DscResourcesToExport`, `@{Text=}`, `String[]`),
new Parameter(`FileList`, `Specifies all items that are included in the module.


This key is designed to act as a module inventory. The files listed in the key are not automatically exported with the 
module.`, `String[]`),
new Parameter(`FormatsToProcess`, `Specifies the formatting files (.ps1xml) that run when the module is imported.


When you import a module, Windows PowerShell runs the Update-FormatData cmdlet with the specified files. Because 
formatting files are not scoped, they affect all session states in the session.`, `String[]`),
new Parameter(`FunctionsToExport`, `Specifies the functions that the module exports. Wildcard characters are permitted.


You can use this parameter to restrict the functions that are exported by the module. It can remove functions from the 
list of exported aliases, but it cannot add functions to the list.


If you omit this parameter, New-ModuleManifest creates an FunctionsToExport key with a value of * (all), meaning that 
all functions that are exported by the module are exported by the manifest.`, `String[]`),
new Parameter(`Guid`, `Specifies a unique identifier for the module. The GUID can be used to distinguish among modules with the same name.


If you omit this parameter, New-ModuleManifest creates a GUID key in the manifest and generates a GUID for the value.


To create a new GUID in Windows PowerShell, type "[guid]::NewGuid()".`, `Guid`),
new Parameter(`HelpInfoUri`, `Specifies the Internet address of the HelpInfo XML file for the module. Enter an Uniform Resource Identifier (URI) 
that starts with "http" or "https".


The HelpInfo XML file supports the Updatable Help feature that was introduced in Windows PowerShell 3.0. It contains 
information about the location of downloadable help files for the module and the version numbers of the newest help 
files for each supported locale. For information about Updatable Help, see about_Updatable_Help 
(http://go.microsoft.com/fwlink/?LinkID=235801). For information about the HelpInfo XML file, see "Supporting 
Updatable Help" in the Microsoft Developer Network (MSDN) library.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`IconUri`, `@{Text=}`, `Uri`),
new Parameter(`LicenseUri`, `@{Text=}`, `Uri`),
new Parameter(`ModuleList`, `Lists all modules that are included in this module.


Enter each module name as a string or as a hash table with ModuleName and ModuleVersion keys. The hash table can also 
have an optional GUID key. You can combine strings and hash tables in the parameter value. For more information, see 
the examples.


This key is designed to act as a module inventory. The modules that are listed in the value of this key are not 
automatically processed.`, `Object[]`),
new Parameter(`ModuleVersion`, `Specifies the version of the module.


This parameter is not required by the cmdlet, but a ModuleVersion key is required in the manifest. If you omit this 
parameter, New-ModuleManifest creates a ModuleVersion key with a value of "1.0".`, `Version`),
new Parameter(`NestedModules`, `Specifies script modules (.psm1) and binary modules (.dll) that are imported into the module's session state. The 
files in the NestedModules key run in the order in which they are listed in the value.


Enter each module name as a string or as a hash table with ModuleName and ModuleVersion keys. The hash table can also 
have an optional GUID key. You can combine strings and hash tables in the parameter value. For more information, see 
the examples.


Typically, nested modules contain commands that the root module needs for its internal processing. By default, the 
commands in nested modules are exported from the module's session state into the caller's session state, but the root 
module can restrict the commands that it exports, for example, by using an Export-ModuleMember command.


Nested modules in the module session state are available to the root module, but they are not returned by a Get-Module 
command in the caller's session state.


Scripts (.ps1) that are listed in the NestedModules key are run in the module's session state, not in the caller's 
session state. To run a script in the caller's session state, list the script file name in the value of the 
ScriptsToProcess key in the manifest.`, `Object[]`),
new Parameter(`PassThru`, `Indicates that this cmdlet writes the resulting module manifest to the console, in addition to creating a .psd1 file. 
By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path and file name of the new module manifest. Enter a path and file name with a .psd1 file name 
extension, such as "$pshome\Modules\MyModule\MyModule.psd1". This parameter is required.


If you specify the path of an existing file, New-ModuleManifest replaces the file without warning unless the file has 
the read-only attribute.


The manifest should be located in the module's directory, and the manifest file name should be the same as the module 
directory name, but with a .psd1 file name extension.


You cannot use variables, such as $pshome or $home, in response to a prompt for a Path parameter value. To use a 
variable, include the Path parameter in the command.`, `String`),
new Parameter(`PowerShellHostName`, `Specifies the name of the Windows PowerShell host program that the module requires. Enter the name of the host 
program, such as "Windows PowerShell ISE Host" or "ConsoleHost". Wildcard characters are not permitted.


To find the name of a host program, in the program, type "$host.name".`, `String`),
new Parameter(`PowerShellHostVersion`, `Specifies the minimum version of the Windows PowerShell host program that works with the module. Enter a version 
number, such as 1.1.`, `Version`),
new Parameter(`PowerShellVersion`, `Specifies the minimum version of Windows PowerShell that works with this module. For example, you can enter 3.0, 4.0, 
or 5.0 as the value of this parameter.`, `Version`),
new Parameter(`PrivateData`, `Specifies data that is passed to the module when it is imported.`, `Object`),
new Parameter(`ProcessorArchitecture`, `Specifies the processor architecture that the module requires. The acceptable values for this parameter are: x86, 
AMD64, IA64, and None. None indicates unknown or unspecified.`, `ProcessorArchitecture`),
new Parameter(`ProjectUri`, `@{Text=}`, `Uri`),
new Parameter(`ReleaseNotes`, `Specifies release notes.`, `String`),
new Parameter(`RequiredAssemblies`, `Specifies the assembly (.dll) files that the module requires. Enter the assembly file names. Windows PowerShell loads 
the specified assemblies before updating types or formats, importing nested modules, or importing the module file that 
is specified in the value of the RootModule key.


Use this parameter to list all the assemblies that the module requires. This includes assemblies that must be loaded 
to update any formatting or type files that are listed in the FormatsToProcess or TypesToProcess keys, even if those 
assemblies are also listed as binary modules in the NestedModules key.`, `String[]`),
new Parameter(`RequiredModules`, `Specifies modules that must be in the global session state. If the required modules are not in the global session 
state, Windows PowerShell imports them. If the required modules are not available, the Import-Module command fails.


Enter each module name as a string or as a hash table with ModuleName and ModuleVersion keys. The hash table can also 
have an optional GUID key. You can combine strings and hash tables in the parameter value. For more information, see 
the examples.


In Windows PowerShell 2.0, Import-Module does not import required modules automatically. It just verifies that the 
required modules are in the global session state.`, `Object[]`),
new Parameter(`RootModule`, `Specifies the primary or root file of the module. Enter the file name of a script (.ps1), a script module (.psm1), a 
module manifest (.psd1), an assembly (.dll), a cmdlet definition XML file (.cdxml), or a workflow (.xaml). When the 
module is imported, the members that are exported from the root module file are imported into the caller's session 
state.


If a module has a manifest file and no root file has been designated in the RootModule key, the manifest becomes the 
primary file for the module, and the module becomes a manifest module (ModuleType = Manifest).


To export members from .psm1 or .dll files in a module that has a manifest, the names of those files must be specified 
in the values of the RootModule or NestedModules keys in the manifest. Otherwise, their members are not exported.


In Windows PowerShell 2.0, this key was called ModuleToProcess . You can use the RootModule parameter name or its 
ModuleToProcess alias.`, `String`),
new Parameter(`ScriptsToProcess`, `Specifies script (.ps1) files that run in the caller's session state when the module is imported. You can use these 
scripts to prepare an environment, just as you might use a logon script.


To specify scripts that run in the module's session state, use the NestedModules key.`, `String[]`),
new Parameter(`Tags`, `@{Text=}`, `String[]`),
new Parameter(`TypesToProcess`, `Specifies the type files (.ps1xml) that run when the module is imported.


When you import the module, Windows PowerShell runs the Update-TypeData cmdlet with the specified files. Because type 
files are not scoped, they affect all session states in the session.`, `String[]`),
new Parameter(`VariablesToExport`, `Specifies the variables that the module exports. Wildcard characters are permitted.


You can use this parameter to restrict the variables that are exported by the module. It can remove variables from the 
list of exported variables, but it cannot add variables to the list.


If you omit this parameter, New-ModuleManifest creates a VariablesToExport key with a value of * (all), meaning that 
all variables that are exported by the module are exported by the manifest.`, `String[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Creates a new module manifest.`,
        `New-ModuleManifest [-Path] <String> [-AliasesToExport <String[]>] [-Author <String>] [-ClrVersion <Version>] 
[-CmdletsToExport <String[]>] [-CompanyName <String>] [-CompatiblePSEditions {Desktop | Core}] [-Confirm] [-Copyright 
<String>] [-DefaultCommandPrefix <String>] [-Description <String>] [-DotNetFrameworkVersion <Version>] 
[-DscResourcesToExport <String[]>] [-FileList <String[]>] [-FormatsToProcess <String[]>] [-FunctionsToExport 
<String[]>] [-Guid <Guid>] [-HelpInfoUri <String>] [-IconUri <Uri>] [-LicenseUri <Uri>] [-ModuleList <Object[]>] 
[-ModuleVersion <Version>] [-NestedModules <Object[]>] [-PassThru] [-PowerShellHostName <String>] 
[-PowerShellHostVersion <Version>] [-PowerShellVersion <Version>] [-PrivateData <Object>] [-ProcessorArchitecture 
{None | MSIL | X86 | IA64 | Amd64 | Arm}] [-ProjectUri <Uri>] [-ReleaseNotes <String>] [-RequiredAssemblies 
<String[]>] [-RequiredModules <Object[]>] [-RootModule <String>] [-ScriptsToProcess <String[]>] [-Tags <String[]>] 
[-TypesToProcess <String[]>] [-VariablesToExport <String[]>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecAuthProposal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecMainModeCryptoProposal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-NetIPsecQuickModeCryptoProposal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Object`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PmemDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ProvisioningRepro`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PSDrive`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


Starting in Windows PowerShell 3.0, when the value of the Root parameter is a UNC path, you can use credentials to 
create file system drives. This parameter is not supported by all Windows PowerShell providers.`, `PSCredential`),
new Parameter(`Description`, `Specifies a brief text description of the drive. Type any string.


To see the descriptions of all of the drives in the session, type "Get-PSDrive | Format-Table Name, Description". To 
see the description of a particular drives, type "(Get-PSDrive <DriveName>).Description".`, `String`),
new Parameter(`Name`, `Specifies a name for the new drive. For persistent mapped network drives, type a drive letter. For temporary Windows 
PowerShell drives, type any valid string; you are not limited to drive letters.`, `String`),
new Parameter(`PSProvider`, `Specifies the Windows PowerShell provider that supports drives of this kind.


For example, if the drive is associated with a network share or file system directory, the Windows PowerShell provider 
is FileSystem. If the drive is associated with a registry key, the provider is Registry.


Temporary Windows PowerShell drives can be associated with any Windows PowerShell provider. Mapped network drives can 
be associated only with the FileSystem provider.


To see a list of the providers in your Windows PowerShell session, use the Get-PSProvider cmdlet.`, `String`),
new Parameter(`Persist`, `Indicates that this cmdlet creates a Windows mapped network drive. Mapped network drives are saved in Windows on the 
local computer. They are persistent, not session-specific, and can be viewed and managed in File Explorer and other 
tools.


When you scope the command locally, that is, without dot-sourcing, the Persist parameter does not persist the creation 
of a PSDrive beyond the scope in which you run the command. If you run New-PSDrive inside a script, and you want the 
new drive to persist indefinitely, you must dot-source the script. For best results, to force a new drive to persist, 
specify Global as the value of the Scope parameterin addition to adding Persist to your command.


The name of the drive must be a letter, such as D or E. The value of Root parameter must be a UNC path of a different 
computer. The value of the PSProvider parameter must be FileSystem.


To disconnect a Windows mapped network drive, use the Remove-PSDrive cmdlet. When you disconnect a Windows mapped 
network drive, the mapping is permanently deleted from the computer, not just deleted from the current session.


Mapped network drives are specific to a user account. Mapped network drives that you create in sessions that are 
started by using the Run as administrator option or by using the credential of another user are not visible in a 
session that was started without explicit credentials, or by using the credentials of the current user.`, `SwitchParameter`),
new Parameter(`Root`, `Specifies the data store location to which a Windows PowerShell drive is mapped.


For example, specify a network share, such as \\Server01\Public, a local directory, such as C:\Program Files, or a 
registry key, such as HKLM:\Software\Microsoft.


Temporary Windows PowerShell drives can be associated with a local or remote location on any supported provider drive. 
Mapped network drives can be associated only with a file system location on a remote computer.`, `String`),
new Parameter(`Scope`, `Specifies a scope for the drive. The acceptable values for this parameter are: Global, Local, and Script, or a number 
relative to the current scope, which is 0 through the number of scopes, where 0 is the current scope and 1 is its 
parent. Local is the default. For more information, see about_Scopes (http://go.microsoft.com/fwlink/?LinkID=113260).`, `String`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Creates temporary and persistent mapped network drives.`,
        `New-PSDrive [-Name] <String> [-PSProvider] <String> [-Root] <String> [-Confirm] [-Credential <PSCredential>] 
[-Description <String>] [-Persist] [-Scope <String>] [-UseTransaction] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PSRoleCapabilityFile`,
        [
            new Parameter(`AliasDefinitions`, `Adds the specified aliases to sessions that use the role capability file. Enter a hash table with the following keys:


- Name. Name of the alias. This key is required.  - Value. The command that the alias represents. This key is 
required.  - Description. A text string that describes the alias. This key is optional.  - Options. Alias options. 
This key is optional. The default value is None. The acceptable values for this parameter are: None, ReadOnly, 
Constant, Private, or AllScope.


For example: "@{Name="hlp";Value="Get-Help";Description="Gets help";Options="ReadOnly"}"`, `IDictionary[]`),
new Parameter(`AssembliesToLoad`, `Specifies the assemblies to load into the sessions that use the role capability file.`, `String[]`),
new Parameter(`Author`, `Specifies the user that created the role capability file.`, `String`),
new Parameter(`CompanyName`, `Identifies the company that created the role capability file. The default value is Unknown.`, `String`),
new Parameter(`Copyright`, `Specifies a copyright for the role capability file. If you omit this parameter, New-PSRoleCapabilityFile generates a 
copyright statement by using the value of the Author parameter.`, `String`),
new Parameter(`Description`, `Specifies a description for the role capability file.`, `String`),
new Parameter(`EnvironmentVariables`, `Specifies the environment variables for sessions that expose this role capability file. Enter a hash table in which 
the keys are the environment variable names and the values are the environment variable values.


For example: "EnvironmentVariables=@{TestShare="\\Server01\TestShare"}"`, `IDictionary`),
new Parameter(`FormatsToProcess`, `Specifies the formatting files (.ps1xml) that run in sessions that use the role capability file. The value of this 
parameter must be a full or absolute path of the formatting files.`, `String[]`),
new Parameter(`FunctionDefinitions`, `Adds the specified functions to sessions that expose the role capability. Enter a hash table with the following keys:


- Name. Name of the function. This key is required.  - ScriptBlock. Function body. Enter a script block. This key is 
required.  - Options. Function options. This key is optional. The default value is None. The acceptable values for 
this parameter are: are None, ReadOnly, Constant, Private, or AllScope.


For example: "@{Name="Get-PowerShellProcess";ScriptBlock={Get-Process PowerShell};Options="AllScope"}"`, `IDictionary[]`),
new Parameter(`Guid`, `Specifies a unique identifier for the role capability file. If you omit this parameter, New-PSRoleCapabilityFile 
generates a GUID for the file. To create a new GUID in Windows PowerShell, type "[guid]::NewGuid()".`, `Guid`),
new Parameter(`ModulesToImport`, `Specifies the modules that are automatically imported into sessions that use the role capability file. By default, all 
of the commands in listed modules are visible. When used with VisibleCmdlets or VisibleFunctions , the commands 
visible from the specified modules can be restricted.


Each module used in the value of this parameter can be represented by a string or by a hash table. A module string 
consists only of the name of the module. A module hash table can include ModuleName , ModuleVersion , and GUID keys. 
Only the ModuleName key is required.


For example, the following value consists of a string and a hash table. Any combination of strings and hash tables, in 
any order, is valid.


""TroubleshootingPack", @{ModuleName="PSDiagnostics"; 
ModuleVersion="1.0.0.0";GUID="c61d6278-02a3-4618-ae37-a524d40a7f44"}"`, `Object[]`),
new Parameter(`Path`, `Specifies the path and file name of the role capability file. The file must have a .psrc file name extension.`, `String`),
new Parameter(`ScriptsToProcess`, `Specifies scripts to add to sessions that use the role capability file. Enter the path and file names of the scripts. 
The value of this parameter must be a full or absolute path of the script file names.`, `String[]`),
new Parameter(`TypesToProcess`, `Specifies type files (.ps1xml) to add to sessions that use the role capability file. Enter the type file names. The 
value of this parameter must be a full or absolute path of the type file names.`, `String[]`),
new Parameter(`VariableDefinitions`, `Specifies variables to add to sessions that use the role capability file. Enter a hash table with the following keys:


- Name. Name of the variable. This key is required.  - Value. Variable value. This key is required.  - Options. 
Variable options. This key is optional. The default value is None. The acceptable values for this parameter are: are 
None, ReadOnly, Constant, Private, or AllScope.


For example: "@{Name="WarningPreference";Value="SilentlyContinue";Options="AllScope"}"`, `Object`),
new Parameter(`VisibleAliases`, `Limits the aliases in the session to those aliases specified in the value of this parameter, plus any aliases that you 
define in the AliasDefinition parameter. Wildcard characters are supported. By default, all aliases that are defined 
by the Windows PowerShell engine and all aliases that modules export are visible in the session.


For example, to limit the available aliases to gm and gcm use this syntax: "VisibleAliases="gcm", "gp""


When any Visible parameter is included in the role capability file, Windows PowerShell removes the Import-Module 
cmdlet and its ipmo alias from the session.`, `String[]`),
new Parameter(`VisibleCmdlets`, `Limits the cmdlets in the session to those specified in the value of this parameter. Wildcard characters and Module 
Qualified Names are supported.


By default, all cmdlets that the modules in the session export are visible in the session. Use the SessionType and 
ModulesToImport parameters to determine which modules and snap-ins are imported into the session. If no modules in 
ModulesToImport expose the cmdlet, New-PSRoleCapabilityFile will try load the appropriate module.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module 
cmdlet and its ipmo alias from the session.`, `Object[]`),
new Parameter(`VisibleExternalCommands`, `Limits the external binaries, scripts and commands that can be executed in the session to those specified in the value 
of this parameter. Wildcard characters are supported.


By default, no external commands are visible in this session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module 
cmdlet and its ipmo alias from the session.`, `String[]`),
new Parameter(`VisibleFunctions`, `Limits the functions in the session to those specified in the value of this parameter, plus any functions that you 
define in the FunctionDefinitions parameter. Wildcard characters are supported.


By default, all functions exported by modules in the session are visible in that session. Use the SessionType and 
ModulesToImport parameters to determine which modules are imported into the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module 
cmdlet and its ipmo alias from the session.`, `Object[]`),
new Parameter(`VisibleProviders`, `Limits the Windows PowerShell providers in the session to those specified in the value of this parameter. Wildcard 
characters are supported.


By default, all providers exported by a module in the session are visible in the session. Use the SessionType and 
ModulesToImport parameters to determine which modules are imported into the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module 
cmdlet and its ipmo alias from the session.`, `String[]`),
        ],
        `Creates a file that defines a set of capabilities to be exposed through a session configuration.`,
        `New-PSRoleCapabilityFile [-Path] <String> [-AliasDefinitions <IDictionary[]>] [-AssembliesToLoad <String[]>] [-Author 
<String>] [-CompanyName <String>] [-Copyright <String>] [-Description <String>] [-EnvironmentVariables <IDictionary>] 
[-FormatsToProcess <String[]>] [-FunctionDefinitions <IDictionary[]>] [-Guid <Guid>] [-ModulesToImport <Object[]>] 
[-ScriptsToProcess <String[]>] [-TypesToProcess <String[]>] [-VariableDefinitions <Object>] [-VisibleAliases 
<String[]>] [-VisibleCmdlets <Object[]>] [-VisibleExternalCommands <String[]>] [-VisibleFunctions <Object[]>] 
[-VisibleProviders <String[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PSSession`,
        [
            new Parameter(`AllowRedirection`, `Indicates that this cmdlet allows redirection of this connection to an alternate Uniform Resource Identifier (URI).


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different 
URI. By default, Windows PowerShell does not redirect connections, but you can use this parameter to enable it to 
redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount 
session option value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the 
MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
new Parameter(`ApplicationName`, `Specifies the application name segment of the connection URI. Use this parameter to specify the application name when 
you are not using the ConnectionURI parameter in the command.


The default value is the value of the $PSSessionApplicationName preference variable on the local computer. If this 
preference variable is not defined, the default value is WSMAN. This value is appropriate for most uses. For more 
information, see about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248).


The WinRM service uses the application name to select a listener to service the connection request. The value of this 
parameter should match the value of the URLPrefix property of a listener on the remote computer.`, `String`),
new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate the user's credentials. The acceptable values for this parameter 
are:


- Default


- Basic


- Credssp


- Digest
- Kerberos
- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


For more information about the values of this parameter, see the description of the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the 
Microsoft Developer Network (MSDN) library.

Caution: Credential Security Support Provider (CredSSP) authentication, in which the user credentials are passed to a 
remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to perform this action. 
Enter the certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts; they 
do not work with domain accounts.


To get a certificate, use the Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
new Parameter(`ComputerName`, `Specifies an array of names of computers. This cmdlet creates a persistent connection ( PSSession ) to the specified 
computer. If you enter multiple computer names, New-PSSession creates multiple PSSession objects, one for each 
computer. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more remote computers. To specify the 
local computer, type the computer name, localhost, or a dot (.). When the computer is in a different domain than the 
user, the fully qualified domain name is required. You can also pipe a computer name, in quotation marks, to 
New-PSSession .


To use an IP address in the value of the ComputerName parameter, the command must include the Credential parameter. 
Also, the computer must be configured for HTTPS transport or the IP address of the remote computer must be included in 
the WinRM TrustedHosts list on the local computer. For instructions for adding a computer name to the TrustedHosts 
list, see "How to Add a Computer to the Trusted Host List" in about_Remote_Troubleshooting 
(http://go.microsoft.com/fwlink/?LinkID=135188).


To include the local computer in the value of the ComputerName parameter, start Windows PowerShell by using the Run as 
administrator option.`, `String[]`),
new Parameter(`ConfigurationName`, `Specifies the session configuration that is used for the new PSSession .


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the 
configuration name, the following schema URI is prepended: http://schemas.microsoft.com/PowerShell.


The session configuration for a session is located on the remote computer. If the specified session configuration does 
not exist on the remote computer, the command fails.


The default value is the value of the $PSSessionConfigurationName preference variable on the local computer. If this 
preference variable is not set, the default is Microsoft.PowerShell. For more information, see 
about_Preference_Variables (http://go.microsoft.com/fwlink/?LinkID=113248).`, `String`),
new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint for the session. The URI must be fully qualified. The format of 
this string is as follows:


<Transport>://<ComputerName>:<Port>/<ApplicationName>


The default value is as follows:


"http://localhost:5985/WSMAN"


If you do not specify a ConnectionURI , you can use the UseSSL , ComputerName , Port , and ApplicationName parameters 
to specify the ConnectionURI values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport 
segment, but do not specify a port, the session is created with standards ports: 80 for HTTP and 443 for HTTPS. To use 
the default ports for Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection 
unless you use the AllowRedirection parameter in the command.`, `Uri[]`),
new Parameter(`ContainerId`, `Specifies an array of IDs of containers. This cmdlet starts an interactive session with each of the specified 
containers. To see the containers that are available to you, use the Get-Container cmdlet.`, `String[]`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01, Domain01\User01, or User@Domain.com, or enter a PSCredential object, such as one 
returned by the Get-Credential cmdlet.


When you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
new Parameter(`EnableNetworkAccess`, `Indicates that this cmdlet adds an interactive security token to loopback sessions. The interactive token lets you run 
commands in the loopback session that get data from other computers. For example, you can run a command in the session 
that copies XML files from a remote computer to the local computer.


A loopback session is a PSSession that originates and ends on the same computer. To create a loopback session, omit 
the ComputerName parameter or set its value to dot (.), localhost, or the name of the local computer.


By default, this cmdlet creates loopback sessions by using a network token, which might not provide sufficient 
permission to authenticate to remote computers.


The EnableNetworkAccess parameter is effective only in loopback sessions. If you use EnableNetworkAccess when you 
create a session on a remote computer, the command succeeds, but the parameter is ignored.


You can also enable remote access in a loopback session by using the CredSSP value of the Authentication parameter, 
which delegates the session credentials to other computers.


To protect the computer from malicious access, disconnected loopback sessions that have interactive tokens, which are 
those created by using the EnableNetworkAccess parameter, can be reconnected only from the computer on which the 
session was created. Disconnected sessions that use CredSSP authentication can be reconnected from other computers. 
For more information, see Disconnect-PSSession.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Name`, `Specifies a friendly name for the PSSession .


You can use the name to refer to the PSSession when you use other cmdlets, such as Get-PSSession and Enter-PSSession. 
The name is not required to be unique to the computer or the current session.`, `String[]`),
new Parameter(`Port`, `Specifies the network port on the remote computer that is used for this connection. To connect to a remote computer, 
the remote computer must be listening on the port that the connection uses. The default ports are 5985, which is the 
WinRM port for HTTP, and 5986, which is the WinRM port for HTTPS.


Before using another port, you must configure the WinRM listener on the remote computer to listen at that port. Use 
the following commands to configure the listener:


1. "winrm delete winrm/config/listener?Address=*+Transport=HTTP"


2. "winrm create winrm/config/listener?Address=*+Transport=HTTP @{Port="<port-number>"}"


Do not use the Port parameter unless you must. The port setting in the command applies to all computers or sessions on 
which the command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
new Parameter(`RunAsAdministrator`, `When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different 
URI. By default, Windows PowerShell does not redirect connections, but you can use this parameter to enable it to 
redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount 
session option value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the 
MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
new Parameter(`Session`, `Specifies an array of PSSession objects that this cmdlet uses as a model for the new PSSession . This parameter 
creates new PSSession objects that have the same properties as the specified PSSession objects.


Enter a variable that contains the PSSession objects or a command that creates or gets the PSSession objects, such as 
a New-PSSession or Get-PSSession command.


The resulting PSSession objects have the same computer name, application name, connection URI, port, configuration 
name, throttle limit, and Secure Sockets Layer (SSL) value as the originals, but they have a different display name, 
ID, and instance ID (GUID).`, `PSSession[]`),
new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session 
option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is 
set. Otherwise, the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference 
variable and in the session configuration. However, they do not take precedence over maximum values, quotas or limits 
set in the session configuration.


For a description of the session options that includes the default values, see New-PSSessionOption. For information 
about the $PSSessionOption preference variable, see about_Preference_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113248). For more information about session configurations, see 
about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this 
parameter or enter a value of 0 (zero), the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
new Parameter(`UseSSL`, `Indicates that this cmdlet uses the SSL protocol to establish a connection to the remote computer. By default, SSL is 
not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. The UseSSL parameter offers an 
additional protection that sends the data across an HTTPS connection instead of an HTTP connection.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
new Parameter(`VMId`, `Specifies an array of ID of virtual machines. This cmdlet starts an interactive session with each of the specified 
virtual machines. To see the virtual machines that are available to you, use the following command:


"Get-VM | Select-Object -Property Name, ID"`, `Guid[]`),
new Parameter(`VMName`, `Specifies an array of names of virtual machines. This cmdlet starts an interactive session with each of the specified 
virtual machines. To see the virtual machines that are available to you, use the Get-VM cmdlet.`, `String[]`),
        ],
        `Creates a persistent connection to a local or remote computer.`,
        `New-PSSession [-ConnectionUri] <Uri[]> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Credential <PSCredential>] [-EnableNetworkAccess] [-Name <String[]>] [-SessionOption <PSSessionOption>] 
[-ThrottleLimit <Int32>] [<CommonParameters>]

New-PSSession [[-ComputerName] <String[]>] [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Credential <PSCredential>] [-EnableNetworkAccess] [-Name <String[]>] [-Port <Int32>] [-SessionOption 
<PSSessionOption>] [-ThrottleLimit <Int32>] [-UseSSL] [<CommonParameters>]

New-PSSession [-VMId] <Guid[]> [-ConfigurationName <String>] -Credential <PSCredential> [-Name <String[]>] 
[-ThrottleLimit <Int32>] [<CommonParameters>]

New-PSSession [-ConfigurationName <String>] -Credential <PSCredential> [-Name <String[]>] [-ThrottleLimit <Int32>] 
-VMName <String[]> [<CommonParameters>]

New-PSSession [-ConfigurationName <String>] -ContainerId <String[]> [-Name <String[]>] [-RunAsAdministrator] 
[-ThrottleLimit <Int32>] [<CommonParameters>]

New-PSSession [[-Session] <PSSession[]>] [-EnableNetworkAccess] [-Name <String[]>] [-ThrottleLimit <Int32>] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PSSessionConfigurationFile`,
        [
            new Parameter(`AliasDefinitions`, `Adds the specified aliases to sessions that use the session configuration. Enter a hash table with the following keys:


- Name. Name of the alias. This key is required.  - Value. The command that the alias represents. This key is 
required.  - Description. A text string that describes the alias. This key is optional.  - Options. Alias options. 
This key is optional. The default value is None. The acceptable values for this parameter are: None, ReadOnly, 
Constant, Private, or AllScope.


For example: "@{Name="hlp";Value="Get-Help";Description="Gets help";Options="ReadOnly"}"`, `IDictionary[]`),
new Parameter(`AssembliesToLoad`, `Specifies the assemblies to load into the sessions that use the session configuration.`, `String[]`),
new Parameter(`Author`, `Specifies the author of the session configuration or the configuration file. The default is the current user. The 
value of this parameter is visible in the session configuration file, but it is not a property of the session 
configuration object.`, `String`),
new Parameter(`CompanyName`, `Specifies the company that created the session configuration or the configuration file. The default value is Unknown. 
The value of this parameter is visible in the session configuration file, but it is not a property of the session 
configuration object.`, `String`),
new Parameter(`Copyright`, `Specifies a copyright the session configuration file. The value of this parameter is visible in the session 
configuration file, but it is not a property of the session configuration object.


If you omit this parameter, New-PSSessionConfigurationFile generates a copyright statement by using the value of the 
Author parameter.`, `String`),
new Parameter(`Description`, `Specifies a description of the session configuration or the session configuration file. The value of this parameter is 
visible in the session configuration file, but it is not a property of the session configuration object.`, `String`),
new Parameter(`EnvironmentVariables`, `Adds environment variables to the session. Enter a hash table in which the keys are the environment variable names and 
the values are the environment variable values.


For example: "EnvironmentVariables=@{TestShare="\\Server01\TestShare"}"`, `IDictionary`),
new Parameter(`ExecutionPolicy`, `Specifies the execution policy of sessions that use the session configuration. If you omit this parameter, the value 
of the ExecutionPolicy key in the session configuration file is Restricted. For information about execution policies 
in Windows PowerShell, see about_Execution_Policies (http://go.microsoft.com/fwlink/?LinkID=135170).`, `ExecutionPolicy`),
new Parameter(`FormatsToProcess`, `Specifies the formatting files (.ps1xml) that run in sessions that use the session configuration. The value of this 
parameter must be a full or absolute path of the formatting files.`, `String[]`),
new Parameter(`Full`, `Indicates that this operation includes all possible configuration properties in the session configuration file.`, `SwitchParameter`),
new Parameter(`FunctionDefinitions`, `Adds the specified functions to sessions that use the session configuration. Enter a hash table with the following 
keys:


- Name. Name of the function. This key is required.  - ScriptBlock. Function body. Enter a script block. This key is 
required.  - Options. Function options. This key is optional. The default value is None. The acceptable values for 
this parameter are: None, ReadOnly, Constant, Private, or AllScope.


For example: "@{Name="Get-PowerShellProcess";ScriptBlock={Get-Process PowerShell};Options="AllScope"}"`, `IDictionary[]`),
new Parameter(`GroupManagedServiceAccount`, `For example: "@{Name="hlp";Value="Get-Help";Description="Gets help";Options="ReadOnly"}"`, `String`),
new Parameter(`Guid`, `Specifies a unique identifier for the session configuration file. If you omit this parameter, 
New-PSSessionConfigurationFile generates a GUID for the file.To create a new GUID in Windows PowerShell, type 
""[guid]::NewGuid()"".`, `Guid`),
new Parameter(`LanguageMode`, `Determines which elements of the Windows PowerShell language are permitted in sessions that use this session 
configuration. You can use this parameter to restrict the commands that particular users can run on the computer.


The acceptable values for this parameter are:


- FullLanguage. All language elements are permitted.  - ConstrainedLanguage. Commands that contain scripts to be 
evaluated are not allowed. The ConstrainedLanguage mode restricts user access to Microsoft .NET Framework types, 
objects, or methods.  - NoLanguage. Users may run cmdlets and functions, but are not permitted to use any language 
elements, such as script blocks, variables, or operators.  - RestrictedLanguage. Users may run cmdlets and functions, 
but are not permitted to use script blocks or variables except for the following permitted variables: $PSCulture, 
$PSUICulture, $True, $False, and $Null. Users may use only the basic comparison operators (-eq, -gt, -lt). Assignment 
statements, property references, and method calls are not permitted.


The default value of the LanguageMode parameter depends on the value of the SessionType parameter.


- Empty. NoLanguage


- RestrictedRemoteServer. NoLanguage


- Default. FullLanguage`, `PSLanguageMode`),
new Parameter(`ModulesToImport`, `Specifies the modules and snap-ins that are automatically imported into sessions that use the session configuration.


By default, only the Microsoft.PowerShell.Core snap-in is imported into remote sessions, but unless the cmdlets are 
excluded, users can use the Import-Module and Add-PSSnapin cmdlets to add modules and snap-ins to the session.


Each module or snap-in in the value of this parameter can be represented by a string or as a hash table. A module 
string consists only of the name of the module or snap-in. A module hash table can include ModuleName , ModuleVersion 
, and GUID keys. Only the ModuleName key is required.


For example, the following value consists of a string and a hash table. Any combination of strings and hash tables, in 
any order, is valid.


""TroubleshootingPack", @{ModuleName="PSDiagnostics"; 
ModuleVersion="1.0.0.0";GUID="c61d6278-02a3-4618-ae37-a524d40a7f44"},"


The value of the ModulesToImport parameter of the Register-PSSessionConfiguration cmdlet takes precedence over the 
value of the ModulesToImport key in the session configuration file.`, `Object[]`),
new Parameter(`MountUserDrive`, `@{Text=}`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path and file name of the session configuration file. The file must have a .pssc file name extension.`, `String`),
new Parameter(`PowerShellVersion`, `Specifies the version of the Windows PowerShell engine in sessions that use the session configuration. The acceptable 
values for this parameter are: 2.0 and 3.0. If you omit this parameter, the PowerShellVersion key is commented-out and 
newest version of Windows PowerShell runs in the session.


The value of the PSVersion parameter of the Register-PSSessionConfiguration cmdlet takes precedence over the value of 
the PowerShellVersion key in the session configuration file.`, `Version`),
new Parameter(`RequiredGroups`, `For example: "@{Name="hlp";Value="Get-Help";Description="Gets help";Options="ReadOnly"}"`, `IDictionary`),
new Parameter(`RoleDefinitions`, `Specifies the role capabilities that should be applied to user roles. or security groups, when connected to a session 
using this session configuration.


Enter a hash table in which the keys are the name of the security group and the values are hash tables that contain a 
list of role capabilities that should be made available to the security group.


For example: "@{'Contoso\Level 2 Helpdesk Users' = @{ RoleCapabilities = 'Maintenance', 'ADHelpDesk' }}"`, `IDictionary`),
new Parameter(`RunAsVirtualAccount`, `Configures sessions using this session configuration to be run as the computer's (virtual) administrator account.`, `SwitchParameter`),
new Parameter(`RunAsVirtualAccountGroups`, `Specifies the security groups to be associated with the virtual account when a session that uses the session 
configuration is run as a virtual account. If omitted, the virtual account belongs to Domain Admins on domain 
controllers and Administrators on all other computers.`, `String[]`),
new Parameter(`SchemaVersion`, `Specifies the version of the session configuration file schema. The default value is "1.0.0.0".`, `Version`),
new Parameter(`ScriptsToProcess`, `Adds the specified scripts to sessions that use the session configuration. Enter the path and file names of the 
scripts. The value of this parameter must be a full or absolute path of script file names.`, `String[]`),
new Parameter(`SessionType`, `Specifies the type of session that is created by using the session configuration. The default value is Default. The 
acceptable values for this parameter are:


- Empty. No modules or snap-ins are added to session by default. Use the parameters of this cmdlet to add modules, 
functions, scripts, and other features to the session. This option is designed for you to create custom sessions by 
adding selected command. If you do not add commands to an empty session, the session is limited to expressions and 
might not be usable.  - Default. Adds the Microsoft.PowerShell.Core snap-in to the session. This snap-in includes the 
Import-Module and Add-PSSnapin cmdlets that users can use to import other modules and snap-ins unless you explicitly 
prohibit the use of the cmdlets.  - RestrictedRemoteServer. Includes only the following proxy functions:  
Exit-PSSession, Get-Command, Get-FormatData, Get-Help, Measure-Object, Out-Default, and Select-Object. Use the 
parameters of this cmdlet to add modules, functions, scripts, and other features to the session.`, `SessionType`),
new Parameter(`TranscriptDirectory`, `Specifies the directory to place session transcripts for sessions using this session configuration.`, `String`),
new Parameter(`TypesToProcess`, `Adds the specified type files (.ps1xml) to sessions that use the session configuration. Enter the type file names. The 
value of this parameter must be a full or absolute path of type file names.`, `String[]`),
new Parameter(`UserDriveMaximumSize`, `@{Text=}`, `Int64`),
new Parameter(`VariableDefinitions`, `Adds the specified variables to sessions that use the session configuration. Enter a hash table with the following 
keys:


- Name. Name of the variable. This key is required.  - Value. Variable value. This key is required.  - Options. 
Variable options. This key is optional. The default value is None. The acceptable values for this parameter are: None, 
ReadOnly, Constant, Private, or AllScope.


For example: "@{Name="WarningPreference";Value="SilentlyContinue";Options="AllScope"}"`, `Object`),
new Parameter(`VisibleAliases`, `Limits the aliases in the session to those specified in the value of this parameter, plus any aliases that you define 
in the AliasDefinition parameter. Wildcard characters are supported. By default, all aliases that are defined by the 
Windows PowerShell engine and all aliases that modules export are visible in the session.


For example: "VisibleAliases="gcm", "gp""


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module 
cmdlet and its ipmo alias from the session.`, `String[]`),
new Parameter(`VisibleCmdlets`, `Limits the cmdlets in the session to those specified in the value of this parameter. Wildcard characters and Module 
Qualified Names are supported.


By default, all cmdlets that modules in the session export are visible in the session. Use the SessionType and 
ModulesToImport parameters to determine which modules and snap-ins are imported into the session. If no modules in 
ModulesToImport expose the cmdlet, the appropriate module will attempt to be autoloaded.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module 
cmdlet and its ipmo alias from the session.`, `Object[]`),
new Parameter(`VisibleExternalCommands`, `Limits the external binaries, scripts, and commands that can be executed in the session to those specified in the 
value of this parameter. Wildcard characters are supported.


By default, no external commands are visible in the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell, removes the 
Import-Module cmdlet and its ipmo alias from the session.`, `String[]`),
new Parameter(`VisibleFunctions`, `Limits the functions in the session to those specified in the value of this parameter, plus any functions that you 
define in the FunctionDefinition parameter. Wildcard characters are supported.


By default, all functions that modules in the session export are visible in the session. Use the SessionType and 
ModulesToImport parameters to determine which modules and snap-ins are imported into the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module 
cmdlet and its ipmo alias from the session.`, `Object[]`),
new Parameter(`VisibleProviders`, `Limits the Windows PowerShell providers in the session to those specified in the value of this parameter. Wildcard 
characters are supported.


By default, all providers that modules in the session export are visible in the session. Use the SessionType and 
ModulesToImport parameters to determine which modules and snap-ins are imported into the session.


When any Visible parameter is included in the session configuration file, Windows PowerShell removes the Import-Module 
cmdlet and its ipmo alias from the session.`, `String[]`),
        ],
        `Creates a file that defines a session configuration.`,
        `New-PSSessionConfigurationFile [-Path] <String> [-AliasDefinitions <IDictionary[]>] [-AssembliesToLoad <String[]>] 
[-Author <String>] [-CompanyName <String>] [-Copyright <String>] [-Description <String>] [-EnvironmentVariables 
<IDictionary>] [-ExecutionPolicy {Unrestricted | RemoteSigned | AllSigned | Restricted | Default | Bypass | 
Undefined}] [-FormatsToProcess <String[]>] [-Full] [-FunctionDefinitions <IDictionary[]>] [-GroupManagedServiceAccount 
<String>] [-Guid <Guid>] [-LanguageMode {FullLanguage | RestrictedLanguage | NoLanguage | ConstrainedLanguage}] 
[-ModulesToImport <Object[]>] [-MountUserDrive] [-PowerShellVersion <Version>] [-RequiredGroups <IDictionary>] 
[-RoleDefinitions <IDictionary>] [-RunAsVirtualAccount] [-RunAsVirtualAccountGroups <String[]>] [-SchemaVersion 
<Version>] [-ScriptsToProcess <String[]>] [-SessionType {Empty | RestrictedRemoteServer | Default}] 
[-TranscriptDirectory <String>] [-TypesToProcess <String[]>] [-UserDriveMaximumSize <Int64>] [-VariableDefinitions 
<Object>] [-VisibleAliases <String[]>] [-VisibleCmdlets <Object[]>] [-VisibleExternalCommands <String[]>] 
[-VisibleFunctions <Object[]>] [-VisibleProviders <String[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PSSessionOption`,
        [
            new Parameter(`ApplicationArguments`, `Specifies a primitive dictionary that is sent to the remote session. Commands and scripts in the remote session, 
including startup scripts in the session configuration, can find this dictionary in the ApplicationArguments property 
of the $PSSenderInfo automatic variable. You can use this parameter to send data to the remote session.


A primitive dictionary is like a hash table, but it contains keys that are case-insensitive strings and values that 
can be serialized and deserialized during Windows PowerShell remoting handshakes. If you enter a hash table for the 
value of this parameter, Windows PowerShell converts it to a primitive dictionary.


For more information, see about_Hash_Tables (http://go.microsoft.com/fwlink/?LinkID=135175), 
about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152), and about_Automatic_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113212).`, `PSPrimitiveDictionary`),
new Parameter(`CancelTimeout`, `Determines how long Windows PowerShell waits for a cancel operation (CTRL + C) to finish before ending it. Enter a 
value in milliseconds.


The default value is 60000 (one minute). A value of 0 (zero) means no time-out; the command continues indefinitely.`, `Int32`),
new Parameter(`Culture`, `Specifies the culture to use for the session. Enter a culture name in <languagecode2>-<country/regioncode2> format, 
such as ja-jP, a variable that contains a CultureInfo object, or a command that gets a CultureInfo object, such as 
Get-Culture.


The default value is $Null, and the culture that is set in the operating system is used in the session.`, `CultureInfo`),
new Parameter(`IdleTimeout`, `Determines how long the session stays open if the remote computer does not receive any communication from the local 
computer. This includes the heartbeat signal. When the interval expires, the session closes.


The idle time-out value is of significant importance if you intend to disconnect and reconnect to a session. You can 
reconnect only if the session has not timed out.


Enter a value in milliseconds. The minimum value is 60000 (1 minute). The maximum is the value of the MaxIdleTimeoutms 
property of the session configuration. The default value, -1, does not set an idle time-out.


The session uses the idle time-out that is set in the session options, if any. If none is set (-1), the session uses 
the value of the IdleTimeoutMs property of the session configuration or the WSMan shell time-out value 
("WSMan:\<ComputerName>\Shell\IdleTimeout"), whichever is shortest.


If the idle timeout set in the session options exceeds the value of the MaxIdleTimeoutMs property of the session 
configuration, the command to create a session fails.


The IdleTimeoutMs value of the default Microsoft.PowerShell session configuration is 7200000 milliseconds (2 hours). 
Its MaxIdleTimeoutMs value is 2147483647 milliseconds (>24 days). The default value of the WSMan shell idle time-out 
("WSMan:\<ComputerName>\Shell\IdleTimeout") is 7200000 milliseconds (2 hours).


The idle time-out value of a session can also be changed when disconnecting from a session or reconnecting to a 
session. For more information, see Disconnect-PSSession and Connect-PSSession.


In Windows PowerShell 2.0, the default value of the IdleTimeout parameter is 240000 (4 minutes).`, `Int32`),
new Parameter(`IncludePortInSPN`, `Includes the port number in the Service Principal Name (SPN) used for Kerberos authentication, for example, 
"HTTP/<ComputerName>:5985". This option allows a client that uses a non-default SPN to authenticate against a remote 
computer that uses Kerberos authentication.


The option is designed for enterprises where multiple services that support Kerberos authentication are running under 
different user accounts. For example, an IIS application that allows for Kerberos authentication can require the 
default SPN to be registered to a user account that differs from the computer account. In such cases, Windows 
PowerShell remoting cannot use Kerberos to authenticate because it requires an SPN that is registered to the computer 
account. To resolve this problem, administrators can create different SPNs, such as by using Setspn.exe, that are 
registered to different user accounts and can distinguish between them by including the port number in the SPN.


For more information about SetSPN.exe, see SetSPN Overviewhttp://go.microsoft.com/fwlink/?LinkID=189413 
(http://go.microsoft.com/fwlink/?LinkID=189413).


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`MaxConnectionRetryCount`, `Specifies the number of times that PowerShell attempts to make a connection to a target machine if the current attempt 
fails due to network issues. The default value is 5.


This parameter was added for PowerShell version 5.0.`, `Int32`),
new Parameter(`MaximumReceivedDataSizePerCommand`, `Specifies the maximum number of bytes that the local computer can receive from the remote computer in a single 
command. Enter a value in bytes. By default, there is no data size limit.


This option is designed to protect the resources on the client computer.`, `Int32`),
new Parameter(`MaximumReceivedObjectSize`, `Specifies the maximum size of an object that the local computer can receive from the remote computer. This option is 
designed to protect the resources on the client computer. Enter a value in bytes.


In Windows PowerShell 2.0, if you omit this parameter, there is no object size limit. Beginning in Windows PowerShell 
3.0, if you omit this parameter, the default value is 200 MB.`, `Int32`),
new Parameter(`MaximumRedirection`, `Determines how many times Windows PowerShell redirects a connection to an alternate Uniform Resource Identifier (URI) 
before the connection fails. The default value is 5. A value of 0 (zero) prevents all redirection.


This option is used in the session only when the AllowRedirection parameter is used in the command that creates the 
session.`, `Int32`),
new Parameter(`NoCompression`, `Turns off packet compression in the session. Compression uses more processor cycles, but it makes transmission faster.`, `SwitchParameter`),
new Parameter(`NoEncryption`, `Turns off data encryption.`, `SwitchParameter`),
new Parameter(`NoMachineProfile`, `Prevents loading the user's Windows user profile. As a result, the session might be created faster, but user-specific 
registry settings, items such as environment variables, and certificates are not available in the session.`, `SwitchParameter`),
new Parameter(`OpenTimeout`, `Determines how long the client computer waits for the session connection to be established. When the interval expires, 
the command to establish the connection fails. Enter a value in milliseconds.


The default value is 180000 (3 minutes). A value of 0 (zero) means no time-out; the command continues indefinitely.`, `Int32`),
new Parameter(`OperationTimeout`, `Determines the maximum time that any operation in the session can run. When the interval expires, the operation fails. 
Enter a value in milliseconds.


The default value is 180000 (3 minutes). A value of 0 (zero) means no time-out; the operation continues indefinitely.`, `Int32`),
new Parameter(`OutputBufferingMode`, `Determines how command output is managed in disconnected sessions when the output buffer becomes full.


If the output buffering mode is not set in the session or in the session configuration, the default value is Block . 
Users can also change the output buffering mode when disconnecting the session.


If you omit this parameter, the value of the OutputBufferingMode of the session option object is None. A value of 
Block or Drop overrides the output buffering mode transport option set in the session configuration. The acceptable 
values for this parameter are:


- Block. When the output buffer is full, execution is suspended until the buffer is clear.  - Drop. When the output 
buffer is full, execution continues. As new output is saved, the oldest output is discarded.  - None. No output 
buffering mode is specified.


For more information about the output buffering mode transport option, see New-PSTransportOption.


This parameter was introduced in Windows PowerShell 3.0.`, `OutputBufferingMode`),
new Parameter(`ProxyAccessType`, `Determines which mechanism is used to resolve the host name. The acceptable values for this parameter are:


- IEConfig


- WinHttpConfig


- AutoDetect


- NoProxyServer


- None




The default value is None.

For information about the values of this parameter, see the description of the 
System.Management.Automation.Remoting.ProxyAccessTypehttp://go.microsoft.com/fwlink/?LinkId=144756 
(http://go.microsoft.com/fwlink/?LinkId=144756) enumeration in the Microsoft Developer Network (MSDN) library.`, `ProxyAccessType`),
new Parameter(`ProxyAuthentication`, `Specifies the authentication method that is used for proxy resolution. The acceptable values for this parameter are: 
Basic,  Digest, and Negotiate. The default value is Negotiate.


For information about the values of this parameter, see the description of the 
System.Management.Automation.Runspaces.AuthenticationMechanismhttp://go.microsoft.com/fwlink/?LinkID=144382 
enumeration (http://go.microsoft.com/fwlink/?LinkID=144382) in the MSDN library.`, `AuthenticationMechanism`),
new Parameter(`ProxyCredential`, `Specifies the credentials to use for proxy authentication. Enter a variable that contains a PSCredential object or a 
command that gets a PSCredential object, such as a Get-Credential command. If this option is not set, no credentials 
are specified.`, `PSCredential`),
new Parameter(`SkipCACheck`, `Specifies that when it connects over HTTPS, the client does not validate that the server certificate is signed by a 
trusted certification authority (CA).


Use this option only when the remote computer is trusted by using another mechanism, such as when the remote computer 
is part of a network that is physically secure and isolated or when the remote computer is listed as a trusted host in 
a WinRM configuration.`, `SwitchParameter`),
new Parameter(`SkipCNCheck`, `Specifies that the certificate common name (CN) of the server does not have to match the host name of the server. This 
option is used only in remote operations that use the HTTPS protocol.


Use this option only for trusted computers.`, `SwitchParameter`),
new Parameter(`SkipRevocationCheck`, `Does not validate the revocation status of the server certificate.`, `SwitchParameter`),
new Parameter(`UICulture`, `Specifies the UI culture to use for the session.


Enter a culture name in <languagecode2>-<country/regioncode2> format, such as ja-jP, a variable that contains a 
CultureInfo object, or a command that gets a CultureInfo object, such as Get-Culture .


The default value is $Null, and the UI culture that is set in the operating system when the session is created is used 
in the session.`, `CultureInfo`),
new Parameter(`UseUTF16`, `Indicates that this cmdlet encodes the request in UTF16 format instead of UTF8 format.`, `SwitchParameter`),
        ],
        `Creates an object that contains advanced options for a PSSession.`,
        `New-PSSessionOption [-ApplicationArguments <PSPrimitiveDictionary>] [-CancelTimeout <Int32>] [-Culture <CultureInfo>] 
[-IdleTimeout <Int32>] [-IncludePortInSPN] [-MaxConnectionRetryCount <Int32>] [-MaximumReceivedDataSizePerCommand 
<Int32>] [-MaximumReceivedObjectSize <Int32>] [-MaximumRedirection <Int32>] [-NoCompression] [-NoEncryption] 
[-NoMachineProfile] [-OpenTimeout <Int32>] [-OperationTimeout <Int32>] [-OutputBufferingMode {None | Drop | Block}] 
[-ProxyAccessType {None | IEConfig | WinHttpConfig | AutoDetect | NoProxyServer}] [-ProxyAuthentication {Default | 
Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-ProxyCredential <PSCredential>] 
[-SkipCACheck] [-SkipCNCheck] [-SkipRevocationCheck] [-UICulture <CultureInfo>] [-UseUTF16] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PSTransportOption`,
        [
            new Parameter(`IdleTimeoutSec`, `Determines how long each session stays open if the remote computer does not receive any communication from the local 
computer. This includes the heartbeat signal. When the interval expires, the session closes.


The idle time-out value is of significant importance when the user intends to disconnect and reconnect to a session. 
The user can reconnect only if the session has not timed out.


The IdleTimeoutSec parameter corresponds to the IdleTimeoutMs property of a session configuration.


Enter a value in seconds. The default value is 7200 (2 hours). The minimum value is 60 (1 minute). The maximum is the 
value of the IdleTimeout property of Shell objects in the WSMan configuration 
("WSMan:\<ComputerName>\Shell\IdleTimeout"). The default value is 7200000 milliseconds (2 hours).


If an idle time-out value is set in the session options and in the session configuration, value set in the session 
options takes precedence, but it cannot exceed the value of the MaxIdleTimeoutMs property of the session 
configuration. To set the value of the MaxIdleTimeoutMs property, use the MaxIdleTimeoutSec parameter.`, `Int32`),
new Parameter(`MaxConcurrentCommandsPerSession`, `Limits the number of commands that can run at the same time in each session to the specified value. The default value 
is 1000.


The MaxConcurrentCommandsPerSession parameter corresponds to the MaxConcurrentCommandsPerShell property of a session 
configuration.`, `Int32`),
new Parameter(`MaxConcurrentUsers`, `Limits the number of users who can run commands at the same time in each session to the specified value. The default 
value is 5.`, `Int32`),
new Parameter(`MaxIdleTimeoutSec`, `Limits the idle time-out set for each session to the specified value. The default value is [Int]::MaxValue (~25 days).


The idle time-out value is of significant importance when the user intends to disconnect and reconnect to a session. 
The user can reconnect only if the session has not timed out.


The MaxIdleTimeoutSec parameter corresponds to the MaxIdleTimeoutMs property of a session configuration.`, `Int32`),
new Parameter(`MaxMemoryPerSessionMB`, `Limits the memory used by each session to the specified value. Enter a value in megabytes. The default value is 1024 
megabytes (1 GB).


The MaxMemoryPerSessionMB parameter corresponds to the MaxMemoryPerShellMB property of a session configuration.`, `Int32`),
new Parameter(`MaxProcessesPerSession`, `Limits the number of processes running in each session to the specified value. The default value is 15.


The MaxProcessesPerSession parameter corresponds to the MaxProcessesPerShell property of a session configuration.`, `Int32`),
new Parameter(`MaxSessions`, `Limits the number of sessions that use the session configuration. The default value is 25.


The MaxSessions parameter corresponds to the MaxShells property of a session configuration.`, `Int32`),
new Parameter(`MaxSessionsPerUser`, `Limits the number of sessions that use the session configuration and run with the credentials of a given user to the 
specified value. The default value is 25.


When you specify this value, consider that many users might be using the credentials of a run as user.


The MaxSessionsPerUser parameter corresponds to the MaxShellsPerUser property of a session configuration.`, `Int32`),
new Parameter(`OutputBufferingMode`, `Determines how command output is managed in disconnected sessions when the output buffer becomes full. The acceptable 
values for this parameter are:


- Block. When the output buffer is full, execution is suspended until the buffer is clear.  - Drop. When the output 
buffer is full, execution continues. As new output is saved, the oldest output is discarded.  - None. No output 
buffering mode is specified.


The default value of the OutputBufferingMode property of sessions is Block.`, `OutputBufferingMode`),
new Parameter(`ProcessIdleTimeoutSec`, `Limits the time-out for each host process to the specified value. The default value, 0, means that there is no 
time-out value for the process.


Other session configurations have per-process time-out values. For example, the Microsoft.PowerShell.Workflow session 
configuration has a per-process time-out value of 28800 seconds (8 hours).`, `Int32`),
        ],
        `Creates an object that contains advanced options for a session configuration.`,
        `New-PSTransportOption [-IdleTimeoutSec <Int32>] [-MaxConcurrentCommandsPerSession <Int32>] [-MaxConcurrentUsers 
<Int32>] [-MaxIdleTimeoutSec <Int32>] [-MaxMemoryPerSessionMB <Int32>] [-MaxProcessesPerSession <Int32>] [-MaxSessions 
<Int32>] [-MaxSessionsPerUser <Int32>] [-OutputBufferingMode {None | Drop | Block}] [-ProcessIdleTimeoutSec <Int32>] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-PSWorkflowExecutionOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-ScheduledJobOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-SelfSignedCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Service`,
        [
            new Parameter(`BinaryPathName`, `Specifies the path of the executable file for the service. This parameter is required.`, `String`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
new Parameter(`DependsOn`, `Specifies the names of other services upon which the new service depends. To enter multiple service names, use a comma 
to separate the names.`, `String[]`),
new Parameter(`Description`, `Specifies a description of the service.`, `String`),
new Parameter(`DisplayName`, `Specifies a display name for the service.`, `String`),
new Parameter(`Name`, `Specifies the name of the service. This parameter is required.`, `String`),
new Parameter(`StartupType`, `Sets the startup type of the service. The acceptable values for this parameter are:


- Manual. The service is started only manually, by a user, using the Service Control Manager, or by an application.  - 
Automatic. The service is started or was started by the operating system, at system start-up. If an automatically 
started service depends on a manually started service, the manually started service is also started automatically at 
system startup.  - Disabled. The service is disabled and cannot be started by a user or application.


The default value is Automatic.`, `ServiceStartMode`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Creates a new Windows service.`,
        `New-Service [-Name] <String> [-BinaryPathName] <String> [-Confirm] [-Credential <PSCredential>] [-DependsOn 
<String[]>] [-Description <String>] [-DisplayName <String>] [-StartupType {Boot | System | Automatic | Manual | 
Disabled}] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-TimeSpan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-TlsSessionTicketKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Variable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WAPackCloudService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WAPackQuickVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WAPackStaticIPAddressPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WAPackVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WAPackVMRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WAPackVMSubnet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WAPackVNet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WebApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WebAppPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WebBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WebFtpSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WebGlobalModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WebHandler`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WebManagedModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WebServiceProxy`,
        [
            new Parameter(`Class`, `Specifies a name for the proxy class that the cmdlet creates for the Web service. The value of this parameter is used 
together with the Namespace parameter to provide a fully qualified name for the class. The default value is generated 
from the Uniform Resource Identifier (URI).`, `String`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user. This is an 
alternative to using the UseDefaultCredential parameter.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
new Parameter(`Namespace`, `Specifies a namespace for the new class.


The value of this parameter is used together with the value of the Class parameter to generate a fully qualified name 
for the class. The default value is Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes plus a type 
that is generated from the URI.


You can set the value of the Namespace parameter so that you can access multiple Web services that have the same name.`, `String`),
new Parameter(`Uri`, `Specifies the URI of the Web service. Enter a URI or the path and file name of a file that contains a service 
description.


The URI must refer to an .asmx page or to a page that returns a service description. To return a service description 
of a Web service that was created by using ASP.NET, append "?WSDL" to the URL of the Web service, for example: 
http://www.contoso.com/MyWebService.asmx?WSDL.`, `Uri`),
new Parameter(`UseDefaultCredential`, `Indicates that this cmdlet uses the default credential. This cmdlet sets the UseDefaultCredential property in the 
resulting proxy object to True. This is an alternative to using the Credential parameter.`, `SwitchParameter`),
        ],
        `Creates a Web service proxy object that lets you use and manage the Web service in Windows PowerShell.`,
        `New-WebServiceProxy [-Uri] <Uri> [[-Class] <String>] [[-Namespace] <String>] [-Credential <PSCredential>] 
[<CommonParameters>]

New-WebServiceProxy [-Uri] <Uri> [[-Class] <String>] [[-Namespace] <String>] [-UseDefaultCredential] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-Website`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WebVirtualDirectory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WindowsCustomImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WinEvent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WinUserLanguageList`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WSManInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `New-WSManSessionOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Optimize-AppxProvisionedPackages`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Optimize-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Out-Default`,
        [
            new Parameter(`InputObject`, `Accepts input to the cmdlet.`, `PSObject`),
new Parameter(`Transcript`, `@{Text=}`, `SwitchParameter`),
        ],
        `Sends the output to the default formatter and to the default output cmdlet.`,
        `Out-Default [-InputObject <PSObject>] [-Transcript] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Out-File`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Out-GridView`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Out-Host`,
        [
            new Parameter(`InputObject`, `Specifies the objects that are written to the console. Enter a variable that contains the objects, or type a command 
or expression that gets the objects.`, `PSObject`),
new Parameter(`Paging`, `Indicates that this cmdlet displays one page of output at a time, and waits for user input before it displays the 
remaining pages, much like the traditional more command. By default, all of the output is displayed on a single page. 
The page size is determined by the characteristics of the host.`, `SwitchParameter`),
        ],
        `Sends output to the command line.`,
        `Out-Host [-InputObject <PSObject>] [-Paging] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Out-Null`,
        [
            new Parameter(`InputObject`, `Specifies the object that was sent to null, or deleted. Enter a variable that contains the objects, or type a command 
or expression that gets the objects.`, `PSObject`),
        ],
        `Deletes output instead of sending it down the pipeline.`,
        `Out-Null [-InputObject <PSObject>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Out-Printer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Out-String`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Pop-Location`,
        [
            new Parameter(`PassThru`, `Passes an object that represents the location to the pipeline. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`StackName`, `Specifies the location stack from which the location is popped. Enter a location stack name.


Without this parameter, Pop-Location pops a location from the current location stack. By default, the current location 
stack is the unnamed default location stack that Windows PowerShell creates. To make a location stack the current 
location stack, use the StackName parameter of Set-Location . Pop-Location cannot pop a location from the unnamed 
default stack unless it is the current location stack.`, `String`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Changes the current location to the location most recently pushed onto the stack.`,
        `Pop-Location [-PassThru] [-StackName <String>] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Protect-CmsMessage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AppvClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AzureAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AzureRemoteAppProgram`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AzureRmApiManagementTenantGitConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AzureRmAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AzureRmCdnEndpointContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AzureRmVMDscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AzureServiceProject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AzureVMDscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-AzureWebsiteProject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Publish-DscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Push-Location`,
        [
            new Parameter(`LiteralPath`, `Specifies the path of the new location. Unlike the Path parameter, the value of the LiteralPath parameter is used 
exactly as it is typed. No characters are interpreted as wildcard characters. If the path includes escape characters, 
enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters 
as escape sequences.`, `String`),
new Parameter(`PassThru`, `Passes an object that represents the location to the pipeline. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path of the new location. This cmdlet your location to the location specified by this path after it 
adds, or pushes, the current location onto the top of the stack. Enter a path of any location whose provider supports 
this cmdlet. Wildcard characters are permitted.`, `String`),
new Parameter(`StackName`, `Specifies the location stack to which the current location is added. Enter a location stack name. If the stack does 
not exist, Push-Location creates it.


Without this parameter, Push-Location adds the location to the current location stack. By default, the current 
location stack is the unnamed default location stack that Windows PowerShell creates. To make a location stack the 
current location stack, use the StackName parameter of the Set-Location cmdlet.  For more information about location 
stacks, see the Notes. Push-Location cannot add a location to the unnamed default stack unless it is the current 
location stack.`, `String`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Adds the current location to the top of a location stack.`,
        `Push-Location [-LiteralPath <String>] [-PassThru] [-StackName <String>] [-UseTransaction] [<CommonParameters>]

Push-Location [[-Path] <String>] [-PassThru] [-StackName <String>] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Read-Host`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Receive-DtcDiagnosticTransaction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Receive-Job`,
        [
            new Parameter(`AutoRemoveJob`, `Indicates that this cmdlet deletes the job after it returns the job results. If the job has more results, the job is 
still deleted, but Receive-Job displays a message.


This parameter works only on custom job types. It is designed for instances of job types that save the job or the type 
outside of the session, such as instances of scheduled jobs.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`ComputerName`, `Specifies an array of names of computers. This cmdlet gets the results of jobs that were run on the specified 
computers. Enter the computer names. Wildcard characters are supported. The default is all jobs in the current session.


This parameter selects from among the job results that are stored on the local computer. It does not get data from 
remote computers. To get job results that are stored on remote computers, use the Invoke-Command cmdlet to run a 
Receive-Job command remotely.`, `String[]`),
new Parameter(`Force`, `Indicates that this cmdlet continues waiting if jobs are in the Suspended or Disconnected state. By default, the Wait 
parameter of Receive-Job returns, or terminates the wait, when jobs are in one of the following states:  Completed, 
Failed, Stopped, Suspended, or Disconnected.


The Force parameter is valid only when the Wait parameter is also used in the command.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies an array of IDs. This cmdlet gets the results of jobs with the specified IDs. The default is all jobs in the 
current session.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and type than 
the instance ID, but it is unique only in the current session. You can type one or more IDs separated by commas. To 
find the ID of a job, type "Get-Job" without parameters.`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies an array of instance IDs. This cmdlet gets the results of jobs with the specified instance IDs. The default 
is all jobs in the current session.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use the 
Get-Job cmdlet.`, `Guid[]`),
new Parameter(`Job`, `Specifies the job for which results are being retrieved. This parameter is required in a Receive-Job command. Enter a 
variable that contains the job or a command that gets the job. You can also pipe a job object to Receive-Job .`, `Job[]`),
new Parameter(`Keep`, `Indicates that this cmdlet saves the job results in the system, even after you have received them. By default, the job 
results are deleted when they are retrieved.


To delete the results, use Receive-Job to receive them again without specifying Keep parameter, close the session, or 
use the Remove-Job cmdlet to delete the job from the session.`, `SwitchParameter`),
new Parameter(`Location`, `Specifies an array of locations. This cmdlet gets only the results of jobs in the specified locations. The default is 
all jobs in the current session.`, `String[]`),
new Parameter(`Name`, `Specifies an array of friendly names. This cmdlet gets the results of jobs that have the specified names. Wildcard 
characters are supported. The default is all jobs in the current session.`, `String[]`),
new Parameter(`NoRecurse`, `Indicates that this cmdlet gets results only from the specified job. By default, Receive-Job also gets the results of 
all child jobs of the specified job.`, `SwitchParameter`),
new Parameter(`Session`, `Specifies an array of sessions. This cmdlet gets the results of jobs that were run in the specified Windows PowerShell 
session ( PSSession ). Enter a variable that contains the PSSession or a command that gets the PSSession , such as a 
Get-PSSession command. The default is all jobs in the current session.`, `PSSession[]`),
new Parameter(`Wait`, `Indicates that this cmdlet suppresses the command prompt until all job results are received. By default, Receive-Job 
immediately returns the available results.


By default, the Wait parameter waits until the job is in one of the following states: Completed, Failed, Stopped, 
Suspended, or Disconnected. To direct the Wait parameter to continue waiting if the job state is Suspended or 
Disconnected, use the Force parameter together with the Wait parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`WriteEvents`, `Indicates that this cmdlet reports changes in the job state while it waits for the job to finish.


This parameter is valid only when the Wait parameter is used in the command and the Keep parameter is omitted.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`WriteJobInResults`, `Indicates that this cmdlet returns the job object followed by the results.


This parameter is valid only when the Wait parameter is used in the command and the Keep parameter is omitted.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
        ],
        `Gets the results of the Windows PowerShell background jobs in the current session.`,
        `Receive-Job [-Job] <Job[]> [[-ComputerName] <String[]>] [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] 
[-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Id] <Int32[]> [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] [-WriteEvents] [-WriteJobInResults] 
[<CommonParameters>]

Receive-Job [-InstanceId] <Guid[]> [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] [-WriteEvents] 
[-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Job] <Job[]> [[-Location] <String[]>] [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] 
[-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Job] <Job[]> [[-Session] <PSSession[]>] [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] 
[-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Name] <String[]> [-AutoRemoveJob] [-Force] [-Keep] [-NoRecurse] [-Wait] [-WriteEvents] 
[-WriteJobInResults] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Receive-PSSession`,
        [
            new Parameter(`AllowRedirection`, `Indicates that this cmdlet allows redirection of this connection to an alternate Uniform Resource Identifier (URI).


When you use the ConnectionURI parameter, the remote destination can return an instruction to redirect to a different 
URI. By default, Windows PowerShell does not redirect connections, but you can use this parameter to enable it to 
redirect the connection.


You can also limit the number of times the connection is redirected by changing the MaximumConnectionRedirectionCount 
session option value. Use the MaximumRedirection parameter of the New-PSSessionOption cmdlet or set the 
MaximumConnectionRedirectionCount property of the $PSSessionOption preference variable. The default value is 5.`, `SwitchParameter`),
new Parameter(`ApplicationName`, `Specifies an application. This cmdlet connects only to sessions that use the specified application.


Enter the application name segment of the connection URI. For example, in the following connection URI, the 
application name is WSMan: "http://localhost:5985/WSMAN". The application name of a session is stored in the 
Runspace.ConnectionInfo.AppName property of the session.


The value of this parameter is used to select and filter sessions. It does not change the application that the session 
uses.`, `String`),
new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate the credentials of the user in the command to reconnect to the 
disconnected session. The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate


- NegotiateWithImplicitCredential




The default value is Default.


For information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the 
Microsoft Developer Network (MSDN) library.

CAUTION: Credential Security Support Provider (CredSSP) authentication, in which the user credentials are passed to a 
remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
new Parameter(`CertificateThumbprint`, `Specifies the digital public key certificate (X509) of a user account that has permission to connect to the 
disconnected session. Enter the certificate thumbprint of the certificate.


Certificates are used in client certificate-based authentication. They can be mapped only to local user accounts. They 
do not work with domain accounts.


To get a certificate thumbprint, use a Get-Item or Get-ChildItem command in the Windows PowerShell Cert: drive.`, `String`),
new Parameter(`ComputerName`, `Specifies the computer on which the disconnected session is stored. Sessions are stored on the computer that is at the 
server-side, or receiving end of a connection. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one computer. Wildcard characters are not 
permitted. To specify the local computer, type the computer name, localhost, or a dot (.)`, `String`),
new Parameter(`ConfigurationName`, `Specifies the name of a session configuration. This cmdlet connects only to sessions that use the specified session 
configuration.


Enter a configuration name or the fully qualified resource URI for a session configuration. If you specify only the 
configuration name, the following schema URI is prepended: http://schemas.microsoft.com/powershell. The configuration 
name of a session is stored in the ConfigurationName property of the session.


The value of this parameter is used to select and filter sessions. It does not change the session configuration that 
the session uses.


For more information about session configurations, see about_Session_Configurations.`, `String`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`ConnectionUri`, `Specifies a URI that defines the connection endpoint that is used to reconnect to the disconnected session.


The URI must be fully qualified. The format of this string is as follows:


<Transport>://<ComputerName>:<Port>/<ApplicationName>


The default value is as follows:


"http://localhost:5985/WSMAN"


"http://localhost:5985/WSMAN"


If you do not specify a connection URI, you can use the UseSSL , ComputerName , Port , and ApplicationName parameters 
to specify the connection URI values.


Valid values for the Transport segment of the URI are HTTP and HTTPS. If you specify a connection URI with a Transport 
segment, but do not specify a port, the session is created with standards ports: 80 for HTTP and 443 for HTTPS. To use 
the default ports for Windows PowerShell remoting, specify port 5985 for HTTP or 5986 for HTTPS.


If the destination computer redirects the connection to a different URI, Windows PowerShell prevents the redirection 
unless you use the AllowRedirection parameter in the command.`, `Uri`),
new Parameter(`Credential`, `Specifies a user account that has permission to connect to the disconnected session. The default is the current user.


Type a user name, such as User01 or Domain01\User01. Or, enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
new Parameter(`Id`, `Specifies the ID of the disconnected session. The Id parameter works only when the disconnected session was previously 
connected to the current session.


This parameter is valid, but not effective, when the session is stored on the local computer, but was not connected to 
the current session.`, `Int32`),
new Parameter(`InstanceId`, `Specifies the instance ID of the disconnected session.


The instance ID is a GUID that uniquely identifies a PSSession on a local or remote computer.


The instance ID is stored in the InstanceID property of the PSSession .`, `Guid`),
new Parameter(`JobName`, `Specifies a friendly name for the job that Receive-PSSession returns. Receive-PSSession returns a job when the value 
of the OutTarget parameter is Job or the job that is running in the disconnected session was started in the current 
session.


If the job that is running in the disconnected session was started in the current session, Windows PowerShell reuses 
the original job object in the session and ignores the value of the JobName parameter.


If the job that is running in the disconnected session was started in a different session, Windows PowerShell creates 
a new job object. It uses a default name, but you can use this parameter to change the name.


If the default value or explicit value of the OutTarget parameter is not Job, the command succeeds, but the JobName 
parameter has no effect.`, `String`),
new Parameter(`Name`, `Specifies the friendly name of the disconnected session.`, `String`),
new Parameter(`OutTarget`, `Determines how the session results are returned. The acceptable values for this parameter are:


- Job. Returns the results asynchronously in a job object. You can use the JobName parameter to specify a name or new 
name for the job.  - Host. Returns the results to the command line (synchronously). If the command is being resumed or 
the results consist of a large number of objects, the response might be delayed.


The default value of the OutTarget parameter is Host. However, if the command that is being received in disconnected 
session was started in the current session, the default value of the OutTarget parameter is the form in which the 
command was started. If the command was started as a job, it is returned as a job by default. Otherwise, it is 
returned to the host program by default.


Typically, the host program displays returned objects at the command line without delay, but this behavior can vary.`, `OutTarget`),
new Parameter(`Port`, `Specifies the network port on the remote computer that is used to reconnect to the session. To connect to a remote 
computer, the remote computer must be listening on the port that the connection uses. The default ports are 5985, 
which is the WinRM port for HTTP, and 5986, which is the WinRM port for HTTPS.


Before using an alternate port, you must configure the WinRM listener on the remote computer to listen at that port. 
To configure the listener, type the following two commands at the Windows PowerShell prompt:


"Remove-Item -Path WSMan:\Localhost\listener\listener* -Recurse"


"New-Item -Path WSMan:\Localhost\listener -Transport http -Address * -Port <port-number>"


Do not use the Port parameter unless you must. The port that is set in the command applies to all computers or 
sessions on which the command runs. An alternate port setting might prevent the command from running on all computers.`, `Int32`),
new Parameter(`Session`, `Specifies the disconnected session. Enter a variable that contains the PSSession or a command that creates or gets the 
PSSession , such as a Get-PSSession command.`, `PSSession`),
new Parameter(`SessionOption`, `Specifies advanced options for the session. Enter a SessionOption object, such as one that you create by using the 
New-PSSessionOption cmdlet, or a hash table in which the keys are session option names and the values are session 
option values.


The default values for the options are determined by the value of the $PSSessionOption preference variable, if it is 
set. Otherwise, the default values are established by options set in the session configuration.


The session option values take precedence over default values for sessions set in the $PSSessionOption preference 
variable and in the session configuration. However, they do not take precedence over maximum values, quotas or limits 
set in the session configuration.


For a description of the session options that includes the default values, see New-PSSessionOption. For information 
about the $PSSessionOption preference variable, see about_Preference_Variables 
(http://go.microsoft.com/fwlink/?LinkID=113248). For more information about session configurations, see 
about_Session_Configurations (http://go.microsoft.com/fwlink/?LinkID=145152).`, `PSSessionOption`),
new Parameter(`UseSSL`, `Indicates that this cmdlet uses the Secure Sockets Layer (SSL) protocol to connect to the disconnected session. By 
default, SSL is not used.


WS-Management encrypts all Windows PowerShell content transmitted over the network. UseSSL is an additional protection 
that sends the data across an HTTPS connection instead of an HTTP connection.


If you use this parameter, but SSL is not available on the port that is used for the command, the command fails.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Gets results of commands in disconnected sessions.`,
        `Receive-PSSession [-ConnectionUri] <Uri> [-Name] <String> [-AllowRedirection] [-Authentication {Default | Basic | 
Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] 
[-ConfigurationName <String>] [-Confirm] [-Credential <PSCredential>] [-JobName <String>] [-OutTarget {Default | Host 
| Job}] [-SessionOption <PSSessionOption>] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-ConnectionUri] <Uri> [-AllowRedirection] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Confirm] [-Credential <PSCredential>] -InstanceId <Guid> [-JobName <String>] [-OutTarget {Default | Host | 
Job}] [-SessionOption <PSSessionOption>] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-ComputerName] <String> [-Name] <String> [-ApplicationName <String>] [-Authentication {Default | 
Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] 
[-ConfigurationName <String>] [-Confirm] [-Credential <PSCredential>] [-JobName <String>] [-OutTarget {Default | Host 
| Job}] [-Port <Int32>] [-SessionOption <PSSessionOption>] [-UseSSL] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-ComputerName] <String> [-ApplicationName <String>] [-Authentication {Default | Basic | Negotiate | 
NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-CertificateThumbprint <String>] [-ConfigurationName 
<String>] [-Confirm] [-Credential <PSCredential>] -InstanceId <Guid> [-JobName <String>] [-OutTarget {Default | Host | 
Job}] [-Port <Int32>] [-SessionOption <PSSessionOption>] [-UseSSL] [-WhatIf] [<CommonParameters>]

Receive-PSSession [-Id] <Int32> [-Confirm] [-JobName <String>] [-OutTarget {Default | Host | Job}] [-WhatIf] 
[<CommonParameters>]

Receive-PSSession [-Confirm] -InstanceId <Guid> [-JobName <String>] [-OutTarget {Default | Host | Job}] [-WhatIf] 
[<CommonParameters>]

Receive-PSSession [-Name] <String> [-Confirm] [-JobName <String>] [-OutTarget {Default | Host | Job}] [-WhatIf] 
[<CommonParameters>]

Receive-PSSession [-Session] <PSSession> [-Confirm] [-JobName <String>] [-OutTarget {Default | Host | Job}] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-ArgumentCompleter`,
        [
            new Parameter(`CommandName`, `Specifies the name of the command as an array.`, `String[]`),
new Parameter(`Native`, `Indicates that the argument completer is for a native command where Windows PowerShell cannot complete parameter names.`, `SwitchParameter`),
new Parameter(`ParameterName`, `Specifies the name of the parameter whose argument is being completed.`, `String`),
new Parameter(`ScriptBlock`, `Specifies the commands to run. Enclose the commands in braces ( { } ) to create a script block. This parameter is 
required.`, `ScriptBlock`),
        ],
        `Registers a custom argument completer.`,
        `Register-ArgumentCompleter [-CommandName <String[]>] -ParameterName <String> -ScriptBlock <ScriptBlock> 
[<CommonParameters>]

Register-ArgumentCompleter -CommandName <String[]> [-Native] -ScriptBlock <ScriptBlock> [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-AzureAutomationScheduledRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-AzureRmAutomationDscNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-AzureRmAutomationScheduledRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-AzureRmBackupContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-AzureRmProviderFeature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-AzureRmResourceProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-CimIndicationEvent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-EngineEvent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-ObjectEvent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-PackageSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-PSSessionConfiguration`,
        [
            new Parameter(`AccessMode`, `Enables and disables the session configuration and determines whether it can be used for remote or local sessions on 
the computer. The acceptable values for this parameter are:


- Disabled. Disables the session configuration. It cannot be used for remote or local access to the computer.  - 
Local. Allows users of the local computer to use the session configuration to create a local loopback session on the 
same computer, but denies access to remote users.  - Remote. Allows local and remote users to use the session 
configuration to create sessions and run commands on this computer.


The default value is Remote.


Other cmdlets can override the value of this parameter later. For example, the Enable-PSRemoting cmdlet allows for 
remote access to all session configurations, the Enable-PSSessionConfiguration cmdlet enables session configurations, 
and the Disable-PSRemoting cmdlet prevents remote access to all session configurations.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionConfigurationAccessMode`),
new Parameter(`ApplicationBase`, `Specifies the path of the assembly file ( .dll) that is specified in the value of the AssemblyName* parameter. Use 
this parameter when the value of the AssemblyName parameter does not include a path. The default is the current 
directory.`, `String`),
new Parameter(`AssemblyName`, `Specifies the name of an assembly file (*.dll) in which the configuration type is defined. You can specify the path of 
the .dll in this parameter or in the value of the ApplicationBase parameter.


This parameter is required when you specify the ConfigurationTypeName parameter.`, `String`),
new Parameter(`ConfigurationTypeName`, `Specifies the fully qualified name of the Microsoft .NET Framework type that is used for this configuration. The type 
that you specify must implement the System.Management.Automation.Remoting.PSSessionConfiguration class.


To specify the assembly file (.dll) that implements the configuration type, specify the AssemblyName and 
ApplicationBase parameters.


Creating a type lets you control more aspects of the session configuration, such as exposing or hiding certain 
parameters of cmdlets, or setting data size and object size limits that users cannot override.


If you omit this parameter, the DefaultRemotePowerShellConfiguration class is used for the session configuration.`, `String`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Suppresses all user prompts and restarts the WinRM service without prompting. Restarting the service makes the 
configuration change effective.


To prevent a restart and suppress the restart prompt, specify the NoServiceRestart parameter.`, `SwitchParameter`),
new Parameter(`MaximumReceivedDataSizePerCommandMB`, `Specifies a limit for the amount of data that can be sent to this computer in any single remote command. Enter the 
data size in megabytes (MB). The default is 50 MB.


If a data size limit is defined in the configuration type that is specified in the ConfigurationTypeName parameter, 
the limit in the configuration type is used and the value of this parameter is ignored.`, `Double`),
new Parameter(`MaximumReceivedObjectSizeMB`, `Specifies a limit for the amount of data that can be sent to this computer in any single object. Enter the data size 
in megabytes. The default is 10 MB.


If an object size limit is defined in the configuration type that is specified in the ConfigurationTypeName parameter, 
the limit in the configuration type is used and the value of this parameter is ignored.`, `Double`),
new Parameter(`ModulesToImport`, `Specifies the modules and snap-ins that are automatically imported into sessions that use the session configuration.


By default, only the Microsoft.PowerShell.Core snap-in is imported into sessions. Unless the cmdlets are excluded, you 
can use the Import-Module and Add-PSSnapin cmdlets to add modules and snap-ins to the session.


The modules specified in this parameter value are imported in additions to modules that are specified by the 
SessionType parameter and those listed in the ModulesToImport key in the session configuration file 
(New-PSSessionConfigurationFile). However, settings in the session configuration file can hide the commands exported 
by modules or prevent users from using them.


This parameter was introduced in Windows PowerShell 3.0.`, `Object[]`),
new Parameter(`Name`, `Specifies a name for the session configuration. This parameter is required.`, `String`),
new Parameter(`NoServiceRestart`, `Does not restart the WinRM service, and suppresses the prompt to restart the service.


By default, when you run a Register-PSSessionConfiguration command, you are prompted to restart the WinRM service to 
make the new session configuration effective. Until the WinRM service is restarted, the new session configuration is 
not effective.


To restart the WinRM service without prompting, specify the Force parameter. To restart the WinRM service manually, 
use the Restart-Service cmdlet.`, `SwitchParameter`),
new Parameter(`PSVersion`, `Specifies the version of Windows PowerShell in sessions that use this session configuration.


The value of this parameter takes precedence over the value of the PowerShellVersion key in the session configuration 
file.


This parameter was introduced in Windows PowerShell 3.0.`, `Version`),
new Parameter(`Path`, `Specifies the path and file name of a session configuration file (.pssc), such as one created by the 
New-PSSessionConfigurationFile cmdlet. If you omit the path, the default is the current directory.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`ProcessorArchitecture`, `Determines whether a 32-bit or 64-bit version of the Windows PowerShell process is started in sessions that use this 
session configuration. The acceptable values for this parameter are: x86 (32-bit) and AMD64 (64-bit). The default 
value is determined by the processor architecture of the computer that hosts the session configuration.


You can use this parameter to create a 32-bit session on a 64-bit computer. Attempts to create a 64-bit process on a 
32-bit computer fail.`, `String`),
new Parameter(`RunAsCredential`, `Specifies credentials for commands in the session. By default, commands run with the permissions of the current user.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
new Parameter(`SecurityDescriptorSddl`, `Specifies a Security Descriptor Definition Language (SDDL) string for the configuration.


This string determines the permissions that are required to use the new session configuration. To use a session 
configuration in a session, users must have at least Execute(Invoke) permission for the configuration.


If the security descriptor is complex, consider using the ShowSecurityDescriptorUI parameter instead of this 
parameter. You cannot use both parameters in the same command.


If you omit this parameter, the root SDDL for the WinRM service is used for this configuration. To view or change the 
root SDDL, use the WSMan provider. For example "Get-Item wsman:\localhost\service\rootSDDL". For more information 
about the WSMan provider, type "Get-Help wsman".`, `String`),
new Parameter(`SessionType`, `Specifies the type of session that is created by using the session configuration. The acceptable values for this 
parameter are:


- Empty. No modules or snap-ins are added to session by default. Use the parameters of this cmdlet to add modules, 
functions, scripts, and other features to the session.  - Default. Adds the Microsoft.PowerShell.Core snap-in to the 
session. This module includes the Import-Module and Add-PSSnapin cmdlets that users can use to import other modules 
and snap-ins unless you explicitly prohibit the use of the cmdlets.  - RestrictedRemoteServer. Includes only the 
following cmdlets: Exit-PSSession, Get-Command, Get-FormatData, Get-Help, Measure-Object, Out-Default, and 
Select-Object. Use a script or assembly, or the keys in the session configuration file, to add modules, functions, 
scripts, and other features to the session.


The default value is Default.


The value of this parameter takes precedence over the value of the SessionType key in the session configuration file.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionType`),
new Parameter(`SessionTypeOption`, `Specifies type-specific options for the session configuration. Enter a session type options object, such as the 
PSWorkflowExecutionOption object that the New-PSWorkflowExecutionOption cmdlet returns.


The options of sessions that use the session configuration are determined by the values of session options and the 
session configuration options. Unless specified, options set in the session, such as by using the New-PSSessionOption 
cmdlet, take precedence over options set in the session configuration. However, session option values cannot exceed 
maximum values set in the session configuration.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionTypeOption`),
new Parameter(`ShowSecurityDescriptorUI`, `Indicates that this cmdlet displays a property sheet that helps you create the SDDL for the session configuration. The 
property sheet appears after you enter the Register-PSSessionConfiguration command and then restart the WinRM service.


When setting the permissions for the configuration, remember that users must have at least Execute(Invoke) permission 
to use the session configuration in a session.


You cannot use the SecurityDescriptorSDDL parameter and this parameter in the same command.`, `SwitchParameter`),
new Parameter(`StartupScript`, `Specifies the fully qualified path of a Windows PowerShell script. The specified script runs in the new session that 
uses the session configuration.


You can use the script to additionally configure the session. If the script generates an error, even a non-terminating 
error, the session is not created and the New-PSSession command fails.`, `String`),
new Parameter(`ThreadApartmentState`, `Specifies the apartment state of the threads in the session. The acceptable values for this parameter are: STA, MTA, 
and Unknown. The default value is Unknown.`, `ApartmentState`),
new Parameter(`ThreadOptions`, `Specifies how threads are created and used when a command runs in the session. The acceptable values for this 
parameter are:


- Default


- ReuseThread


- UseCurrentThread


- UseNewThread




The default value is UseCurrentThread.

For more information, see "PSThreadOptions Enumeration" in the Microsoft Developer Network (MSDN) library.`, `PSThreadOptions`),
new Parameter(`TransportOption`, `Specifies the transport option.


This parameter was introduced in Windows PowerShell 3.0.`, `PSTransportOption`),
new Parameter(`UseSharedProcess`, `Use only one process to host all sessions that are started by the same user and use the same session configuration. By 
default, each session is hosted in its own process.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Creates and registers a new session configuration.`,
        `Register-PSSessionConfiguration [-Name] <String> [-AccessMode {Disabled | Local | Remote}] [-ApplicationBase <String>] 
[-Confirm] [-Force] [-MaximumReceivedDataSizePerCommandMB <Double>] [-MaximumReceivedObjectSizeMB <Double>] 
[-ModulesToImport <Object[]>] [-NoServiceRestart] [-PSVersion <Version>] [-ProcessorArchitecture {x86 | amd64}] 
[-RunAsCredential <PSCredential>] [-SecurityDescriptorSddl <String>] [-SessionType {DefaultRemoteShell | Workflow}] 
[-SessionTypeOption <PSSessionTypeOption>] [-ShowSecurityDescriptorUI] [-StartupScript <String>] 
[-ThreadApartmentState {STA | MTA | Unknown}] [-ThreadOptions {Default | UseNewThread | ReuseThread | 
UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] [-WhatIf] [<CommonParameters>]

Register-PSSessionConfiguration [-Name] <String> [-AssemblyName] <String> [-ConfigurationTypeName] <String> 
[-AccessMode {Disabled | Local | Remote}] [-ApplicationBase <String>] [-Confirm] [-Force] 
[-MaximumReceivedDataSizePerCommandMB <Double>] [-MaximumReceivedObjectSizeMB <Double>] [-ModulesToImport <Object[]>] 
[-NoServiceRestart] [-PSVersion <Version>] [-ProcessorArchitecture {x86 | amd64}] [-RunAsCredential <PSCredential>] 
[-SecurityDescriptorSddl <String>] [-SessionTypeOption <PSSessionTypeOption>] [-ShowSecurityDescriptorUI] 
[-StartupScript <String>] [-ThreadApartmentState {STA | MTA | Unknown}] [-ThreadOptions {Default | UseNewThread | 
ReuseThread | UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] [-WhatIf] 
[<CommonParameters>]

Register-PSSessionConfiguration [-Name] <String> [-AccessMode {Disabled | Local | Remote}] [-Confirm] [-Force] 
[-MaximumReceivedDataSizePerCommandMB <Double>] [-MaximumReceivedObjectSizeMB <Double>] [-NoServiceRestart] -Path 
<String> [-ProcessorArchitecture {x86 | amd64}] [-RunAsCredential <PSCredential>] [-SecurityDescriptorSddl <String>] 
[-ShowSecurityDescriptorUI] [-StartupScript <String>] [-ThreadApartmentState {STA | MTA | Unknown}] [-ThreadOptions 
{Default | UseNewThread | ReuseThread | UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] 
[-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-ScheduledJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-UevTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Register-WmiEvent`,
        [
            new Parameter(`Action`, `Specifies commands that handle the events. The commands in the Action parameter run when an event is raised instead of 
sending the event to the event queue. Enclose the commands in braces ( { } ) to create a script block.


The value of Action can include the $Event, $EventSubscriber, $Sender, $EventArgs, and $Args automatic variables, 
which provide information about the event to the Action script block. For more information, see 
about_Automatic_Variables.


When you specify an action, Register-WmiEvent returns an event job object that represents that action. You can use the 
cmdlets that contain the Job noun (the Job cmdlets) to manage the event job.`, `ScriptBlock`),
new Parameter(`Class`, `Specifies the event to which you are subscribing. Enter the WMI class that generates the events. A Class or Query 
parameter is required in every command.`, `String`),
new Parameter(`ComputerName`, `Specifies the name of the computer on which the command runs. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of the computer. To specify the local computer, 
type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your 
computer is not configured to run remote commands.`, `String`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
new Parameter(`Forward`, `Indicates that this cmdlet sends events for this subscription to the session on the local computer. Use this parameter 
when you are registering for events on a remote computer or in a remote session.`, `SwitchParameter`),
new Parameter(`MaxTriggerCount`, `Specifies the maximum trigger count.`, `Int32`),
new Parameter(`MessageData`, `Specifies any additional data to be associated with this event subscription. The value of this parameter appears in 
the MessageData property of all events associated with this subscription.`, `PSObject`),
new Parameter(`Namespace`, `Specifies the namespace of the WMI class.`, `String`),
new Parameter(`Query`, `Specifies a query in WMI Query Language (WQL) that identifies the WMI event class, such as: "select * from 
__InstanceDeletionEvent".`, `String`),
new Parameter(`SourceIdentifier`, `Specifies a name that you select for the subscription. The name that you select must be unique in the current session. 
The default value is the GUID that Windows PowerShell assigns.


The value of this parameter appears in the value of the SourceIdentifier property of the subscriber object and of all 
event objects associated with this subscription.`, `String`),
new Parameter(`SupportEvent`, `Indicates that this cmdlet hides the event subscription. Use this parameter when the current subscription is part of a 
more complex event registration mechanism and it should not be discovered independently.


To view or cancel a subscription that was created by using the SupportEvent parameter, specify the Force parameter of 
the Get-EventSubscriber and Unregister-Event cmdlets.`, `SwitchParameter`),
new Parameter(`Timeout`, `Specifies how long Windows PowerShell waits for this command to finish.


The default value, 0 (zero), means that there is no time-out, and it causes Windows PowerShell to wait indefinitely.`, `Int64`),
        ],
        `Subscribes to a Windows Management Instrumentation (WMI) event.`,
        `Register-WmiEvent [-Class] <String> [[-SourceIdentifier] <String>] [[-Action] <ScriptBlock>] [-ComputerName <String>] 
[-Credential <PSCredential>] [-Forward] [-MaxTriggerCount <Int32>] [-MessageData <PSObject>] [-Namespace <String>] 
[-SupportEvent] [-Timeout <Int64>] [<CommonParameters>]

Register-WmiEvent [-Query] <String> [[-SourceIdentifier] <String>] [[-Action] <ScriptBlock>] [-ComputerName <String>] 
[-Credential <PSCredential>] [-Forward] [-MaxTriggerCount <Int32>] [-MessageData <PSObject>] [-Namespace <String>] 
[-SupportEvent] [-Timeout <Int64>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AppvClientConnectionGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AppvClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AppvPublishingServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AppxPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AppxProvisionedPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AppxVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAclConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAffinityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureApplicationGatewaySslCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAutomationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAutomationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAutomationConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAutomationConnectionType`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAutomationCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAutomationModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAutomationSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAutomationVariable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureAvailabilitySet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureBatchCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureBatchComputeNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureBatchComputeNodeUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureBatchJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureBatchJobSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureBatchNodeFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureBatchPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureBatchTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureDns`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureEnvironment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureInternalLoadBalancer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureKeyVaultCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureKeyVaultCertificateContact`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureKeyVaultCertificateIssuer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureKeyVaultCertificateOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureKeyVaultKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureKeyVaultManagedStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureKeyVaultManagedStorageSasDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureKeyVaultSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureLocalNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureMediaServicesAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureNetworkInterfaceConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureNetworkSecurityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureNetworkSecurityGroupAssociation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureNetworkSecurityGroupConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureNetworkSecurityGroupFromSubnet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureNetworkSecurityRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzurePublicIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRemoteAppCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRemoteAppTemplateImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRemoteAppUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRemoteAppUserDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRemoteAppVNet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureReservedIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureReservedIPAssociation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmADAppCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmADApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmADServicePrincipal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmADSpCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmADUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAlertRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAnalysisServicesServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementApi`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementApiFromProduct`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementAuthorizationServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementBackend`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementIdentityProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementLogger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementOpenIdConnectProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementProduct`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementProductFromGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementRegion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApiManagementUserFromGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayAuthenticationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayBackendAddressPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayBackendHttpSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayConnectionDraining`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayFrontendIPConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayFrontendPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayHttpListener`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayIPConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayRequestRoutingRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewaySslCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewaySslPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmApplicationGatewayUrlPathMapConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAppServicePlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationConnectionType`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationDscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationDscNodeConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationVariable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutomationWebhook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAutoscaleSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmAvailabilitySet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmBackupProtectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmBackupVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmBatchAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmBatchApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmBatchApplicationPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmCdnCustomDomain`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmCdnEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmCdnProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmCognitiveServicesAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmContainerRegistry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmContainerService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmContainerServiceAgentPoolProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataFactory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataFactoryDataset`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataFactoryGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataFactoryHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataFactoryLinkedService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataFactoryPipeline`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeAnalyticsAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeAnalyticsCatalogCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeAnalyticsCatalogSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeAnalyticsDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeAnalyticsFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeStoreAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeStoreFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeStoreItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeStoreItemAcl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeStoreItemAclEntry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDataLakeStoreTrustedIdProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDnsRecordConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDnsRecordSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmDnsZone`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmEnvironment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmEventHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmEventHubAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmEventHubConsumerGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmEventHubNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmEventHubNamespaceAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmExpressRouteCircuit`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmExpressRouteCircuitAuthorization`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmExpressRouteCircuitPeeringConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmHDInsightCluster`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmHDInsightPersistedScriptAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmImageDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIntegrationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIntegrationAccountAgreement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIntegrationAccountCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIntegrationAccountMap`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIntegrationAccountPartner`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIntegrationAccountReceivedIcn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIntegrationAccountSchema`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIotHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIotHubEventHubConsumerGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmIotHubKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmKeyVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmKeyVaultAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLoadBalancer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLoadBalancerBackendAddressPoolConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLoadBalancerFrontendIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLoadBalancerInboundNatPoolConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLoadBalancerInboundNatRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLoadBalancerProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLoadBalancerRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLocalNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLogicApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmLogProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmMediaService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmMlCommitmentPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmMlWebService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNetworkInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNetworkInterfaceIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNetworkSecurityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNetworkSecurityRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNetworkWatcher`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNetworkWatcherPacketCapture`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNotificationHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNotificationHubAuthorizationRules`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNotificationHubsNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmNotificationHubsNamespaceAuthorizationRules`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmOperationalInsightsDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmOperationalInsightsSavedSearch`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmOperationalInsightsStorageInsight`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmOperationalInsightsWorkspace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmPolicyAssignment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmPolicyDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmPowerBIWorkspaceCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmPublicIpAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRecoveryServicesBackupProtectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRecoveryServicesVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRedisCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRedisCacheDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRedisCachePatchSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRelayAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRelayHybridConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRelayNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmResourceGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmResourceGroupDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmResourceLock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRoleAssignment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRoleDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRouteConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRouteFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRouteFilterRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSchedulerJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServerManagementGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServerManagementNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServerManagementSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceBusNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceBusNamespaceAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceBusQueue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceBusQueueAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceBusSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceBusTopic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceBusTopicAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceFabricClientCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceFabricClusterCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceFabricNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceFabricNodeType`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmServiceFabricSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryFabric`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryNetworkMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryProtectionContainerMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryRecoveryPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryReplicationProtectedItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryServicesProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoverySite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryStorageClassificationMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSiteRecoveryVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSnapshot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlDatabaseAuditing`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlDatabaseDataMaskingRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlDatabaseFailoverGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlDatabaseFromFailoverGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlDatabaseSecondary`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlDatabaseThreatDetectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlElasticPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlServerActiveDirectoryAdministrator`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlServerAuditing`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlServerCommunicationLink`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlServerDisasterRecoveryConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlServerFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlServerKeyVaultKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmSqlServerThreatDetectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmStreamAnalyticsFunction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmStreamAnalyticsInput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmStreamAnalyticsJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmStreamAnalyticsOutput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmTag`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmTrafficManagerEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmTrafficManagerEndpointConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVirtualNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVirtualNetworkGatewayConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVirtualNetworkGatewayDefaultSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVirtualNetworkGatewayIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVirtualNetworkPeering`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVirtualNetworkSubnetConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMAccessExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMAEMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMChefExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMCustomScriptExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMDiskEncryptionExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMDscExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMNetworkInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVMSqlServerExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVmss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVmssDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVmssDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVmssExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVmssNetworkInterfaceConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVpnClientRevokedCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmVpnClientRootCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmWcfRelay`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmWebApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmWebAppBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmWebAppSlot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRmWebAppSSLBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSBAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSBNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSchedulerJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureServiceADDomainExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureServiceAntimalwareExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureServiceDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureServiceExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureServiceRemoteDesktopExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSiteRecoveryNetworkMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSiteRecoveryRecoveryPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSiteRecoveryStorageMapping`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSqlDatabaseServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSqlDatabaseServerFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStaticVNetIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageBlob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageContainerStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageCORSRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageDirectory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageQueue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageQueueStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageShare`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageShareStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorageTableStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStoreAddOn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorSimpleAccessControlRecord`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorSimpleDeviceBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorSimpleDeviceBackupPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorSimpleDeviceVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorSimpleDeviceVolumeContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureStorSimpleStorageAccountCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSubnetRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureTrafficManagerEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVirtualIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVirtualNetworkGatewayConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMAccessExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMBGInfoExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMChefExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMCustomScriptExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMDscExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMImageDataDiskConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMImageOSDiskConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMMicrosoftAntimalwareExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMPuppetExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVMSqlServerExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVNetConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVNetGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureVNetGatewayDefaultSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureWebsite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-AzureWebsiteJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-BitsTransfer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-CertificateEnrollmentPolicyServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-CertificateNotificationTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-CimInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-CimSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-CIPolicyRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-Computer`,
        [
            new Parameter(`ComputerName`, `Specifies the computers to be removed from their domains. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of the remote computers. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Remove-Computer 
even if your computer is not configured to run remote commands.


This parameter was introduced in Windows PowerShell 3.0.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Suppresses the user prompt. By default, Remove-Computer prompts you for confirmation before removing each computer.`, `SwitchParameter`),
new Parameter(`LocalCredential`, `Specifies a user account that has permission to connect to the computers that the ComputerName parameter specifies. 
The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password. To specify a user account that 
has permission to remove the computer from its current domain, use the UnjoinDomainCredential parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
new Parameter(`PassThru`, `Returns the results of the command. Otherwise, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`Restart`, `Indicates that this cmdlet restarts the computers that were removed after the removal is completed. A restart is often 
required to make the change effective.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`UnjoinDomainCredential`, `Specifies a user account that has permission to remove the computers from their current domains. Explicit credentials, 
as provided by this parameter, are required to remove remote computers from a domain, even when the value is the 
credentials of the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by 
Get-Credential . If you type a user name, this cmdlet prompts you for a password.


You can refer to this parameter by its name, UnjoinDomainCredential , or its alias, Credential .


To specify a user account that has permission to connect to the remote computers, use the LocalCredential parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
new Parameter(`WorkgroupName`, `Specifies the name of a workgroup to which the computers are added when they are removed from their domains. The 
default value is WORKGROUP. When you remove a computer from a domain, you must add it to a workgroup.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        ],
        `Removes the local computer from its domain.`,
        `Remove-Computer [-UnjoinDomainCredential] <PSCredential> [-ComputerName <String[]>] [-Confirm] [-Force] 
[-LocalCredential <PSCredential>] [-PassThru] [-Restart] [-WhatIf] [-WorkgroupName <String>] [<CommonParameters>]

Remove-Computer [[-UnjoinDomainCredential] <PSCredential>] [-Confirm] [-Force] [-PassThru] [-Restart] [-WhatIf] 
[-WorkgroupName <String>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-Event`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-EventLog`,
        [
            new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Remove-EventLog 
even if your computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`LogName`, `Specifies the event logs. Enter the log name of one or more event logs, separated by commas. The log name is the value 
of the Log property, not the LogDisplayName , Wildcard characters are not permitted. This parameter is required.`, `String[]`),
new Parameter(`Source`, `Specifies the event sources that this cmdlet unregisters. Enter the source names, not the executable name, separated 
by commas.`, `String[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Deletes an event log or unregisters an event source.`,
        `Remove-EventLog [-LogName] <String[]> [[-ComputerName] <String[]>] [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-EventLog [[-ComputerName] <String[]>] [-Confirm] [-Source <String[]>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-IISConfigAttribute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-IISConfigCollectionElement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-IISConfigElement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-IISSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-IISSiteBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-Item`,
        [
            new Parameter(`Stream`, `Deletes the specified alternate data stream from a file, but does not delete the file. Enter the stream name. 
Wildcards are supported. This parameter is not valid on folders.

Stream is a dynamic parameter that the FileSystem provider adds to the Remove-Item cmdlet. This parameter works only 
in file system drives.

You can use the Remove-Item cmdlet to delete an alternate data stream. However, it is not the recommended way to 
eliminate security checks that block files that are downloaded from the Internet. If you verify that a downloaded file 
is safe, use the Unblock-File cmdlet.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element 
or pattern, such as *.txt. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path 
parameter. The syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are 
more efficient than other parameters, because the provider applies them when it retrieves the objects, instead of 
having Windows PowerShell filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the cmdlet to remove items that cannot otherwise be changed, such as hidden or read-only files or read-only 
aliases or variables. The cmdlet cannot remove constant aliases or variables. Implementation varies from provider to 
provider. For more information, see about_Providers. Even using the Force parameter, the cmdlet cannot override 
security restrictions.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies items to delete. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as *.txt. Wildcard characters are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path of the items being removed. Unlike Path , the value of the LiteralPath parameter is used exactly as 
it is typed. No characters are interpreted as wildcard characters. If the path includes escape characters, enclose it 
in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape 
sequences.`, `String[]`),
new Parameter(`Path`, `Specifies a path of the items being removed. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Recurse`, `Indicates that this cmdlet deletes the items in the specified locations and in all child items of the locations.


When it is used with the Include parameter, the Recurse parameter might not delete all subfolders or all child items. 
This is a known issue. As a workaround, try piping results of the "Get-ChildItem -Recurse" command to Remove-Item , as 
described in Example 4 in this topic.`, `SwitchParameter`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Deletes files and folders.`,
        `Remove-Item [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] -LiteralPath <String[]> [-Recurse] [-Stream <String[]>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Remove-Item [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] [-Recurse] [-Stream <String[]>] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Remove-Item [-Stream <string>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-ItemProperty`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element 
or pattern, such as *.txt. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path 
parameter. The syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are 
more efficient than other parameters, because the provider applies them when it retrieves the objects instead of 
having Windows PowerShell filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the cmdlet to remove a property of an object that cannot otherwise be accessed by the user. Implementation 
varies from provider to provider. For more information, see about_Providers.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies items to delete. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, 
such as *.txt. Wildcard characters are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path of the item property. The value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Name`, `Specifies the names of the properties to remove.`, `String[]`),
new Parameter(`Path`, `Specifies the path of the item whose properties are being removed. Wildcard characters are permitted.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Deletes the property and its value from an item.`,
        `Remove-ItemProperty [-Name] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-UseTransaction] [-WhatIf] [<CommonParameters>]

Remove-ItemProperty [-Path] <String[]> [-Name] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-UseTransaction] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-Job`,
        [
            new Parameter(`Command`, `Specifies an array of words that appear in commands. This cmdlet deletes jobs that include the specified words.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet deletes jobs that satisfy all of the conditions. Enter a hash table 
where the keys are job properties and the values are job property values.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs. It does not work on standard 
background jobs, such as those created by using the Start-Job cmdlet. For information about support for this 
parameter, see the help topic for the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Hashtable`),
new Parameter(`Force`, `Indicates that this cmdlet deletes a job even if the status is Running. By default, this cmdlet does not delete 
running jobs.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies an array of IDs of background jobs that this cmdlet deletes.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and type than 
the instance ID, but it is unique only in the current session. You can type one or more IDs, separated by commas. To 
find the ID of a job, type "Get-Job".`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies an array of instance IDs of jobs that this cmdlet deletes.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use the 
Get-Job cmdlet or display the job object.`, `Guid[]`),
new Parameter(`Job`, `Specifies the jobs to be deleted. Enter a variable that contains the jobs or a command that gets the jobs. You can 
also use a pipeline operator to submit jobs to this cmdlet.`, `Job[]`),
new Parameter(`Name`, `Specifies an array of friendly names of jobs that this cmdlet deletes. Wildcard characters are permitted.


Because the friendly name is not guaranteed to be unique, even in the session, use the WhatIf and Confirm parameters 
when you delete jobs by name.`, `String[]`),
new Parameter(`State`, `Specifies the state of jobs to delete. The acceptable values for this parameter are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Disconnected


- Suspending


- Stopping


- Suspended




To delete jobs with a state of Running, use the Force parameter.`, `JobState`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Deletes a Windows PowerShell background job.`,
        `Remove-Job [-Command <String[]>] [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-Job [-Filter] <Hashtable> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-Id] <Int32[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-Job] <Job[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-Name] <String[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-InstanceId] <Guid[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | 
Suspending | Stopping | AtBreakpoint} [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-JobTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-LocalGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-LocalGroupMember`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-LocalUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-Module`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Indicates that this cmdlet removes read-only modules. By default, Remove-Module removes only read-write modules.


The ReadOnly and ReadWrite values are stored in AccessMode property of a module.`, `SwitchParameter`),
new Parameter(`FullyQualifiedName`, `Specifies the fully qualified names of modules to remove.`, `ModuleSpecification[]`),
new Parameter(`ModuleInfo`, `Specifies the module objects to remove. Enter a variable that contains a module object ( PSModuleInfo ) or a command 
that gets a module object, such as a Get-Module command. You can also pipe module objects to Remove-Module .`, `PSModuleInfo[]`),
new Parameter(`Name`, `Specifies the names of modules to remove. Wildcard characters are permitted. You can also pipe name strings to 
Remove-Module .`, `String[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Removes modules from the current session.`,
        `Remove-Module [-FullyQualifiedName] <ModuleSpecification[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Module [-ModuleInfo] <PSModuleInfo[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]

Remove-Module [-Name] <String[]> [-Confirm] [-Force] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PmemDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PSBreakpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PSDrive`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Removes the current Windows PowerShell drive.`, `SwitchParameter`),
new Parameter(`LiteralName`, `Specifies the name of the drive.


The value of LiteralName is used exactly as typed. No characters are interpreted as wildcard characters. If the name 
includes escape characters, enclose it in single quotation marks. Single quotation marks instruct Windows PowerShell 
not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Name`, `Specifies the names of the drives to remove. Do not type a colon (:) after the drive name.`, `String[]`),
new Parameter(`PSProvider`, `Specifies an array of PSProvider objects. This cmdlet removes and disconnects all of the drives associated with the 
specified Windows PowerShell provider.`, `String[]`),
new Parameter(`Scope`, `Specifies an index that identifies the scope from which the drive is being removed.`, `String`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Deletes temporary Windows PowerShell drives and disconnects mapped network drives.`,
        `Remove-PSDrive [-LiteralName] <String[]> [-Confirm] [-Force] [-PSProvider <String[]>] [-Scope <String>] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]

Remove-PSDrive [-Name] <String[]> [-Confirm] [-Force] [-PSProvider <String[]>] [-Scope <String>] [-UseTransaction] 
[-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PSReadlineKeyHandler`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PSSession`,
        [
            new Parameter(`ComputerName`, `Specifies an array of names of computers. This cmdlet closes the PSSessions that are connected to the specified 
computers. Wildcard characters are permitted.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more remote computers. To specify the 
local computer, type the computer name, localhost, or a dot (.).`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`ContainerId`, `Specifies an array of IDs of containers. This cmdlet starts an interactive session with each of the specified 
containers. To see the containers that are available to you, use the Get-Container cmdlet.`, `String[]`),
new Parameter(`Id`, `Specifies an array of IDs of sessions. This cmdlet closes the PSSessions with the specified IDs. Type one or more IDs, 
separated by commas, or use the range operator (..) to specify a range of IDs.


An ID is an integer that uniquely identifies the PSSession in the current session. It is easier to remember and type 
than the InstanceId , but it is unique only in the current session. To find the ID of a PSSession , run the 
Get-PSSession cmdlet without parameters.`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies an array of instance IDs. This cmdlet closes the PSSessions that have the specified instance IDs.


The instance ID is a GUID that uniquely identifies a PSSession in the current session. The instance ID is unique, even 
when you have multiple sessions running on a single computer.


The instance ID is stored in the InstanceID property of the object that represents a PSSession . To find the 
InstanceID of the PSSessions in the current session, type "Get-PSSession | Format-Table Name, ComputerName, 
InstanceId".`, `Guid[]`),
new Parameter(`Name`, `Specifies an array of friendly names of sessions. This cmdlet closes the PSSessions that have the specified friendly 
names. Wildcard characters are permitted.


Because the friendly name of a PSSession might not be unique, when you use the Name parameter, consider also using the 
WhatIf or Confirm parameter in the Remove-PSSession command.`, `String[]`),
new Parameter(`Session`, `Specifies the session objects of the PSSessions to close. Enter a variable that contains the PSSessions or a command 
that creates or gets the PSSessions , such as a New-PSSession or Get-PSSession command. You can also pipe one or more 
session objects to Remove-PSSession .`, `PSSession[]`),
new Parameter(`VMId`, `Specifies an array of ID of virtual machines. This cmdlet starts an interactive session with each of the specified 
virtual machines. To see the virtual machines that are available to you, use the following command:


"Get-VM | Select-Object -Property Name, ID"`, `Guid[]`),
new Parameter(`VMName`, `Specifies an array of names of virtual machines. This cmdlet starts an interactive session with each of the specified 
virtual machines. To see the virtual machines that are available to you, use the Get-VM cmdlet.`, `String[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Closes one or more Windows PowerShell sessions (PSSessions).`,
        `Remove-PSSession [-ComputerName] <String[]> [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -ContainerId <String[]> [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Id] <Int32[]> [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -InstanceId <Guid[]> [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -Name <String[]> [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Session] <PSSession[]> [-Confirm] [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -VMId <Guid[]> [-WhatIf] [<CommonParameters>]

Remove-PSSession [-Confirm] -VMName <String[]> [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-PSSnapin`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Name`, `Specifies the names of Windows PowerShell snap-ins to remove from the current session. Wildcard characters (*) are 
permitted.`, `String[]`),
new Parameter(`PassThru`, `Returns an object that represents the snap-in. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Removes Windows PowerShell snap-ins from the current session.`,
        `Remove-PSSnapin [-Name] <String[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-TypeData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-Variable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WAPackCloudService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WAPackStaticIPAddressPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WAPackVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WAPackVMRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WAPackVMSubnet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WAPackVNet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebAppPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebConfigurationBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebConfigurationLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebConfigurationLock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebConfigurationProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebGlobalModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebHandler`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebManagedModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-Website`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WebVirtualDirectory`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WindowsCapability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WindowsDriver`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WindowsPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WmiObject`,
        [
            new Parameter(`AsJob`, `Indicates that this cmdlet run as a background job. Use this parameter to run commands that take a long time to finish.


New CIM cmdlets, introduced Windows PowerShell 3.0, perform the same tasks as the WMI cmdlets. The CIM cmdlets comply 
with WS-Management (WSMan) standards and with the Common Information Model (CIM) standard, which enables the cmdlets 
to use the same techniques to manage computers that run the Windows operating system and those running other operating 
systems. Instead of using Remove-WmiObject , consider using the 
Remove-CimInstancehttp://go.microsoft.com/fwlink/?LinkId=227964 cmdlet.


When you use the AsJob parameter, the command returns an object that represents the background job and then displays 
the command prompt. You can continue to work in the session while the job finishes. If Remove-WmiObject is used 
against a remote computer, the job is created on the local computer, and the results from remote computers are 
automatically returned to the local computer. To manage the job, use the cmdlets that contain the Job noun (the Job 
cmdlets). To get the job results, use the Receive-Job cmdlet.


To use this parameter for remote computers, the local and remote computers must be configured for remoting. Start 
Windows PowerShell by using the Run as administrator option. For more information, see about_Remote_Requirements.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
new Parameter(`Authentication`, `Specifies the authentication level to use for the WMI connection. The acceptable values for this parameter are:


- -1: Unchanged.


- 0: Default.


- 1: None.


No authentication in performed.  - 2: Connect. Authentication is performed only when the client establishes a 
relationship with the application.  - 3: Call. Authentication is performed only at the start of each call when the 
application receives the request.  - 4: Packet. Authentication is performed on all the data that is received from the 
client.  - 5: PacketIntegrity. All the data that is transferred between the client and the application is 
authenticated and verified.  - 6: PacketPrivacy. The properties of the other authentication levels are used, and all 
the data is encrypted.`, `AuthenticationLevel`),
new Parameter(`Authority`, `Specifies the authority to use to authenticate the WMI connection. You can specify standard NTLM or Kerberos 
authentication. To use NTLM, set the authority setting to ntlmdomain:<DomainName>, where <DomainName> identifies a 
valid NTLM domain name. To use Kerberos, specify kerberos:<DomainName>\<ServerName>. You cannot include the authority 
setting when you connect to the local computer.`, `String`),
new Parameter(`Class`, `Specifies the name of a WMI class that this cmdlet deletes.`, `String`),
new Parameter(`ComputerName`, `Specifies the name of the computer on which this cmdlet runs. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more computers. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your 
computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.`, `PSCredential`),
new Parameter(`EnableAllPrivileges`, `Indicates that this cmdlet enables all the permissions of the current user before the command it makes the WMI call.`, `SwitchParameter`),
new Parameter(`Impersonation`, `Specifies the impersonation level to use. The acceptable values for this parameter are:


- 0: Default. Reads the local registry for the default impersonation level, which is usually set to 3: Impersonate. - 
1: Anonymous. Hides the credentials of the caller.  - 2: Identify. Allows objects to query the credentials of the 
caller.  - 3: Impersonate. Allows objects to use the credentials of the caller.  - 4: Delegate. Allows objects to 
permit other objects to use the credentials of the caller.`, `ImpersonationLevel`),
new Parameter(`InputObject`, `Specifies a ManagementObject object to use as input. When this parameter is used, all other parameters are ignored.`, `ManagementObject`),
new Parameter(`Locale`, `Specifies the preferred locale for WMI objects. The Locale parameter is specified as an array in the MS_<LCID> format 
in the preferred order.`, `String`),
new Parameter(`Namespace`, `Specifies the WMI repository namespace where the referenced WMI class is located when it is used with the Class 
parameter.`, `String`),
new Parameter(`Path`, `Specifies the WMI object path of a WMI class, or specifies the WMI object path of an instance of a WMI class to delete.`, `String`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. This parameter is 
used together with the AsJob parameter. The throttle limit applies only to the current command, not to the session or 
to the computer.`, `Int32`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Deletes an instance of an existing Windows Management Instrumentation (WMI) class.`,
        `Remove-WmiObject [-Class] <String> [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | 
PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential 
<PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] 
[-Locale <String>] [-Namespace <String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy 
| Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] 
[-Namespace <String>] -Path <String> [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy 
| Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] 
[-Namespace <String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy 
| Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] 
[-Namespace <String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy 
| Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] 
[-Namespace <String>] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Remove-WmiObject [-AsJob] [-Confirm] -InputObject <ManagementObject> [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Remove-WSManInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-AzureRemoteAppTemplateImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-Computer`,
        [
            new Parameter(`ComputerName`, `Renames the specified remote computer. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Rename-Computer 
even if your computer is not configured to run remote commands.`, `String`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`DomainCredential`, `Specifies a user account that has permission to connect to the domain. Explicit credentials are required to rename a 
computer that is joined to a domain.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


To specify a user account that has permission to connect to the computer that is specified by the ComputerName 
parameter, use the LocalCredential parameter.`, `PSCredential`),
new Parameter(`Force`, `Forces the command to run without asking for user confirmation.`, `SwitchParameter`),
new Parameter(`LocalCredential`, `Specifies a user account that has permission to connect to the computer specified by the ComputerName parameter. The 
default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


To specify a user account that has permission to connect to the domain, use the DomainCredential parameter.`, `PSCredential`),
new Parameter(`NewName`, `Specifies a new name for the computer. This parameter is required. The name cannot include control characters, leading 
or trailing spaces, or any of the following characters: / \\ [ ].`, `String`),
new Parameter(`PassThru`, `Returns the results of the command. Otherwise, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`Protocol`, `Specifies which protocol to use to rename the computer. The acceptable values for this parameter are: WSMan and DCOM. 
The default value is DCOM.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`Restart`, `Indicates that this cmdlet restarts the computer that was renamed. A restart is often required to make the change 
effective.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
new Parameter(`WsmanAuthentication`, `Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the WSMan protocol. 
The acceptable values for this parameter are:


- Basic


- CredSSP


- Default


- Digest


- Kerberos


- Negotiate




The default value is Default.


For more information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235230 (http://go.microsoft.com/fwlink/?LinkID=235230) in the 
Microsoft Developer Network (MSDN) library.


Caution: Credential Security Service Provider (CredSSP) authentication, in which the user credentials are passed to a 
remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.

This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        ],
        `Renames a computer.`,
        `Rename-Computer [-NewName] <String> [-ComputerName <String>] [-Confirm] [-DomainCredential <PSCredential>] [-Force] 
[-LocalCredential <PSCredential>] [-PassThru] [-Protocol {DCOM | WSMan}] [-Restart] [-WhatIf] [-WsmanAuthentication 
{Default | Basic | Negotiate | CredSSP | Digest | Kerberos}] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-Item`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Force`, `Forces the cmdlet to rename items that cannot otherwise be changed, such as hidden or read-only files or read-only 
aliases or variables. The cmdlet cannot change constant aliases or variables. Implementation varies from provider to 
provider. For more information, see about_Providers.


Even using the Force parameter, the cmdlet cannot override security restrictions.`, `SwitchParameter`),
new Parameter(`LiteralPath`, `Specifies the path of the item to rename.


Unlike the Path parameter, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as 
wildcard characters. If the path includes escape characters, enclose it in single quotation marks. Single quotation 
marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
new Parameter(`NewName`, `Specifies the new name of the item. Enter only a name, not a path and name. If you enter a path that differs from the 
path that is specified in the Path parameter, Rename-Item generates an error. To rename and move an item, use 
Move-Item .


You cannot use wildcard characters in the value of the NewName parameter. To specify a name for multiple files, use 
the Replace operator in a regular expression. For more information about the Replace operator, see 
about_Comparison_Operators.`, `String`),
new Parameter(`PassThru`, `Returns an object that represents the item to the pipeline. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path of the item to rename.`, `String`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Renames an item in a Windows PowerShell provider namespace.`,
        `Rename-Item [-NewName] <String> [-Confirm] [-Credential <PSCredential>] [-Force] -LiteralPath <String> [-PassThru] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]

Rename-Item [-Path] <String> [-NewName] <String> [-Confirm] [-Credential <PSCredential>] [-Force] [-PassThru] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-ItemProperty`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies items that this cmdlet omits. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path 
parameter. The syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are 
more efficient than other parameters, because the provider applies them when it retrieves the objects instead of 
having Windows PowerShell filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the cmdlet to rename a property of an object that cannot otherwise be accessed by the user. Implementation 
varies from provider to provider. For more information, see about_Providers.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies only those items upon which the cmdlet acts, excluding all others.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path of the item property. This cmdlet uses the value of the LiteralPath cmdlet exactly as it is typed. No 
characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
new Parameter(`Name`, `Specifies the current name of the property to rename.`, `String`),
new Parameter(`NewName`, `Specifies the new name for the property.`, `String`),
new Parameter(`PassThru`, `Returns an object that represents the item property. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path of the item to rename.`, `String`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Renames a property of an item.`,
        `Rename-ItemProperty [-Name] <String> [-NewName] <String> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] 
[-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String> [-PassThru] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]

Rename-ItemProperty [-Path] <String> [-Name] <String> [-NewName] <String> [-Confirm] [-Credential <PSCredential>] 
[-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-LocalGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-LocalUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Rename-WebConfigurationLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Repair-AppvClientConnectionGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Repair-AppvClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Repair-UevTemplateIndex`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Repair-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureBatchComputeNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureLocalNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureRemoteAppVpnSharedKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureRmPowerBIWorkspaceCollectionAccessKeys`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureRmRedisCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureRmServerManagementGatewayProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureRmVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureRmVirtualNetworkGatewayConnectionSharedKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureRmWebAppPublishingProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureRmWebAppSlotPublishingProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureRoleInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureVirtualNetworkGatewayConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureVirtualNetworkGatewayKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-AzureVNetGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-ComputerMachinePassword`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
new Parameter(`Server`, `Specifies the name of a domain controller to use when this cmdlet sets the computer account password.


This parameter is optional. If you omit this parameter, a domain controller is chosen to service the command.`, `String`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Resets the machine account password for the computer.`,
        `Reset-ComputerMachinePassword [-Confirm] [-Credential <PSCredential>] [-Server <String>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Reset-IISServerManager`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resize-AzureRmVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resize-AzureVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resize-AzureVNetGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resolve-AzureRmError`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resolve-DnsName`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resolve-Path`,
        [
            new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`LiteralPath`, `Specifies the path to be resolved. The value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Path`, `Specifies the Windows PowerShell path to resolve. This parameter is required. You can also pipe a path string to 
Resolve-Path .`, `String[]`),
new Parameter(`Relative`, `Indicates that this cmdlet returns a relative path.`, `SwitchParameter`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Resolves the wildcard characters in a path, and displays the path contents.`,
        `Resolve-Path [-Credential <PSCredential>] -LiteralPath <String[]> [-Relative] [-UseTransaction] [<CommonParameters>]

Resolve-Path [-Path] <String[]> [-Credential <PSCredential>] [-Relative] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureBatchComputeNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureRemoteAppVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureRmSiteRecoveryJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureRmVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureRmVmss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureRmWebApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureRmWebAppSlot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureSiteRecoveryJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-AzureWebsite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-Computer`,
        [
            new Parameter(`AsJob`, `Indicates that this cmdlet runs as a background job.


To use this parameter, the local and remote computers must be configured for remoting and, on Windows Vista and later 
versions of the Windows operating system, you must open Windows PowerShell by using the Run as administrator option. 
For more information, see about_Remote_Requirements (http://go.microsoft.com/fwlink/?LinkID=135187).


When you specify the AsJob parameter, the command immediately returns an object that represents the background job. 
You can continue to work in the session while the job finishes. The job is created on the local computer and the 
results from remote computers are automatically returned to the local computer. To manage the job, use the Job 
cmdlets. To get the job results, use the Receive-Job cmdlet.


For more information about Windows PowerShell background jobs, see about_Jobs 
(http://go.microsoft.com/fwlink/?LinkID=113251) and about_Remote_Jobs (http://go.microsoft.com/fwlink/?LinkID=135184).`, `SwitchParameter`),
new Parameter(`ComputerName`, `Specifies one or more computers. The default is the local computer.


Type the NETBIOS name, an IP address, or a fully qualified domain name of a remote computer. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your 
computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet.`, `PSCredential`),
new Parameter(`DcomAuthentication`, `Specifies the authentication level that is used for the WMI connection. The acceptable values for this parameter are:


- Call. Call-level COM authentication  - Connect. Connect-level COM authentication - Default. Windows Authentication - 
None. No COM authentication - Packet. Packet-level COM authentication  - PacketIntegrity. Packet Integrity-level COM 
authentication - PacketPrivacy. Packet Privacy-level COM authentication  - Unchanged. The authentication level is the 
same as the previous command


The default value is Packet.


For more information about the values of this parameter, see AuthenticationLevel 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235229 (http://go.microsoft.com/fwlink/?LinkID=235229) in the 
Microsoft Developer Network (MSDN) library.


This parameter was introduced in Windows PowerShell 3.0.`, `AuthenticationLevel`),
new Parameter(`Delay`, `Determines how often, in seconds, Windows PowerShell queries the service that is specified by the For parameter to 
determine whether it is available after the computer is restarted. Specify a delay between queries, in seconds. The 
default value is 5 seconds.


This parameter is valid only together with the Wait and For parameters.


This parameter was introduced in Windows PowerShell 3.0.`, `Int16`),
new Parameter(`For`, `Specifies the behavior of Windows PowerShell as it waits for the specified service or feature to become available 
after the computer restarts. This parameter is valid only with the Wait parameter.


The acceptable values for this parameter are:


- Default. Waits for Windows PowerShell to restart.  - PowerShell. Can run commands in a Windows PowerShell remote 
session on the computer.  - WMI. Receives a reply to a Win32_ComputerSystem query for the computer.  - WinRM. Can 
establish a remote session to the computer by using WS-Management.


This parameter was introduced in Windows PowerShell 3.0.`, `WaitForServiceTypes`),
new Parameter(`Force`, `Forces an immediate restart of the computers.`, `SwitchParameter`),
new Parameter(`Impersonation`, `Specifies the impersonation level that this cmdlet uses to call WMI. Restart-Computer uses WMI. The acceptable values 
for this parameter are:


-- Default. Default impersonation.  - Anonymous. Hides the identity of the caller.  - Identify. Allows objects to 
query the credentials of the caller.  - Impersonate. Allows objects to use the credentials of the caller.


The default value is Impersonate.`, `ImpersonationLevel`),
new Parameter(`Protocol`, `Specifies which protocol to use to restart the computers. The acceptable values for this parameter are: WSMan and 
DCOM. The default value is DCOM.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this 
parameter or enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
new Parameter(`Timeout`, `Specifies the duration of the wait, in seconds. When the time-out elapses, Restart-Computer returns the command 
prompt, even if the computers are not restarted. The default value, -1, represents an indefinite time-out.


The Timeout parameter is valid only with the Wait parameter.


This parameter was introduced in Windows PowerShell 3.0.`, `Int32`),
new Parameter(`Wait`, `Indicates that this cmdlet suppresses the Windows PowerShell prompt and blocks the pipeline until all of the computers 
have restarted. You can use this parameter in a script to restart computers and then continue to process when the 
restart is finished.


By default, Wait waits indefinitely for the computers to restart, but you can use Timeout to adjust the timing and the 
For and Delay parameters to wait for particular services to be available on the restarted computers.


The Wait parameter is not valid when you are restarting the local computer. If the value of the ComputerName parameter 
contains the names of remote computers and the local computer, Restart-Computer generates a non-terminating error for 
Wait on the local computer, but it waits for the remote computers to restart.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
new Parameter(`WsmanAuthentication`, `Specifies the mechanism that is used to authenticate the user credentials when you use the WSMan protocol.


The acceptable values for this parameter are: Basic, CredSSP, Default, Digest, Kerberos, and Negotiate. The default 
value is Default. For more information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235230 (http://go.microsoft.com/fwlink/?LinkID=235230) in the MSDN 
library.


Caution: Credential Security Service Provider (CredSSP) authentication, in which the user credentials are passed to a 
remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        ],
        `Restarts ("reboots") the operating system on local and remote computers.`,
        `Restart-Computer [[-ComputerName] <String[]>] [[-Credential] <PSCredential>] [-AsJob] [-Confirm] [-DcomAuthentication 
{Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Force] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Restart-Computer [[-ComputerName] <String[]>] [[-Credential] <PSCredential>] [-Confirm] [-DcomAuthentication {Default 
| None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Delay <Int16>] [-For {Wmi | WinRM | 
PowerShell}] [-Force] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Protocol {DCOM | 
WSMan}] [-Timeout <Int32>] [-Wait] [-WhatIf] [-WsmanAuthentication {Default | Basic | Negotiate | CredSSP | Digest | 
Kerberos}] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-Service`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`DisplayName`, `Specifies the display names of services to restarted. Wildcard carachters are permitted.`, `String[]`),
new Parameter(`Exclude`, `Specifies services that this cmdlet omits. The value of this parameter qualifies the Name parameter. Enter a name 
element or pattern, such as s*. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Force`, `Restarts a service that has dependent services.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies services that this cmdlet restarts. The value of this parameter qualifies the Name parameter. Enter a name 
element or pattern, such as s*. Wildcard characters are permitted.`, `String[]`),
new Parameter(`InputObject`, `Specifies ServiceController objects that represent the services to restart. Enter a variable that contains the 
objects, or type a command or expression that gets the objects.`, `ServiceController[]`),
new Parameter(`Name`, `Specifies the service names of the services to restart.`, `String[]`),
new Parameter(`PassThru`, `Returns an object that represents the service. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Stops and then starts one or more services.`,
        `Restart-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Force] [-Include <String[]>] [-PassThru] 
[-WhatIf] [<CommonParameters>]

Restart-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] 
[-PassThru] [-WhatIf] [<CommonParameters>]

Restart-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] [-PassThru] 
[-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-WAPackVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-WebAppPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restart-WebItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-AzureKeyVaultKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-AzureKeyVaultSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-AzureRmApiManagement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-AzureRmBackupItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-AzureRmRecoveryServicesBackupItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-AzureRmSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-AzureRmWebAppBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-AzureWebsiteDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-Computer`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`RestorePoint`, `Specifies the sequence number of the restore point.  To find the sequence number, use the Get-ComputerRestorePoint 
cmdlet. This parameter is required.`, `Int32`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Starts a system restore on the local computer.`,
        `Restore-Computer [-RestorePoint] <Int32> [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-UevBackup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-UevUserSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Restore-WebConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-AzureAutomationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-AzureRmAnalysisServicesServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-AzureRmAutomationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-AzureRmDataFactoryPipeline`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-AzureRmSiteRecoveryJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-AzureRmSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-AzureSiteRecoveryJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-BitsTransfer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-Job`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet resumes jobs that satisfy all of the conditions in the hash table. 
Enter a hash table where the keys are job properties and the values are job property values.`, `Hashtable`),
new Parameter(`Id`, `Specifies an array of IDs for jobs that this cmdlet resumes.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and to type 
than the instance ID, but it is unique only in the current session. You can type one or more IDs, separated by commas. 
To find the ID of a job, run Get-Job .`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies an array of instance IDs of jobs that this cmdlet resumes. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, run 
Get-Job .`, `Guid[]`),
new Parameter(`Job`, `Specifies the jobs to be resumed. Enter a variable that contains the jobs or a command that gets the jobs. You can 
also pipe jobs to the Resume-Job cmdlet.`, `Job[]`),
new Parameter(`Name`, `Specifies an array of friendly names of jobs that this cmdlet resumes. Enter one or more job names. Wildcard 
characters are permitted.`, `String[]`),
new Parameter(`State`, `Specifies the state of jobs to resume. The acceptable values for this parameter are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




This cmdlet resumes only jobs in the Suspended state.

For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx) in the 
Microsoft Developer Network (MSDN) library.`, `JobState`),
new Parameter(`Wait`, `Indicates that this cmdlet suppresses the command prompt until all job results are restarted. By default, this cmdlet 
immediately returns the available results.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Restarts a suspended job.`,
        `Resume-Job [-Filter] <Hashtable> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-Id] <Int32[]> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-InstanceId] <Guid[]> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-Job] <Job[]> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-Name] <String[]> [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]

Resume-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | 
Suspending | Stopping | AtBreakpoint} [-Confirm] [-Wait] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-ProvisioningSession`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-Service`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`DisplayName`, `Specifies the display names of the services to be resumed. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Exclude`, `Specifies services that this cmdlet omits. The value of this parameter qualifies the Name parameter. Enter a name 
element or pattern, such as s*. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Include`, `Specifies services to resume. The value of this parameter qualifies Name parameter. Enter a name element or pattern, 
such as s*. Wildcard characters are permitted.`, `String[]`),
new Parameter(`InputObject`, `Specifies ServiceController objects that represent the services to resumed. Enter a variable that contains the 
objects, or type a command or expression that gets the objects.`, `ServiceController[]`),
new Parameter(`Name`, `Specifies the service names of the services to be resumed.`, `String[]`),
new Parameter(`PassThru`, `Returns an object that represents the service. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Resumes one or more suspended (paused) services.`,
        `Resume-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Resume-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] 
[-WhatIf] [<CommonParameters>]

Resume-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Resume-WAPackVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Revoke-AzureHDInsightRdpAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Revoke-AzureRmDiskAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Revoke-AzureRmHDInsightHttpServicesAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Revoke-AzureRmHDInsightRdpServicesAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Revoke-AzureRmSnapshotAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureRmApiManagementTenantGitConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureRmContext`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureRmDataFactoryLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureRmResourceGroupDeploymentTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureRmServerManagementGatewayProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureRmVhd`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureRmVMImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureServiceProjectPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureVhd`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureVMImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-AzureWebsiteLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-Help`,
        [
            new Parameter(`Credential`, `Specifies a user credential. This cmdlet runs the command by using credentials of a user who has permission to access 
the file system location specified by the DestinationPath parameter. This parameter is valid only when the 
DestinationPath or LiteralPath parameter is used in the command.


This parameter enables you to run Save-Help commands that use the DestinationPath parameter on remote computers. By 
providing explicit credentials, you can run the command on a remote computer and access a file share on a third 
computer without encountering an access denied error or using CredSSP authentication to delegate credentials.`, `PSCredential`),
new Parameter(`DestinationPath`, `Specifies the path of the folder in which the help files are saved. Do not specify a file name or file name extension.`, `String[]`),
new Parameter(`Force`, `Indicates that this cmdlet does not follow the once-per-day limitation, skips version checking, and downloads files 
that exceed the 1 GB limit.


Without this parameter, only one Save-Help command for each module is permitted in each 24-hour period, downloads are 
limited to 1 GB of uncompressed content per module, and help files for a module are installed only when they are newer 
than the files on the computer.


The once-per-day limit protects the servers that host the help files, and makes it practical for you to add a 
Save-Help command to your Windows PowerShell profile.


To save help for a module in multiple UI cultures without the Force parameter, include all UI cultures in the same 
command, such as: "Save-Help -Module PSScheduledJobs -UICulture en-US, fr-FR, pt-BR"`, `SwitchParameter`),
new Parameter(`FullyQualifiedModule`, `Specifies modules with names that are specified in the form of ModuleSpecification objects. This is described in the 
Remarks section of Module Specification Constructor 
(Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx 
(http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx) on the Microsoft Developer Network (MSDN). 
For example, the FullyQualifiedModule parameter accepts a module name that is specified in the format @{ModuleName = 
"modulename"; ModuleVersion = "version_number"} or @{ModuleName = "modulename"; ModuleVersion = "version_number"; Guid 
= "GUID"}. ModuleName and ModuleVersion are required, but Guid is optional.


You cannot specify the FullyQualifiedModule parameter in the same command as a Module parameter.`, `ModuleSpecification[]`),
new Parameter(`LiteralPath`, `Specifies a path of the destination folder. Unlike the value of the DestinationPath parameter, the value of the 
LiteralPath parameter is used exactly as it is typed. No characters are interpreted as wildcard characters. If the 
path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell 
not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Module`, `Specifies modules for which this cmdlet downloads help. Enter one or more module names or name patters in a 
comma-separated list or in a file that has one module name on each line. Wildcard characters are permitted. You can 
also pipe module objects from the Get-Module cmdlet to Save-Help .


By default, Save-Help downloads help for all modules that support Updatable Help and are installed on the local 
computer in a location listed in the PSModulePath environment variable.


To save help for modules that are not installed on the computer, run a Get-Module command on a remote computer. Then 
pipe the resulting module objects to the Save-Help cmdlet or submit the module objects as the value of the Module or 
InputObject parameters.


If the module that you specify is installed on the computer, you can enter the module name or a module object. If the 
module is not installed on the computer, you must enter a module object, such as one returned by the Get-Module cmdlet.


The Module parameter of the Save-Help cmdlet does not accept the full path of a module file or module manifest file. 
To save help for a module that is not in a PSModulePath location, import the module into the current session before 
you run the Save-Help command.


A value of "*" (all) attempts to update help for all modules that are installed on the computer. This includes modules 
that do not support Updatable Help. This value might generate errors when the command encounters modules that do not 
support Updatable Help.`, `PSModuleInfo[]`),
new Parameter(`UICulture`, `Specifies UI culture values for which this cmdlet gets updated help files. Enter one or more language codes, such as 
es-ES, a variable that contains culture objects, or a command that gets culture objects, such as a Get-Culture or 
Get-UICulture command.


Wildcard characters are not permitted. Do not specify a partial language code, such as "de".


By default, Save-Help gets help files in the UI culture set for Windows or its fallback culture. If you specify the 
UICulture parameter, Save-Help looks for help only for the specified UI culture, not in any fallback culture.`, `CultureInfo[]`),
new Parameter(`UseDefaultCredentials`, `Indicates that this cmdlet runs the command, including the web download, with the credentials of the current user. By 
default, the command runs without explicit credentials.


This parameter is effective only when the web download uses NTLM, negotiate, or Kerberos-based authentication.`, `SwitchParameter`),
        ],
        `Downloads and saves the newest help files to a file system directory.`,
        `Save-Help [-DestinationPath] <String[]> [[-Module] <PSModuleInfo[]>] [[-UICulture] <CultureInfo[]>] [-Credential 
<PSCredential>] [-Force] [-FullyQualifiedModule <ModuleSpecification[]>] [-UseDefaultCredentials] [<CommonParameters>]

Save-Help [[-Module] <PSModuleInfo[]>] [[-UICulture] <CultureInfo[]>] [-Credential <PSCredential>] [-Force] 
[-FullyQualifiedModule <ModuleSpecification[]>] -LiteralPath <String[]> [-UseDefaultCredentials] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-Package`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Save-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Select-AzureProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Select-AzureStorSimpleResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Select-AzureSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Select-Object`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Select-String`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Select-WebConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Select-Xml`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Send-AppvClientReport`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Send-AzureRemoteAppSessionMessage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Send-DtcDiagnosticTransaction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Send-Feedback`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Send-MailMessage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Acl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Alias`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AppBackgroundTaskResourcePolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AppLockerPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AppvClientConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AppvClientMode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AppvClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AppvPublishingServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AppxDefaultVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AppXProvisionedDataFile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AuthenticodeSignature`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAclConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAffinityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureApplicationGatewayConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAutomationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAutomationConnectionFieldValue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAutomationCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAutomationModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAutomationRunbookDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAutomationSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAutomationVariable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureAvailabilitySet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureBatchComputeNodeUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureBatchJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureBatchJobSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureBatchPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureBatchPoolOSVersion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureBatchTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureDns`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureEnvironment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureHDInsightClusterSize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureInternalLoadBalancer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureIPForwarding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureKeyVaultCertificateAttribute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureKeyVaultCertificateIssuer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureKeyVaultCertificatePolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureKeyVaultKeyAttribute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureKeyVaultManagedStorageSasDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureKeyVaultSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureKeyVaultSecretAttribute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureLoadBalancedEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureNetworkInterfaceConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureNetworkSecurityGroupAssociation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureNetworkSecurityGroupConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureNetworkSecurityGroupToSubnet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureNetworkSecurityRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureOSDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzurePublicIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRemoteAppCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRemoteAppVNet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRemoteAppWorkspace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureReservedIPAssociation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmADApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmADServicePrincipal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmADUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAnalysisServicesServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementApi`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementAuthorizationServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementBackend`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementHostnames`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementIdentityProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementLogger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementOpenIdConnectProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementProduct`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementTenantAccess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApiManagementUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayAuthenticationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayBackendAddressPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayBackendHttpSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayConnectionDraining`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayFrontendIPConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayFrontendPort`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayHttpListener`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayIPConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayRequestRoutingRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewaySku`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewaySslCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewaySslPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayUrlPathMapConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmApplicationGatewayWebApplicationFirewallConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAppServicePlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationConnectionFieldValue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationDscNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationVariable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmAutomationWebhook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmBackupProtectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmBackupVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmBatchAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmBatchApplication`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmCdnEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmCdnOrigin`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmCdnProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmCognitiveServicesAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmContext`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmCurrentStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataFactoryGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataFactoryPipelineActivePeriod`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataFactorySliceStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeAnalyticsAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeAnalyticsCatalogCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeAnalyticsCatalogSecret`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeAnalyticsDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeAnalyticsFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeStoreAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeStoreFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeStoreItemAcl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeStoreItemAclEntry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeStoreItemExpiry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeStoreItemOwner`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeStoreItemPermission`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDataLakeStoreTrustedIdProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDiagnosticSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDiskDiskEncryptionKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDiskImageReference`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDiskKeyEncryptionKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDiskUpdateDiskEncryptionKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDiskUpdateImageReference`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDiskUpdateKeyEncryptionKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDnsRecordSet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDnsZone`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDtlAllowedVMSizesPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDtlAutoShutdownPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDtlAutoStartPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDtlVMsPerLabPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmDtlVMsPerUserPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmEnvironment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmEventHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmEventHubAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmEventHubConsumerGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmEventHubNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmEventHubNamespaceAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmExpressRouteCircuit`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmExpressRouteCircuitPeeringConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmHDInsightClusterSize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmHDInsightDefaultStorage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmHDInsightPersistedScriptAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmImageOsDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmIntegrationAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmIntegrationAccountAgreement`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmIntegrationAccountCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmIntegrationAccountGeneratedIcn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmIntegrationAccountMap`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmIntegrationAccountPartner`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmIntegrationAccountReceivedIcn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmIntegrationAccountSchema`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmIotHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmKeyVaultAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmLoadBalancer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmLoadBalancerFrontendIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmLoadBalancerInboundNatPoolConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmLoadBalancerInboundNatRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmLoadBalancerProbeConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmLoadBalancerRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmLocalNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmLogicApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmMediaService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmMediaServiceKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmNetworkInterface`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmNetworkInterfaceIpConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmNetworkSecurityGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmNetworkSecurityRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmNetworkWatcherConfigFlowLog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmNotificationHub`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmNotificationHubAuthorizationRules`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmNotificationHubsNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmNotificationHubsNamespaceAuthorizationRules`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmOperationalInsightsDataSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmOperationalInsightsIntelligencePack`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmOperationalInsightsSavedSearch`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmOperationalInsightsStorageInsight`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmOperationalInsightsWorkspace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmPolicyAssignment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmPolicyDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmPublicIpAddress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRecoveryServicesBackupProperties`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRecoveryServicesBackupProtectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRecoveryServicesVaultContext`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRedisCache`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRedisCacheDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRelayAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRelayHybridConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRelayNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmResource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmResourceGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmResourceLock`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRoleDefinition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRouteConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRouteFilter`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRouteFilterRuleConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSchedulerHttpJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSchedulerServiceBusQueueJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSchedulerServiceBusTopicJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSchedulerStorageQueueJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmServiceBusNamespace`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmServiceBusNamespaceAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmServiceBusQueue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmServiceBusQueueAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmServiceBusSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmServiceBusTopic`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmServiceBusTopicAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmServiceFabricSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmServiceFabricUpgradeType`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSiteRecoveryProtectionEntity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSiteRecoveryReplicationProtectedItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSiteRecoveryVaultSettings`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSiteRecoveryVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSnapshotDiskEncryptionKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSnapshotImageReference`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSnapshotKeyEncryptionKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSnapshotUpdateDiskEncryptionKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSnapshotUpdateImageReference`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSnapshotUpdateKeyEncryptionKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseAdvisorAutoExecuteStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseAuditingPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseBackupLongTermRetentionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseDataMaskingPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseDataMaskingRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseFailoverGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseGeoBackupPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseRecommendedActionState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseSecondary`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseThreatDetectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlDatabaseTransparentDataEncryption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlElasticPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlElasticPoolAdvisorAutoExecuteStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlElasticPoolRecommendedActionState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServerActiveDirectoryAdministrator`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServerAdvisorAutoExecuteStatus`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServerAuditingPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServerBackupLongTermRetentionVault`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServerDisasterRecoveryConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServerFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServerRecommendedActionState`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServerThreatDetectionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmSqlServerTransparentDataEncryptionProtector`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmTrafficManagerEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVirtualNetwork`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVirtualNetworkGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVirtualNetworkGatewayConnection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVirtualNetworkGatewayConnectionSharedKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVirtualNetworkGatewayDefaultSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVirtualNetworkGatewayVpnClientConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVirtualNetworkPeering`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVirtualNetworkSubnetConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMAccessExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMADDomainExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMAEMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMBackupExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMBginfoExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMBootDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMChefExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMCustomScriptExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMDataDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMDiskEncryptionExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMDscExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMOperatingSystem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMOSDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMSourceImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVMSqlServerExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVmss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVmssOsProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVmssStorageProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmVmssVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmWcfRelay`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmWebApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmWebAppSlot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRmWebAppSlotConfigName`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureRoute`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSBAuthorizationRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSchedulerHttpJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSchedulerJobCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSchedulerStorageQueueJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureServiceADDomainExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureServiceAntimalwareExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureServiceDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureServiceExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureServiceProject`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureServiceProjectRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureServiceRemoteDesktopExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSiteRecoveryProtectionEntity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSiteRecoveryVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSqlDatabaseServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSqlDatabaseServerFirewallRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStaticVNetIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageBlobContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageContainerAcl`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageContainerStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageCORSRule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageFileContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageQueueStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageServiceLoggingProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageServiceMetricsProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageShareQuota`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageShareStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorageTableStoredAccessPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStoreAddOn`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorSimpleAccessControlRecord`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorSimpleDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorSimpleDeviceBackupPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorSimpleDeviceVolume`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorSimpleStorageAccountCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureStorSimpleVirtualDevice`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSubnet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSubnetRouteTable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureSubscription`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureTrafficManagerEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureTrafficManagerProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVirtualNetworkGatewayIPsecParameters`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVirtualNetworkGatewayKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMAccessExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMBGInfoExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMBootDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMChefExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMCustomScriptExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMDiagnosticsExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMDscExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMImageDataDiskConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMImageOSDiskConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMMicrosoftAntimalwareExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMPuppetExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMSize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVMSqlServerExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVNetConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVNetGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVNetGatewayDefaultSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVNetGatewayIPsecParameters`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureVNetGatewayKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureWalkUpgradeDomain`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-AzureWebsite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-BitsTransfer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-CertificateAutoEnrollmentPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-CimInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-CIPolicyIdInfo`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-CIPolicySetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-CIPolicyVersion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Clipboard`,
        [
            new Parameter(`Append`, `Indicates that the cmdlet does not clear the clipboard and appends content to it.`, `SwitchParameter`),
new Parameter(`AsHtml`, `Indicates that the cmdlet renders the content as HTML to the clipboard.`, `SwitchParameter`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`LiteralPath`, `Specifies the path to the item that is copied to the clipboard. Unlike Path , the value of LiteralPath is used exactly 
as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in 
single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape 
sequences.`, `String[]`),
new Parameter(`Path`, `Specifies the path to the item that is copied to the clipboard. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Value`, `Specifies, as a string array, the content to copy to the clipboard.`, `String[]`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Sets the current Windows clipboard entry.`,
        `Set-Clipboard [-Append] [-AsHtml] [-Confirm] -LiteralPath <String[]> [-WhatIf] [<CommonParameters>]

Set-Clipboard [-Append] [-AsHtml] [-Confirm] -Path <String[]> [-WhatIf] [<CommonParameters>]

Set-Clipboard [-Value] <String[]> [-Append] [-AsHtml] [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Content`,
        [
            new Parameter(`Encoding`, `Specifies the file encoding. The default is ASCII.

Valid values are:

-- ASCII:  Uses the encoding for the ASCII (7-bit) character set.
-- BigEndianUnicode:  Encodes in UTF-16 format using the big-endian byte order.
-- Byte:   Encodes a set of characters into a sequence of bytes.
-- String:  Uses the encoding type for a string.
-- Unicode:  Encodes in UTF-16 format using the little-endian byte order.
-- UTF7:   Encodes in UTF-7 format.
-- UTF8:  Encodes in UTF-8 format.
-- Unknown:  The encoding type is unknown or invalid. The data can be treated as binary.

Encoding is a dynamic parameter that the FileSystem provider adds to the Set-Content cmdlet. This parameter works only 
in file system drives.`, `FileSystemCmdletProviderEncoding`),
new Parameter(`Force`, `Replaces the contents of a file, even if the file is read-only. Without this parameter, read-only files are not 
changed.`, `SwitchParameter`),
new Parameter(`Stream`, `Creates or replaces the content in the specified alternate data stream. If the stream does not yet exist, Set-Content 
creates it. Enter the stream name. Wildcards are not supported.

Stream is a dynamic parameter that the FileSystem provider adds to the Set-Content cmdlet. This parameter works only 
in file system drives.

You can use the Set-Content cmdlet to change the content of the Zone.Identifier alternate data stream. However, it is 
not the recommended way to eliminate security checks that block files that are downloaded from the Internet. If you 
verify that a downloaded file is safe, use the Unblock-File cmdlet.

This parameter is introduced in Windows PowerShell 3.0.`, `string`),
new Parameter(`Confirm`, `Prompts you for confirmation before executing the command.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Describes what would happen if you executed the command without actually executing the command.`, `SwitchParameter`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see about_Transactions.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, you will be prompted for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element 
or pattern, such as *.txt. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path 
parameter. The syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are 
more efficient than other parameters, because the provider applies them when it is retrieving the objects, instead of 
having Windows PowerShell filter the objects after they are retrieved.`, `String`),
new Parameter(`Include`, `Specifies items that this cmdlet changes. The value of this parameter qualifies the Path parameter. Enter a path 
element or pattern, such as *.txt. Wildcard characters are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies the path of the item that receives the content. Unlike Path , the value of the LiteralPath parameter is used 
exactly as it is typed. No characters are interpreted as wildcard characters. If the path includes escape characters, 
enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters 
as escape sequences.`, `String[]`),
new Parameter(`NoNewline`, `Indicates that this cmdlet uses the no newline setting.`, `SwitchParameter`),
new Parameter(`PassThru`, `Returns an object that represents the content. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path of the item that receives the content. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Value`, `Specifies the new content for the item.`, `Object[]`),
        ],
        `Replaces the contents of a file with contents that you specify.`,
        `Set-Content [-Value] <Object[]> [-Confirm] [-Credential <PSCredential>] [-Encoding {Unknown | String | Unicode | Byte 
| BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-NoNewline] [-PassThru] [-Stream <String>] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]

Set-Content [-Path] <String[]> [-Value] <Object[]> [-Confirm] [-Credential <PSCredential>] [-Encoding {Unknown | 
String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | Oem | BigEndianUTF32}] [-Exclude 
<String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-NoNewline] [-PassThru] [-Stream <String>] 
[-UseTransaction] [-WhatIf] [<CommonParameters>]

Set-Content [-Encoding {Unknown | String | Unicode | Byte | BigEndianUnicode | UTF8 | UTF7 | UTF32 | Ascii | Default | 
Oem}] [-Force] [-Stream <string>] [-Confirm] [-WhatIf] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Culture`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Date`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DODownloadMode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DOPercentageMaxBackgroundBandwidth`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DOPercentageMaxForegroundBandwidth`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-DscLocalConfigurationManager`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-ExecutionPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-HVCIOptions`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-IISCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-IISCentralCertProviderCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-IISConfigAttributeValue`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Item`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts for a password.


This parameter is not supported by any providers installed with parameter is not supported by any providers installed 
with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element 
or pattern, such as *.txt. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path 
parameter. The syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are 
more efficient than other parameters, because the provider applies them when it retrieves the objects, instead of 
having Windows PowerShell filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the cmdlet to set items that cannot otherwise be changed, such as read-only alias or variables. The cmdlet 
cannot change constant aliases or variables. Implementation varies from provider to provider. For more information, 
see about_Providers. Even using the Force parameter, the cmdlet cannot override security restrictions.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies items that this cmdlet changes. The value of this parameter qualifies the Path parameter. Enter a path 
element or pattern, such as *.txt. Wildcard characters are permitted.`, `String[]`),
new Parameter(`LiteralPath`, `Specifies a path of the location of the new items. Unlike Path , the value of LiteralPath is used exactly as it is 
typed. No characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in 
single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape 
sequences.`, `String[]`),
new Parameter(`PassThru`, `Passes an object that represents the item to the pipeline. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies a path of the location of the new items. Wildcard characters are permitted.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`Value`, `Specifies a new value for the item.`, `Object`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Changes the value of an item to the value specified in the command.`,
        `Set-Item [[-Value] <Object>] [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] 
[-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Set-Item [-Path] <String[]> [[-Value] <Object>] [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter 
<String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-ItemProperty`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with parameter is not supported by any providers installed 
with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies those items upon which the cmdlet does not act, and includes all others.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path 
parameter. The syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are 
more efficient than other parameters, because the provider applies them when it retrieves the objects instead of 
having Windows PowerShell filter the objects after they are retrieved.`, `String`),
new Parameter(`Force`, `Forces the cmdlet to set a property on items that cannot otherwise be accessed by the user. Implementation varies from 
provider to provider. For more information, see about_Providers.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies only those items upon which the cmdlet acts, which excludes all others.`, `String[]`),
new Parameter(`InputObject`, `Specifies the object that has the properties that this cmdlet changes. Enter a variable that contains the object or a 
command that gets the object.`, `PSObject`),
new Parameter(`LiteralPath`, `Specifies a path of the item property. The value of LiteralPath is used exactly as it is typed. No characters are 
interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Name`, `Specifies the name of the property.`, `String`),
new Parameter(`PassThru`, `Returns an object that represents the item property. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the path of the items with the property to modify.`, `String[]`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
new Parameter(`Value`, `Specifies the value of the property.`, `Object`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Creates or changes the value of a property of an item.`,
        `Set-ItemProperty [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] 
[-Force] [-Include <String[]>] -InputObject <PSObject> [-PassThru] [-UseTransaction] [-WhatIf] [<CommonParameters>]

Set-ItemProperty [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Force] [-Include 
<String[]>] -InputObject <PSObject> -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]

Set-ItemProperty [-Name] <String> [-Value] <Object> [-Confirm] [-Credential <PSCredential>] [-Exclude <String[]>] 
[-Filter <String>] [-Force] [-Include <String[]>] -LiteralPath <String[]> [-PassThru] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]

Set-ItemProperty [-Path] <String[]> [-Name] <String> [-Value] <Object> [-Confirm] [-Credential <PSCredential>] 
[-Exclude <String[]>] [-Filter <String>] [-Force] [-Include <String[]>] [-PassThru] [-UseTransaction] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-JobTrigger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-KdsConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-LocalGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-LocalUser`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Location`,
        [
            new Parameter(`LiteralPath`, `Specifies a path of the location. The value of the LiteralPath parameter is used exactly as it is typed. No characters 
are interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
new Parameter(`PassThru`, `Returns a System.Management.Automation.PathInfo object that represents the location. By default, this cmdlet does not 
generate any output.`, `SwitchParameter`),
new Parameter(`Path`, `Specify the path of a new working location.`, `String`),
new Parameter(`StackName`, `Specifies the location stack name that this cmdlet makes the current location stack. Enter a location stack name. To 
indicate the unnamed default location stack, type $Null" or an empty string ("").


The Location cmdlets act on the current stack unless you use the StackName parameter to specify a different stack.`, `String`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Sets the current working location to a specified location.`,
        `Set-Location -LiteralPath <String> [-PassThru] [-UseTransaction] [<CommonParameters>]

Set-Location [[-Path] <String>] [-PassThru] [-UseTransaction] [<CommonParameters>]

Set-Location [-PassThru] [-StackName <String>] [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PackageSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-ProcessMitigation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PSBreakpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PSDebug`,
        [
            new Parameter(`Off`, `Indicates that this cmdlet turns off all script debugging features.


A "Set-StrictMode -Off" command disables the verification set by a "Set-PSDebug -Strict" command. For more 
information, see Set-StrictMode.`, `SwitchParameter`),
new Parameter(`Step`, `Indicates that this cmdlet turns on script stepping. Before each line runs, Windows PowerShell prompts you to stop, 
continue, or enter a new interpreter level to inspect the state of the script.


Specifying the Step parameter automatically sets a trace level of 1.`, `SwitchParameter`),
new Parameter(`Strict`, `Indicates that Windows PowerShell returns an exception if a variable is referenced before a value is assigned to the 
variable.


A "Set-StrictMode -Off" command disables the verification set by a "Set-PSDebug -Strict" command. For more 
information, see Set-StrictMode .`, `SwitchParameter`),
new Parameter(`Trace`, `Specifies the trace level. The acceptable values for this parameter are:


- 1: Trace script lines as they run.


- 0: Turn script tracing off.


- 2: Trace script lines, variable assignments, function calls, and scripts.`, `Int32`),
        ],
        `Turns script debugging features on and off, sets the trace level, and toggles strict mode.`,
        `Set-PSDebug [-Off] [<CommonParameters>]

Set-PSDebug [-Step] [-Strict] [-Trace <Int32>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PSReadlineKeyHandler`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PSReadlineOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-PSSessionConfiguration`,
        [
            new Parameter(`AccessMode`, `Enables and disables the session configuration and determines whether it can be used for remote or local sessions on 
the computer. The acceptable values for this parameter are:


- Disabled. Disables the session configuration. It cannot be used for remote or local access to the computer. This 
value sets the Enabled property of the session configuration 
(WSMan:\<ComputerName>\PlugIn\<SessionConfigurationName>\Enabled) to False.  - Local. Adds a Network_Deny_All entry to 
security descriptor of the session configuration. Users of the local computer can use the session configuration to 
create a local loopback session on the same computer, but remote users are denied access.  - Remote. Removes Deny_All 
and Network_Deny_All entries from the security descriptors of the session configuration. Users of local and remote 
computers can use the session configuration to create sessions and run commands on this computer.


The default value is Remote.


Other cmdlets can override the value of this parameter later. For example, the Enable-PSRemoting cmdlet enables all 
session configurations on the computer and permits remote access to them, and the Disable-PSRemoting cmdlet permits 
only local access to all session configurations on the computer.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionConfigurationAccessMode`),
new Parameter(`ApplicationBase`, `Specifies the path of the assembly file ( .dll) that is specified in the value of the AssemblyName* parameter.`, `String`),
new Parameter(`AssemblyName`, `Specifies the assembly name. This cmdlet creates a session configuration based on a class that is defined in an 
assembly.


Enter the file name or full path of an assembly .dll file that defines a session configuration. If you enter only the 
file name, you can enter the path in the value of the ApplicationBase parameter.`, `String`),
new Parameter(`ConfigurationTypeName`, `Specifies the type of the session configuration that is defined in the assembly in the AssemblyName parameter. The 
type that you specify must implement the System.Management.Automation.Remoting.PSSessionConfiguration class.


This parameter is required when you specify an assembly name.`, `String`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Suppresses all user prompts, and restarts the WinRM service without prompting. Restarting the service makes the 
configuration change effective.


To prevent a restart and suppress the restart prompt, use the NoServiceRestart parameter.`, `SwitchParameter`),
new Parameter(`MaximumReceivedDataSizePerCommandMB`, `Specifies the limit on the amount of data that can be sent to this computer in any single remote command. Enter the 
data size in megabytes (MB). The default is 50 MB.


If a data size limit is defined in the configuration type that is specified in the ConfigurationTypeName parameter, 
the limit in the configuration type is used. The value of this parameter is ignored.`, `Double`),
new Parameter(`MaximumReceivedObjectSizeMB`, `Specifies the limits on the amount of data that can be sent to this computer in any single object. Enter the data size 
in megabytes. The default is 10 MB.


If an object size limit is defined in the configuration type that is specified in the ConfigurationTypeName parameter, 
the limit in the configuration type is used. The value of this parameter is ignored.`, `Double`),
new Parameter(`ModulesToImport`, `Specifies the modules and snap-ins that are automatically imported into sessions that use the session configuration. 
Enter the module and snap-in names.


By default, only the Microsoft.PowerShell.Core snap-in is imported into sessions, but unless the cmdlets are excluded, 
you can use the Import-Module and Add-PSSnapin cmdlets to add modules and snap-ins to the session.


The modules specified in this parameter value are imported in additions to modules specified in the session 
configuration file ( New-PSSessionConfigurationFile ). However, settings in the session configuration file can hide 
the commands exported by modules or prevent users from using them.


The modules specified in this parameter value replace the list of modules specified by using the ModulesToImport 
parameter of the Register-PSSessionConfiguration cmdlet.


This parameter was introduced in Windows PowerShell 3.0.`, `Object[]`),
new Parameter(`Name`, `Specifies the name of the session configuration that you want to change.


You cannot use this parameter to change the name of the session configuration.`, `String`),
new Parameter(`NoServiceRestart`, `Does not restart the WinRM service, and suppresses the prompt to restart the service.


By default, when you run Set-PSSessionConfiguration , you are prompted to restart the WinRM service to make the new 
session configuration effective. Until the WinRM service is restarted, the new session configuration is not effective.


To restart the WinRM service without prompting, use the Force parameter. To restart the WinRM service manually, use 
the Restart-Service cmdlet.`, `SwitchParameter`),
new Parameter(`PSVersion`, `Specifies the version of Windows PowerShell in sessions that use this session configuration.


The value of this parameter takes precedence over the value of the PowerShellVersion key in the session configuration 
file.


This parameter was introduced in Windows PowerShell 3.0.`, `Version`),
new Parameter(`Path`, `Specifies the path of a session configuration file (.pssc), such as one created by the New-PSSessionConfigurationFile 
cmdlet. If you omit the path, the default is the current directory.


For information about how to modify a session configuration file, see the help topic for the 
New-PSSessionConfigurationFile cmdlet.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`RunAsCredential`, `Specifies credentials for commands in the session. By default, commands run with the permissions of the current user.


This parameter was introduced in Windows PowerShell 3.0.`, `PSCredential`),
new Parameter(`SecurityDescriptorSddl`, `Specifies a different Security Descriptor Definition Language (SDDL) string for the configuration.


This string determines the permissions that are required to use the new session configuration. To use a session 
configuration in a session, users must have at least Execute(Invoke) permission for the configuration.


To use the default security descriptor for the configuration, enter an empty string ("") or a value of $Null. The 
default is the root SDDL in the WSMan: drive.


If the security descriptor is complex, consider using the ShowSecurityDescriptorUI parameter instead of this one. You 
cannot use both parameters in the same command.`, `String`),
new Parameter(`SessionTypeOption`, `Specifies type-specific options for the session configuration. Enter a session type options object, such as the 
PSWorkflowExecutionOption object that the New-PSWorkflowExecutionOption cmdlet returns.


The options of sessions that use the session configuration are determined by the values of session options and the 
session configuration options. Unless specified, options set in the session, such as by using the New-PSSessionOption 
cmdlet, take precedence over options set in the session configuration. However, session option values cannot exceed 
maximum values set in the session configuration.


This parameter was introduced in Windows PowerShell 3.0.`, `PSSessionTypeOption`),
new Parameter(`ShowSecurityDescriptorUI`, `Indicates that this cmdlet a property sheet that helps you create a new SDDL for the session configuration. The 
property sheet appears after you run the Set-PSSessionConfiguration command and then restart the WinRM service.


When you set permissions to the configuration, remember that users must have at least Execute(Invoke) permission to 
use the session configuration in a session.


You cannot use the SecurityDescriptorSDDL parameter and this parameter in the same command.`, `SwitchParameter`),
new Parameter(`StartupScript`, `Specifies the startup script for the configuration. Enter the fully qualified path of a Windows PowerShell script. The 
specified script runs in the new session that uses the session configuration.


To delete a startup script from a session configuration, enter an empty string ("") or a value of $Null.


You can use a startup script to further configure the user session. If the script generates an error, even a 
non-terminating error, the session is not created and the New-PSSession command fails.`, `String`),
new Parameter(`ThreadApartmentState`, `Specifies the apartment state setting for the threads in the session. The acceptable values for this parameter are: 
STA, MTA, and Unknown. The default value is Unknown.`, `ApartmentState`),
new Parameter(`ThreadOptions`, `Specifies the thread options setting in the configuration. This setting defines how threads are created and used when 
a command is executed in the session. The acceptable values for this parameter are:


- Default
- ReuseThread


- UseCurrentThread


- UseNewThread




The default value is UseCurrentThread.

For more information, see "PSThreadOptions Enumeration" in the Microsoft Developer Network (MSDN) library.`, `PSThreadOptions`),
new Parameter(`TransportOption`, `Specifies the transport options for the session configuration. Enter a transport options object, such as the 
WSManConfigurationOption object that the New-PSTransportOption cmdlet returns.


The options of sessions that use the session configuration are determined by the values of session options and the 
session configuration options. Unless specified, options set in the session, such as by using the New-PSSessionOption 
cmdlet, take precedence over options set in the session configuration. However, session option values cannot exceed 
maximum values set in the session configuration.


This parameter was introduced in Windows PowerShell 3.0.`, `PSTransportOption`),
new Parameter(`UseSharedProcess`, `Use only one process to host all sessions that are started by the same user and use the same session configuration. By 
default, each session is hosted in its own process.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Changes the properties of a registered session configuration.`,
        `Set-PSSessionConfiguration [-Name] <String> [-AccessMode {Disabled | Local | Remote}] [-ApplicationBase <String>] 
[-Confirm] [-Force] [-MaximumReceivedDataSizePerCommandMB <Double>] [-MaximumReceivedObjectSizeMB <Double>] 
[-ModulesToImport <Object[]>] [-NoServiceRestart] [-PSVersion <Version>] [-RunAsCredential <PSCredential>] 
[-SecurityDescriptorSddl <String>] [-SessionTypeOption <PSSessionTypeOption>] [-ShowSecurityDescriptorUI] 
[-StartupScript <String>] [-ThreadApartmentState {STA | MTA | Unknown}] [-ThreadOptions {Default | UseNewThread | 
ReuseThread | UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] [-WhatIf] 
[<CommonParameters>]

Set-PSSessionConfiguration [-Name] <String> [-AssemblyName] <String> [-ConfigurationTypeName] <String> [-AccessMode 
{Disabled | Local | Remote}] [-ApplicationBase <String>] [-Confirm] [-Force] [-MaximumReceivedDataSizePerCommandMB 
<Double>] [-MaximumReceivedObjectSizeMB <Double>] [-ModulesToImport <Object[]>] [-NoServiceRestart] [-PSVersion 
<Version>] [-RunAsCredential <PSCredential>] [-SecurityDescriptorSddl <String>] [-SessionTypeOption 
<PSSessionTypeOption>] [-ShowSecurityDescriptorUI] [-StartupScript <String>] [-ThreadApartmentState {STA | MTA | 
Unknown}] [-ThreadOptions {Default | UseNewThread | ReuseThread | UseCurrentThread}] [-TransportOption 
<PSTransportOption>] [-UseSharedProcess] [-WhatIf] [<CommonParameters>]

Set-PSSessionConfiguration [-Name] <String> [-AccessMode {Disabled | Local | Remote}] [-Confirm] [-Force] 
[-MaximumReceivedDataSizePerCommandMB <Double>] [-MaximumReceivedObjectSizeMB <Double>] [-NoServiceRestart] -Path 
<String> [-RunAsCredential <PSCredential>] [-SecurityDescriptorSddl <String>] [-ShowSecurityDescriptorUI] 
[-StartupScript <String>] [-ThreadApartmentState {STA | MTA | Unknown}] [-ThreadOptions {Default | UseNewThread | 
ReuseThread | UseCurrentThread}] [-TransportOption <PSTransportOption>] [-UseSharedProcess] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-RuleOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-ScheduledJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-ScheduledJobOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-SecureBootUEFI`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Service`,
        [
            new Parameter(`ComputerName`, `Specifies one or more computers. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your 
computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Description`, `Specifies a new description for the service.


The service description appears in Services in Computer Management. Description is not a property of the 
ServiceController object that Get-Service gets. To see the service description, use Get-WmiObject to get a 
Win32_Service object that represents the service.`, `String`),
new Parameter(`DisplayName`, `Specifies a new display name for the service.`, `String`),
new Parameter(`InputObject`, `Specifies a ServiceController object that represents the service to change. Enter a variable that contains the object, 
or type a command or expression that gets the object, such as a Get-Service command. You can also pipe a service 
object to Set-Service.`, `ServiceController`),
new Parameter(`Name`, `Specifies the service name of the service to be changed. Wildcard characters are not permitted. You can also pipe a 
service name to Set-Service .`, `String`),
new Parameter(`PassThru`, `Returns objects that represent the services that were changed. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`StartupType`, `Specifies the start mode of the service. The acceptable values for this parameter are:


- Automatic. Start when the system starts. - Manual. Starts only when started by a user or program. - Disabled. Cannot 
be started.`, `ServiceStartMode`),
new Parameter(`Status`, `Specifies the status for the service.  The acceptable values for this parameter are:


- Running. Starts the service. - Stopped. Stops the service. - Paused. Suspends the service.`, `String`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Starts, stops, and suspends a service, and changes its properties.`,
        `Set-Service [-ComputerName <String[]>] [-Confirm] [-Description <String>] [-DisplayName <String>] [-InputObject 
<ServiceController>] [-PassThru] [-StartupType {Boot | System | Automatic | Manual | Disabled}] [-Status {Running | 
Stopped | Paused}] [-WhatIf] [<CommonParameters>]

Set-Service [-Name] <String> [-ComputerName <String[]>] [-Confirm] [-Description <String>] [-DisplayName <String>] 
[-PassThru] [-StartupType {Boot | System | Automatic | Manual | Disabled}] [-Status {Running | Stopped | Paused}] 
[-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-StrictMode`,
        [
            new Parameter(`Off`, `Indicates that this cmdlet turns strict mode off. This parameter also turns off "Set-PSDebug -Strict".`, `SwitchParameter`),
new Parameter(`Version`, `Specifies the conditions that cause an error in strict mode.


The acceptable values for this parameter are:


- 1.0


---- Prohibits references to uninitialized variables, except for uninitialized variables in strings.


- 2.0




---- Prohibits references to uninitialized variables. This includes uninitialized variables in strings.


---- Prohibits references to non-existent properties of an object.


---- Prohibits function calls that use the syntax for calling methods.


---- Prohibits a variable without a name ().




Latest


---- Selects the latest version available. The latest version is the most strict. Use this value to make sure that 
scripts use the strictest available version, even when new versions are added to Windows PowerShell.`, `Version`),
        ],
        `Establishes and enforces coding rules in expressions, scripts, and script blocks.`,
        `Set-StrictMode -Off [<CommonParameters>]

Set-StrictMode -Version <Version> [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-TimeZone`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies the ID of the time zone that this cmdlet sets.`, `String`),
new Parameter(`InputObject`, `Specifies a TimeZoneInfo object to use as input.`, `TimeZoneInfo`),
new Parameter(`Name`, `Specifies the name of the time zone that this cmdlet sets.`, `String`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Sets the system time zone to a specified time zone.`,
        `Set-TimeZone [-Confirm] -Id <String> [-PassThru] [-WhatIf] [<CommonParameters>]

Set-TimeZone [-InputObject] <TimeZoneInfo> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Set-TimeZone [-Name] <String> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-TpmOwnerAuth`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-TraceSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-UevConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-UevTemplateProfile`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-Variable`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WAPackVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WAPackVMRole`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WebBinding`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WebCentralCertProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WebCentralCertProviderCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WebConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WebConfigurationProperty`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WebGlobalModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WebHandler`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WebManagedModule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WinAcceptLanguageFromLanguageListOptOut`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WinCultureFromLanguageListOptOut`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WinDefaultInputMethodOverride`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WindowsEdition`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WindowsProductKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WindowsSearchSetting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WinHomeLocation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WinLanguageBarOption`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WinSystemLocale`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WinUILanguageOverride`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WinUserLanguageList`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WmiInstance`,
        [
            new Parameter(`Arguments`, `Specifies the name of the property to be changed and the new value for that property. The name and value must be a 
name-value pair. The name-value pair is passed on the command line as a hash table. For example:


"@{Setting1=1; Setting2=5; Setting3="test"}"`, `Hashtable`),
new Parameter(`AsJob`, `Indicates that this cmdket runs as a background job. Use this parameter to run commands that take a long time to 
finish.


When you specify the AsJob parameter, the command returns an object that represents the background job and then 
displays the command prompt. You can continue to work in the session while the job finishes. If Set-WmiInstance is 
used for a remote computer, the job is created on the local computer, and the results from remote computers are 
automatically returned to the local computer. To manage the job, use the cmdlets that contain the Job noun (the Job 
cmdlets). To get the job results, use the Receive-Job cmdlet.


To use this parameter together with remote computers, the local and remote computers must be configured for remoting. 
Additionally, you must start Windows PowerShell by using the Run as administrator option in Windows Vista and later 
versions of the Windows operating system. For more information, see about_Remote_Requirements.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
new Parameter(`Authentication`, `Specifies the authentication level that must be used with the WMI connection. The acceptable values for this parameter 
are:


- -1: Unchanged.


- 0: Default.


- 1: None.


No authentication in performed.  - 2: Connect. Authentication is performed only when the client establishes a 
relationship with the application.  - 3: Call. Authentication is performed only at the start of each call when the 
application receives the request.  - 4: Packet. Authentication is performed on all the data that is received from the 
client.  - 5: PacketIntegrity. All the data that is transferred between the client and the application is 
authenticated and verified.  - 6: PacketPrivacy. The properties of the other authentication levels are used, and all 
the data is encrypted.`, `AuthenticationLevel`),
new Parameter(`Authority`, `Specifies the authority to use to authenticate the WMI connection. You can specify standard NTLM or Kerberos 
authentication. To use NTLM, set the authority setting to ntlmdomain:<DomainName>, where <DomainName> identifies a 
valid NTLM domain name. To use Kerberos, specify kerberos:<DomainName>\<ServerName>. You cannot include the authority 
setting when you connect to the local computer.`, `String`),
new Parameter(`Class`, `Specifies the name of a WMI class.`, `String`),
new Parameter(`ComputerName`, `Specifies the name of the computer on which this cmdlet runs. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more computers. To specify the local 
computer, type the computer name, a dot (.), or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your 
computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts for a password.


This parameter is not supported by any providers installed with parameter is not supported by any providers installed 
with Windows PowerShell.`, `PSCredential`),
new Parameter(`EnableAllPrivileges`, `Indicates that this cmdlet enables all the permissions of the current user before the command it makes the WMI call.`, `SwitchParameter`),
new Parameter(`Impersonation`, `Specifies the impersonation level to use. The acceptable values for this parameter are:


- 0: Default. Reads the local registry for the default impersonation level, which is usually set to 3: Impersonate. - 
1: Anonymous. Hides the credentials of the caller.  - 2: Identify. Allows objects to query the credentials of the 
caller.  - 3: Impersonate. Allows objects to use the credentials of the caller.  - 4: Delegate. Allows objects to 
permit other objects to use the credentials of the caller.`, `ImpersonationLevel`),
new Parameter(`InputObject`, `Specifies a ManagementObject object to use as input. When this parameter is used, all other parameters ,except the 
Arguments parameter, are ignored.`, `ManagementObject`),
new Parameter(`Locale`, `Specifies the preferred locale for WMI objects. The Locale parameter is specified in an array in the MS_<LCID> format 
in the preferred order.`, `String`),
new Parameter(`Namespace`, `Specifies the WMI repository namespace where the referenced WMI class is located when it is used with the Class 
parameter.`, `String`),
new Parameter(`Path`, `Specifies a WMI object path of the instance that you want to create or update.`, `String`),
new Parameter(`PutType`, `Indicates whether to create or update the WMI instance. The acceptable values for this parameter are:


- UpdateOnly. Updates an existing WMI instance.  - CreateOnly. Creates a new WMI instance.  - UpdateOrCreate. Updates 
the WMI instance if it exists or creates a new instance if an instance does not exist.`, `PutType`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. This parameter is 
used together with the AsJob parameter. The throttle limit applies only to the current command, not to the session or 
to the computer.`, `Int32`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Creates or updates an instance of an existing Windows Management Instrumentation (WMI) class.`,
        `Set-WmiInstance [-Class] <String> [-Arguments <Hashtable>] [-AsJob] [-Authentication {Default | None | Connect | Call 
| Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] 
[-Credential <PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | 
Delegate}] [-Locale <String>] [-Namespace <String>] [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}] 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Set-WmiInstance [-Arguments <Hashtable>] [-AsJob] [-Confirm] -InputObject <ManagementObject> [-PutType {None | 
UpdateOnly | CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Set-WmiInstance [-Arguments <Hashtable>] [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | 
PacketIntegrity | PacketPrivacy | Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential 
<PSCredential>] [-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] 
[-Locale <String>] [-Namespace <String>] -Path <String> [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}] 
[-ThrottleLimit <Int32>] [-WhatIf] [<CommonParameters>]

Set-WmiInstance [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy 
| Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] 
[-Namespace <String>] [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]

Set-WmiInstance [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy 
| Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] 
[-Namespace <String>] [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]

Set-WmiInstance [-AsJob] [-Authentication {Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy 
| Unchanged}] [-Authority <String>] [-ComputerName <String[]>] [-Confirm] [-Credential <PSCredential>] 
[-EnableAllPrivileges] [-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Locale <String>] 
[-Namespace <String>] [-PutType {None | UpdateOnly | CreateOnly | UpdateOrCreate}] [-ThrottleLimit <Int32>] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WSManInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Set-WSManQuickConfig`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Show-AzurePortal`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Show-AzureWebsite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Show-Command`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Show-ControlPanelItem`,
        [
            new Parameter(`CanonicalName`, `Specifies control panel items by using the specified canonical names or name patterns. Wildcard characters are 
permitted. If you enter multiple names, this cmdlet opens control panel items that match any of the names, as if the 
items in the name list were separated by an OR operator.`, `String[]`),
new Parameter(`InputObject`, `Specifies control panel items to open by submitting control panel item objects. Enter a variable that contains control 
panel item objects, or type a command or expression that gets control panel item objects, such as Get-ControlPanelItem 
.`, `ControlPanelItem[]`),
new Parameter(`Name`, `Specifies names of control panel items. Wildcard characters are permitted. If you enter multiple names, this cmdlet 
opens control panel items that match any of the names, as if the items in the name list were separated by an OR 
operator.`, `String[]`),
        ],
        `Opens control panel items.`,
        `Show-ControlPanelItem -CanonicalName <String[]> [<CommonParameters>]

Show-ControlPanelItem [[-InputObject] <ControlPanelItem[]>] [<CommonParameters>]

Show-ControlPanelItem [-Name] <String[]> [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Show-EventLog`,
        [
            new Parameter(`ComputerName`, `Specifies a remote computer. Show-EventLog displays the event logs from the specified computer in Event Viewer on the 
local computer. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your 
computer is not configured to run remote commands.`, `String`),
        ],
        `Displays the event logs of the local or a remote computer in Event Viewer.`,
        `Show-EventLog [[-ComputerName] <String>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Show-WindowsDeveloperLicenseRegistration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Sort-Object`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Split-Path`,
        [
            new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with parameter is not supported by any providers installed 
with Windows PowerShell.`, `PSCredential`),
new Parameter(`IsAbsolute`, `Indicates that this cmdlet returns $True if the path is absolute and $False if it is relative. An absolute path has a 
length greater than zero and does not use a dot (.) to indicate the current path.`, `SwitchParameter`),
new Parameter(`Leaf`, `Indicates that this cmdlet returns only the last item or container in the path. For example, in the path 
"C:\Test\Logs\Pass1.log", it returns only Pass1.log.`, `SwitchParameter`),
new Parameter(`LiteralPath`, `Specifies the paths to be split. Unlike Path , the value of LiteralPath is used exactly as it is typed. No characters 
are interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`NoQualifier`, `Indicates that this cmdlet returns the path without the qualifier. For the FileSystem or registry providers, the 
qualifier is the drive of the provider path, such as C: or HKCU:. For example, in the path "C:\Test\Logs\Pass1.log", 
it returns only \Test\Logs\Pass1.log.`, `SwitchParameter`),
new Parameter(`Parent`, `Indicates that this cmdlet returns only the parent containers of the item or of the container specified by the path. 
For example, in the path "C:\Test\Logs\Pass1.log", it returns C:\Test\Logs. The Parent parameter is the default split 
location parameter.`, `SwitchParameter`),
new Parameter(`Path`, `Specifies the paths to be split. Wildcard characters are permitted. If the path includes spaces, enclose it in 
quotation marks. You can also pipe a path to this cmdlet.`, `String[]`),
new Parameter(`Qualifier`, `Indicates that this cmdlet returns only the qualifier of the specified path. For the FileSystem or registry providers, 
the qualifier is the drive of the provider path, such as C: or HKCU:.`, `SwitchParameter`),
new Parameter(`Resolve`, `Indicates that this cmdlet displays the items that are referenced by the resulting split path instead of displaying 
the path elements.`, `SwitchParameter`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Returns the specified part of a path.`,
        `Split-Path [-Path] <String[]> [-Credential <PSCredential>] [-IsAbsolute] [-Resolve] [-UseTransaction] 
[<CommonParameters>]

Split-Path [-Path] <String[]> [-Credential <PSCredential>] [-Leaf] [-Resolve] [-UseTransaction] [<CommonParameters>]

Split-Path [-Credential <PSCredential>] -LiteralPath <String[]> [-Resolve] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <String[]> [-Credential <PSCredential>] [-NoQualifier] [-Resolve] [-UseTransaction] 
[<CommonParameters>]

Split-Path [-Path] <String[]> [-Credential <PSCredential>] [-Parent] [-Resolve] [-UseTransaction] [<CommonParameters>]

Split-Path [-Path] <String[]> [[-Qualifier]] [-Credential <PSCredential>] [-Resolve] [-UseTransaction] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Split-WindowsImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureBatchPoolResize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureEmulator`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmAutomationDscCompilationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmAutomationRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmCdnEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmHDInsightJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmLogicApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmNetworkWatcherResourceTroubleshooting`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmSiteRecoveryApplyRecoveryPoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmSiteRecoveryCommitFailoverJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmSiteRecoveryPlannedFailoverJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmSiteRecoveryPolicyAssociationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmSiteRecoveryPolicyDissociationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmSiteRecoveryTestFailoverJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmSiteRecoveryUnplannedFailoverJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmSqlDatabaseExecuteIndexRecommendation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmSqlServerUpgrade`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmStreamAnalyticsJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmVmss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmWebApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureRmWebAppSlot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSiteRecoveryCommitFailoverJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSiteRecoveryPlannedFailoverJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSiteRecoveryProtectionProfileAssociationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSiteRecoveryProtectionProfileDissociationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSiteRecoveryTestFailoverJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSiteRecoveryUnplannedFailoverJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSqlDatabaseCopy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSqlDatabaseExport`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSqlDatabaseImport`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSqlDatabaseRecovery`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureSqlDatabaseRestore`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureStorageBlobCopy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureStorageBlobIncrementalCopy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureStorageFileCopy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureStorSimpleBackupCloneJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureStorSimpleDeviceBackupJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureStorSimpleDeviceBackupRestoreJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureStorSimpleDeviceFailoverJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureStorSimpleLegacyVolumeContainerMigrationPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureVirtualNetworkGatewayDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureVNetGatewayDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureWebsite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-AzureWebsiteJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-BitsTransfer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-DscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-DtcDiagnosticResourceManager`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-IISCommitDelay`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-IISSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-Job`,
        [
            new Parameter(`ArgumentList`, `Specifies an array of arguments, or parameter values, for the script that is specified by the FilePath parameter.


Because all of the values that follow the ArgumentList parameter name are interpreted as being values of ArgumentList 
, specify this parameter as the last parameter in the command.`, `Object[]`),
new Parameter(`Authentication`, `Specifies the mechanism that is used to authenticate user credentials. The acceptable values for this parameter are:


- Default


- Basic


- Credssp


- Digest


- Kerberos


- Negotiate
- NegotiateWithImplicitCredential


The default value is Default.


CredSSP authentication is available only in Windows Vista, Windows Server 2008, and later versions of the Windows 
operating system.


For information about the values of this parameter, see the description of the AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=144382 (http://go.microsoft.com/fwlink/?LinkID=144382) in the 
Microsoft Developer Network (MSDN).


Caution: Credential Security Support Provider (CredSSP) authentication, in which the user's credentials are passed to 
a remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.`, `AuthenticationMechanism`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one from the 
Get-Credential cmdlet.`, `PSCredential`),
new Parameter(`DefinitionName`, `Specifies the definition name of the job that this cmdlet starts. Use this parameter to start custom job types that 
have a definition name, such as scheduled jobs.


When you use Start-Job to start an instance of a scheduled job, the job starts immediately, regardless of job triggers 
or job options. The resulting job instance is a scheduled job, but it is not saved to disk like triggered scheduled 
jobs. Also, you cannot use the ArgumentList parameter of Start-Job to provide values for parameters of scripts that 
run in a scheduled job. For more information, see about_Scheduled_Jobs.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`DefinitionPath`, `Specifies path of the definition for the job that this cmdlet starts. Enter the definition path. The concatenation of 
the values of the DefinitionPath and DefinitionName parameters is the fully qualified path of the job definition. Use 
this parameter to start custom job types that have a definition path, such as scheduled jobs.


For scheduled jobs, the value of the DefinitionPath parameter is "$home\AppData\Local\Windows\PowerShell\ScheduledJob".


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`FilePath`, `Specifies a local script that this cmdlet runs as a background job. Enter the path and file name of the script or pipe 
a script path to Start-Job . The script must be on the local computer or in a folder that the local computer can 
access.


When you use this parameter, Windows PowerShell converts the contents of the specified script file to a script block 
and runs the script block as a background job.`, `String`),
new Parameter(`InitializationScript`, `Specifies commands that run before the job starts. Enclose the commands in braces ( { } ) to create a script block.


Use this parameter to prepare the session in which the job runs. For example, you can use it to add functions, 
snap-ins, and modules to the session.`, `ScriptBlock`),
new Parameter(`InputObject`, `Specifies input to the command. Enter a variable that contains the objects, or type a command or expression that 
generates the objects.


In the value of the ScriptBlock parameter, use the $Input automatic variable to represent the input objects.`, `PSObject`),
new Parameter(`LiteralPath`, `Specifies a local script that this cmdlet runs as a background job. Enter the path of a script on the local computer.


Unlike the FilePath parameter, this cmdlet uses the value of the LiteralPath parameter exactly as it is typed. No 
characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String`),
new Parameter(`Name`, `Specifies a friendly name for the new job. You can use the name to identify the job to other job cmdlets, such as the 
Stop-Job cmdlet.


The default friendly name is Job#, where # is an ordinal number that is incremented for each job.`, `String`),
new Parameter(`PSVersion`, `Specifies a version. This cmdlet runs the job with the version of Windows PowerShell. The acceptable values for this 
parameter are: 2.0 and 3.0.


This parameter was introduced in Windows PowerShell 3.0.`, `Version`),
new Parameter(`RunAs32`, `Indicates that this cmdlet runs the job in a 32-bit process. Use this parameter to force the job to run in a 32-bit 
process on a 64-bit operating system.


On 64-bit versions of Windows 7 and Windows Server 2008 R2, when the Start-Job command includes the RunAs32 parameter, 
you cannot use the Credential parameter to specify the credentials of another user.`, `SwitchParameter`),
new Parameter(`ScriptBlock`, `Specifies the commands to run in the background job. Enclose the commands in braces ( { } ) to create a script block. 
This parameter is required.`, `ScriptBlock`),
new Parameter(`Type`, `Specifies the custom type for jobs that this cmdlet starts. Enter a custom job type name, such as PSScheduledJob for 
scheduled jobs or PSWorkflowJob for workflows jobs. This parameter is not valid for standard background jobs.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        ],
        `Starts a Windows PowerShell background job.`,
        `Start-Job [-ScriptBlock] <ScriptBlock> [[-InitializationScript] <ScriptBlock>] [-ArgumentList <Object[]>] 
[-Authentication {Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] 
[-Credential <PSCredential>] [-InputObject <PSObject>] [-Name <String>] [-PSVersion <Version>] [-RunAs32] 
[<CommonParameters>]

Start-Job [-FilePath] <String> [[-InitializationScript] <ScriptBlock>] [-ArgumentList <Object[]>] [-Authentication 
{Default | Basic | Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-Credential 
<PSCredential>] [-InputObject <PSObject>] [-Name <String>] [-PSVersion <Version>] [-RunAs32] [<CommonParameters>]

Start-Job [[-InitializationScript] <ScriptBlock>] [-ArgumentList <Object[]>] [-Authentication {Default | Basic | 
Negotiate | NegotiateWithImplicitCredential | Credssp | Digest | Kerberos}] [-Credential <PSCredential>] [-InputObject 
<PSObject>] -LiteralPath <String> [-Name <String>] [-PSVersion <Version>] [-RunAs32] [<CommonParameters>]

Start-Job [-DefinitionName] <String> [[-DefinitionPath] <String>] [[-Type] <String>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-Process`,
        [
            new Parameter(`ArgumentList`, `Specifies parameters or parameter values to use when this cmdlet starts the process.`, `String[]`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. Type a user name, such as User01 or 
Domain01\User01, or enter a PSCredential object, such as one from the Get-Credential cmdlet. By default, the cmdlet 
uses the credentials of the current user.`, `PSCredential`),
new Parameter(`FilePath`, `Specifies the optional path and file name of the program that runs in the process. Enter the name of an executable 
file or of a document, such as a .txt or .doc file, that is associated with a program on the computer. This parameter 
is required.


If you specify only a file name, use the WorkingDirectory parameter to specify the path.`, `String`),
new Parameter(`LoadUserProfile`, `Indicates that this cmdlet loads the Windows user profile stored in the HKEY_USERS registry key for the current user.


This parameter does not affect the Windows PowerShell profiles. For more information, see about_Profiles.`, `SwitchParameter`),
new Parameter(`NoNewWindow`, `Start the new process in the current console window. By default Windows PowerShell opens a new window.


You cannot use the NoNewWindow and WindowStyle parameters in the same command.`, `SwitchParameter`),
new Parameter(`PassThru`, `Returns a process object for each process that the cmdlet started. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`RedirectStandardError`, `Specifies a file. This cmdlet sends any errors generated by the process to a file that you specify. Enter the path and 
file name. By default, the errors are displayed in the console.`, `String`),
new Parameter(`RedirectStandardInput`, `Specifies a file. This cmdlet reads input from the specified file. Enter the path and file name of the input file. By 
default, the process gets its input from the keyboard.`, `String`),
new Parameter(`RedirectStandardOutput`, `Specifies a file. This cmdlet sends the output generated by the process to a file that you specify. Enter the path and 
file name. By default, the output is displayed in the console.`, `String`),
new Parameter(`UseNewEnvironment`, `Indicates that this cmdlet uses new environment variables specified for the process. By default, the started process 
runs with the environment variables specified for the computer and user.`, `SwitchParameter`),
new Parameter(`Verb`, `Specifies a verb to use when this cmdlet starts the process. The verbs that are available are determined by the file 
name extension of the file that runs in the process.


The following table shows the verbs for some common process file types.


"File type      Verbs" "---------      -------" ".cmd------Edit, Open, Print, Runas" ".exe------Open, RunAs" 
".txt------Open, Print, PrintTo" ".wav------Open, Play"


To find the verbs that can be used with the file that runs in a process, use the New-Object cmdlet to create a 
System.Diagnostics.ProcessStartInfo object for the file. The available verbs are in the Verbs property of the 
ProcessStartInfo object. For details, see the examples.`, `String`),
new Parameter(`Wait`, `Indicates that this cmdlet waits for the specified process to complete before accepting more input. This parameter 
suppresses the command prompt or retains the window until the process finishes.`, `SwitchParameter`),
new Parameter(`WindowStyle`, `Specifies the state of the window that is used for the new process. The acceptable values for this parameter are: 
Normal, Hidden, Minimized, and Maximized. The default value is Normal.


You cannot use the WindowStyle and NoNewWindow parameters in the same command.`, `ProcessWindowStyle`),
new Parameter(`WorkingDirectory`, `Specifies the location of the executable file or document that runs in the process. The default is the current folder.`, `String`),
        ],
        `Starts one or more processes on the local computer.`,
        `Start-Process [-FilePath] <String> [[-ArgumentList] <String[]>] [-Credential <PSCredential>] [-LoadUserProfile] 
[-NoNewWindow] [-PassThru] [-RedirectStandardError <String>] [-RedirectStandardInput <String>] 
[-RedirectStandardOutput <String>] [-UseNewEnvironment] [-Wait] [-WindowStyle {Normal | Hidden | Minimized | 
Maximized}] [-WorkingDirectory <String>] [<CommonParameters>]

Start-Process [-FilePath] <String> [[-ArgumentList] <String[]>] [-PassThru] [-Verb <String>] [-Wait] [-WindowStyle 
{Normal | Hidden | Minimized | Maximized}] [-WorkingDirectory <String>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-Service`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`DisplayName`, `Specifies the display names of the services to start. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Exclude`, `Specifies services that this cmdlet omits. The value of this parameter qualifies the Name parameter. Enter a name 
element or pattern, such as "s*". Wildcard characters are permitted.`, `String[]`),
new Parameter(`Include`, `Specifies services that this cmdlet starts. The value of this parameter qualifies the Name parameter. Enter a name 
element or pattern, such as "s*". Wildcard characters are permitted.`, `String[]`),
new Parameter(`InputObject`, `Specifies ServiceController objects representing the services to be started. Enter a variable that contains the 
objects, or type a command or expression that gets the objects.`, `ServiceController[]`),
new Parameter(`Name`, `Specifies the service names for the service to be started.


The parameter name is optional. You can use Name or its alias, ServiceName , or you can omit the parameter name.`, `String[]`),
new Parameter(`PassThru`, `Returns an object that represents the service. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Starts one or more stopped services.`,
        `Start-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Start-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] 
[-WhatIf] [<CommonParameters>]

Start-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-Sleep`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-Transaction`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Independent`, `Indicates that this cmdlet starts a transaction that is independent of any transactions in progress. By default, if 
you use Start-Transaction while another transaction is in progress, a new subscriber is added to the transaction in 
progress. This parameter has an effect only when a transaction is already in progress in the session.


By default, if you use Start-Transaction while a transaction is in progress, the existing transaction object is reused 
and the subscriber count is incremented. The effect is much like joining the original transaction. An Undo-Transaction 
command rolls back the whole the transaction. To complete the transaction, you must enter a Complete-Transaction 
command for each subscriber. Because most transactions that are in progress at the same time are related, the default 
is sufficient for most uses.


If you specify the Independent parameter, this cmdlet creates a new transaction that can be completed or undone 
without affecting the original transaction. However, because only one transaction can be active at a time, you must 
complete or roll back the new transaction before resuming work on the original transaction.`, `SwitchParameter`),
new Parameter(`RollbackPreference`, `Specifies the conditions under which a transaction is automatically rolled back. The acceptable values for this 
parameter are:


- Error. The transaction is rolled back automatically if a terminating or non-terminating error occurs.  - 
TerminatingError. The transaction is rolled back automatically if a terminating error occurs.  - Never. The 
transaction is never rolled back automatically.


The default value is Error.`, `RollbackSeverity`),
new Parameter(`Timeout`, `Specifies the maximum time, in minutes, that the transaction is active. When the time-out expires, the transaction is 
automatically rolled back.


By default, there is no time-out for transactions that are started at the command line. When transactions are started 
by a script, the default time-out is 30 minutes.`, `Int32`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Starts a transaction.`,
        `Start-Transaction [-Confirm] [-Independent] [-RollbackPreference {Error | TerminatingError | Never}] [-Timeout 
<Int32>] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-Transcript`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-WAPackVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-WebAppPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-WebCommitDelay`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-WebItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Start-Website`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AppvClientConnectionGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AppvClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureAutomationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureBatchCertificateDeletion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureBatchJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureBatchJobSchedule`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureBatchPoolResize`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureBatchTask`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureEmulator`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureKeyVaultCertificateOperation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmAutomationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmBackupJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmCdnEndpoint`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmDataLakeAnalyticsJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmHDInsightJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmLogicAppRun`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmNetworkWatcherPacketCapture`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmRecoveryServicesBackupJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmResourceGroupDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmSiteRecoveryJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmSqlDatabaseExecuteIndexRecommendation`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmSqlServerUpgrade`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmStreamAnalyticsJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmVmss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmWebApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureRmWebAppSlot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureSiteRecoveryJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureSqlDatabaseCopy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureStorageBlobCopy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureStorageFileCopy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureStorSimpleJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureVirtualNetworkGatewayDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureVNetGatewayDiagnostics`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureWebsite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-AzureWebsiteJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-ComputeProcess`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-Computer`,
        [
            new Parameter(`AsJob`, `Indicates that this cmdlet runs as a background job.


To use this parameter, the local and remote computers must be configured for remoting and, on Windows Vista and later 
versions of the Windows operating system, you must open Windows PowerShell by using the Run as administrator option. 
For more information, see about_Remote_Requirements.


When you specify the AsJob parameter, the command immediately returns an object that represents the background job. 
You can continue to work in the session while the job finishes. The job is created on the local computer and the 
results from remote computers are automatically returned to the local computer. To get the job results, use the 
Receive-Job cmdlet.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
new Parameter(`ComputerName`, `Specifies the computers to stop. The default is the local computer.


Type the NETBIOS name, IP address, or fully qualified domain name of one or more computers in a comma-separated list. 
To specify the local computer, type the computer name or localhost.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your 
computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object, such as one from the 
Get-Credential cmdlet.`, `PSCredential`),
new Parameter(`DcomAuthentication`, `Specifies the authentication level that this cmdlet uses with WMI. Stop-Computer uses WMI. The acceptable values for 
this parameter are:


- Default. Windows Authentication  - None. No COM authentication  - Connect. Connect-level COM authentication - Call. 
Call-level COM authentication - Packet . Packet-level COM authentication - PacketIntegrity. Packet Integrity-level COM 
authentication  - PacketPrivacy. Packet Privacy-level COM authentication  - Unchanged. Same as the previous command


The default value is Packet.


For more information about the values of this parameter, see AuthenticationLevel 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235229 (http://go.microsoft.com/fwlink/?LinkID=235229) in the 
Microsoft Developer Library (MSDN).`, `AuthenticationLevel`),
new Parameter(`Force`, `Forces an immediate shut down of the computers.`, `SwitchParameter`),
new Parameter(`Impersonation`, `Specifies the impersonation level to use when this cmdlet calls WMI. Stop-Computer uses WMI. The acceptable values for 
this parameter are:


- Default. Default impersonation.  - Anonymous. Hides the identity of the caller.  - Identify. Allows objects to query 
the credentials of the caller.  - Impersonate. Allows objects to use the credentials of the caller.


The default value is Impersonate.`, `ImpersonationLevel`),
new Parameter(`Protocol`, `Specifies which protocol to use to restart the computers. The acceptable values for this parameter are: WSMan and 
DCOM. The default value is DCOM.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this 
parameter or enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
new Parameter(`WsmanAuthentication`, `Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the WSMan protocol. 
The acceptable values for this parameter are:


- Basic


- CredSSP


- Default


- Digest


- Kerberos


- Negotiate.




The default value is Default.


For more information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235230 (http://go.microsoft.com/fwlink/?LinkID=235230) in the MSDN 
library.


Caution: Credential Security Service Provider (CredSSP) authentication, in which the user credentials are passed to a 
remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.

This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        ],
        `Stops (shuts down) local and remote computers.`,
        `Stop-Computer [[-ComputerName] <String[]>] [[-Credential] <PSCredential>] [-AsJob] [-Confirm] [-DcomAuthentication 
{Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Force] [-Impersonation 
{Default | Anonymous | Identify | Impersonate | Delegate}] [-Protocol {DCOM | WSMan}] [-ThrottleLimit <Int32>] 
[-WhatIf] [-WsmanAuthentication {Default | Basic | Negotiate | CredSSP | Digest | Kerberos}] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-DtcDiagnosticResourceManager`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-IISCommitDelay`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-IISSite`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-Job`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet stops jobs that satisfy all of the conditions. Enter a hash table 
where the keys are job properties and the values are job property values.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs. It does not work on standard 
background jobs, such as those created by using the Start-Job cmdlet. For information about support for this 
parameter, see the help topic for the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Hashtable`),
new Parameter(`Id`, `Specifies the IDs of jobs that this cmdlet stops. The default is all jobs in the current session.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and type than 
the instance ID, but it is unique only in the current session. You can type one or more IDs, separated by commas. To 
find the ID of a job, type "Get-Job".`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies the instance IDs of jobs that this cmdlet stops. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use 
Get-Job.`, `Guid[]`),
new Parameter(`Job`, `Specifies the jobs that this cmdlet stops. Enter a variable that contains the jobs or a command that gets the jobs. 
You can also use a pipeline operator to submit jobs to the Stop-Job cmdlet. By default, Stop-Job deletes all jobs that 
were started in the current session.`, `Job[]`),
new Parameter(`Name`, `Specifies friendly names of jobs that this cmdlet stops. Enter the job names in a comma-separated list or use wildcard 
characters (*) to enter a job name pattern. By default, Stop-Job stops all jobs created in the current session.


Because the friendly name is not guaranteed to be unique, use the WhatIf and Confirm parameters when stopping jobs by 
name.`, `String[]`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`State`, `Specifies a job state. This cmdlet stops only jobs in the specified state. The acceptable values for this parameter 
are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx ) in the 
Microsoft Developer Network (MSDN).`, `JobState`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Stops a Windows PowerShell background job.`,
        `Stop-Job [-Filter] <Hashtable> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-Id] <Int32[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-InstanceId] <Guid[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-Job] <Job[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-Name] <String[]> [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | 
Suspending | Stopping | AtBreakpoint} [-Confirm] [-PassThru] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-Process`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Stops the specified processes without prompting for confirmation. By default, Stop-Process prompts for confirmation 
before stopping any process that is not owned by the current user.


To find the owner of a process, use the Get-WmiObject cmdlet to get a Win32_Process object that represents the 
process, and then use the GetOwner method of the object.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies the process IDs of the processes to stop. To specify multiple IDs, use commas to separate the IDs. To find 
the PID of a process, type "Get-Process".`, `Int32[]`),
new Parameter(`InputObject`, `Specifies the process objects to stop. Enter a variable that contains the objects, or type a command or expression 
that gets the objects.`, `Process[]`),
new Parameter(`Name`, `Specifies the process names of the processes to stop. You can type multiple process names, separated by commas, or use 
wildcard characters.`, `String[]`),
new Parameter(`PassThru`, `Returns an object that represents the process. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Stops one or more running processes.`,
        `Stop-Process [-Id] <Int32[]> [-Confirm] [-Force] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Process [-InputObject] <Process[]> [-Confirm] [-Force] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Process [-Confirm] [-Force] -Name <String[]> [-PassThru] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-Service`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`DisplayName`, `Specifies the display names of the services to stop. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Exclude`, `Specifies services that this cmdlet omits. The value of this parameter qualifies the Name parameter. Enter a name 
element or pattern, such as s*. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Force`, `Forces the cmdlet to stop a service even if that service has dependent services.`, `SwitchParameter`),
new Parameter(`Include`, `Specifies services that this cmdlet stops. The value of this parameter qualifies the Name parameter. Enter a name 
element or pattern, such as s*. Wildcard characters are permitted.`, `String[]`),
new Parameter(`InputObject`, `Specifies ServiceController objects that represent the services to stop. Enter a variable that contains the objects, 
or type a command or expression that gets the objects.`, `ServiceController[]`),
new Parameter(`Name`, `Specifies the service names of the services to stop. Wildcard characters are permitted.`, `String[]`),
new Parameter(`NoWait`, `Indicates that this cmdlet uses the no wait option.`, `SwitchParameter`),
new Parameter(`PassThru`, `Returns an object that represents the service. By default, this cmdlet does not generate any output.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Stops one or more running services.`,
        `Stop-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Force] [-Include <String[]>] [-NoWait] 
[-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] 
[-NoWait] [-PassThru] [-WhatIf] [<CommonParameters>]

Stop-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Force] [-Include <String[]>] [-NoWait] [-PassThru] 
[-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-Transcript`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-WAPackVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-WebAppPool`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-WebCommitDelay`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-WebItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Stop-Website`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Submit-AzureRmDataLakeAnalyticsJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Submit-AzureRmHDInsightScriptAction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-AzureAutomationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-AzureRmAnalysisServicesServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-AzureRmAutomationJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-AzureRmDataFactoryPipeline`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-AzureRmSqlDatabase`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-BitsTransfer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-Job`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet suspends jobs that satisfy all of the conditions. Enter a hash table 
where the keys are job properties and the values are job property values.`, `Hashtable`),
new Parameter(`Force`, `Suspends the workflow job immediately. This action could cause a loss of state and data.


By default, Suspend-Job lets the workflow job run until the next checkpoint and then suspends it. You can also use 
this parameter to suspend workflow jobs that do not have checkpoints.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies the IDs of jobs that this cmdlet suspends.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and to type 
than the instance ID, but it is unique only in the current session. You can type one or more IDs, separated by commas. 
To find the ID of a job, use the Get-Job cmdlet.`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies the instance IDs of jobs that this cmdlet suspends. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use 
Get-Job .`, `Guid[]`),
new Parameter(`Job`, `Specifies the workflow jobs that this cmdlet stops. Enter a variable that contains the workflow jobs or a command that 
gets the workflow jobs. You can also pipe workflow jobs to the Suspend-Job cmdlet.`, `Job[]`),
new Parameter(`Name`, `Specifies friendly names of jobs that this cmdlet suspends. Enter one or more workflow job names. Wildcard characters 
are supported.`, `String[]`),
new Parameter(`State`, `Specifies a job state. This cmdlet stops only jobs in the specified state. The acceptable values for this parameter 
are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping Suspend-Job suspends only workflow jobs in the Running state.


For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx ) in the 
Microsoft Developer Network (MSDN).`, `JobState`),
new Parameter(`Wait`, `Indicates that this cmdlet suppresses the command prompt until the workflow job is in the suspended state. By default, 
Suspend-Job returns immediately, even if the workflow job is not yet in the suspended state.


The Wait parameter is equivalent to piping a Suspend-Job command to the Wait-Job cmdlet.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Temporarily stops workflow jobs.`,
        `Suspend-Job [-Filter] <Hashtable> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-Id] <Int32[]> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-InstanceId] <Guid[]> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-Job] <Job[]> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-Name] <String[]> [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]

Suspend-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | 
Suspending | Stopping | AtBreakpoint} [-Confirm] [-Force] [-Wait] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-Service`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`DisplayName`, `Specifies the display names of the services to be suspended. Wildcard characters are permitted.`, `String[]`),
new Parameter(`Exclude`, `Specifies services to omit from the specified services. The value of this parameter qualifies the Name parameter. 
Enter a name element or pattern, such as "s*". Wildcard characters are permitted.`, `String[]`),
new Parameter(`Include`, `Specifies services to suspend. The value of this parameter qualifies the Name parameter. Enter a name element or 
pattern, such as "s*". Wildcard characters are permitted.`, `String[]`),
new Parameter(`InputObject`, `Specifies ServiceController objects that represent the services to suspend. Enter a variable that contains the 
objects, or type a command or expression that gets the objects.`, `ServiceController[]`),
new Parameter(`Name`, `Specifies the service names of the services to suspend. Wildcard characters are permitted.


The parameter name is optional. You can use Name or its alias, ServiceName , or you can omit the parameter name.`, `String[]`),
new Parameter(`PassThru`, `Returns an object representing the item with which you are working. By default, this cmdlet does not generate any 
output.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Suspends (pauses) one or more running services.`,
        `Suspend-Service [-Confirm] -DisplayName <String[]> [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]

Suspend-Service [-InputObject] <ServiceController[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] 
[-PassThru] [-WhatIf] [<CommonParameters>]

Suspend-Service [-Name] <String[]> [-Confirm] [-Exclude <String[]>] [-Include <String[]>] [-PassThru] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Suspend-WAPackVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Switch-AzureRmSqlDatabaseFailoverGroup`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Switch-AzureRmWebAppSlot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Switch-AzureWebsiteSlot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Switch-Certificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Sync-AppvPublishingServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Sync-AzureRmMediaServiceStorageKeys`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Tee-Object`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AppLockerPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureBatchAutoScale`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureName`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRecoveryServicesVaultUpgrade`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmAnalysisServicesServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmCdnCustomDomain`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmContainerRegistryNameAvailability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmDataLakeAnalyticsAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmDataLakeAnalyticsCatalogItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmDataLakeStoreAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmDataLakeStoreItem`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmDnsAvailability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmLogicApp`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmNetworkWatcherConnectivity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmNetworkWatcherIPFlow`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmPrivateIPAddressAvailability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmRelayName`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmResourceGroupDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmStreamAnalyticsFunction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmStreamAnalyticsInput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmStreamAnalyticsOutput`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureRmVMAEMExtension`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureStaticVNetIP`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-AzureTrafficManagerDomainName`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-Certificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-ComputerSecureChannel`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. Type a user name, such as User01 or 
Domain01\User01, or enter a PSCredential object, such as one that the Get-Credential cmdlet returns. By default, the 
cmdlet uses the credentials of the current user.


The Credential parameter is designed for use in commands that use the Repair parameter to repair the channel between 
the computer and the domain.`, `PSCredential`),
new Parameter(`Repair`, `Indicates that this cmdlet removes and then rebuilds the channel established by the NetLogon service. Use this 
parameter to try to restore a connection that has failed the test.


To use this parameter, the current user must be a member of the Administrators group on the local computer.`, `SwitchParameter`),
new Parameter(`Server`, `Specifies the domain controller to run the command. If this parameter is not specified, this cmdlet selects a default 
domain controller for the operation.`, `String`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Tests and repairs the secure channel between the local computer and its domain.`,
        `Test-ComputerSecureChannel [-Confirm] [-Credential <PSCredential>] [-Repair] [-Server <String>] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-Connection`,
        [
            new Parameter(`AsJob`, `Indicates that this cmdlet runs as a background job.


To use this parameter, the local and remote computers must be configured for remoting and, on Windows Vista and later 
versions of the Windows operating system, you must open Windows PowerShell by using the Run as administrator option. 
For more information, see about_Remote_Requirements.


When you specify the AsJob parameter, the command immediately returns an object that represents the background job. 
You can continue to work in the session while the job finishes. The job is created on the local computer and the 
results from remote computers are automatically returned to the local computer. To get the job results, use the 
Receive-Job cmdlet.


For more information about Windows PowerShell background jobs, see about_Jobs and about_Remote_Jobs.`, `SwitchParameter`),
new Parameter(`BufferSize`, `Specifies the size, in bytes, of the buffer sent with this command. The default value is 32.`, `Int32`),
new Parameter(`ComputerName`, `Specifies the computers to ping. Type the computer names or type IP addresses in IPv4 or IPv6 format. Wildcard 
characters are not permitted. This parameter is required.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter even if your 
computer is not configured to run remote commands.`, `String[]`),
new Parameter(`Count`, `Specifies the number of echo requests to send. The default value is 4.`, `Int32`),
new Parameter(`Credential`, `Specifies a user account that has permission to send a ping request from the source computer. Type a user name, such 
as User01 or Domain01\User01, or enter a PSCredential object, such as one from the Get-Credential cmdlet.


The Credential parameter is valid only when the Source parameter is used in the command. The credentials do not affect 
the destination computer.`, `PSCredential`),
new Parameter(`DcomAuthentication`, `Specifies the authentication level that this cmdlet uses with WMI. Test-Connection uses WMI. The acceptable values for 
this parameter are:


- Default. Windows Authentication  - None. No COM authentication  - Connect. Connect-level COM authentication - Call. 
Call-level COM authentication - Packet . Packet-level COM authentication - PacketIntegrity. Packet Integrity-level COM 
authentication  - PacketPrivacy. Packet Privacy-level COM authentication  - Unchanged. Same as the previous command


The default value is Packet.


For more information about the values of this parameter, see AuthenticationLevel 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235229 (http://go.microsoft.com/fwlink/?LinkID=235229) in the 
Microsoft Developer Library (MSDN).`, `AuthenticationLevel`),
new Parameter(`Delay`, `Specifies the interval between pings, in seconds.`, `Int32`),
new Parameter(`Impersonation`, `Specifies the impersonation level to use when this cmdlet calls WMI. Test-Connection uses WMI. The acceptable values 
for this parameter are:


- Default. Default impersonation.  - Anonymous. Hides the identity of the caller.  - Identify. Allows objects to query 
the credentials of the caller.  - Impersonate. Allows objects to use the credentials of the caller.


The default value is Impersonate.`, `ImpersonationLevel`),
new Parameter(`Protocol`, `Specifies a protocol. The acceptable values for this parameter are: DCOM and WSMan.`, `String`),
new Parameter(`Quiet`, `Indicates that this cmdlet suppresses all errors. If any pings succeed, this cmdlet returns $True. If all pings fail, 
this cmdlet returns $False.`, `SwitchParameter`),
new Parameter(`Source`, `Specifies the names of the computers where the ping originates. Enter a comma-separated list of computer names. The 
default is the local computer.`, `String[]`),
new Parameter(`ThrottleLimit`, `Specifies the maximum number of concurrent connections that can be established to run this command. If you omit this 
parameter or enter a value of 0, the default value, 32, is used.


The throttle limit applies only to the current command, not to the session or to the computer.`, `Int32`),
new Parameter(`TimeToLive`, `Specifies the maximum time, in seconds, that each echo request packet, or ping, is active. Enter an integer between 1 
and 255. The default value is 80 (seconds). The alias of the TimeToLive parameter is TTL .`, `Int32`),
new Parameter(`WsmanAuthentication`, `Specifies the mechanism that is used to authenticate the user credentials when this cmdlet uses the WSMan protocol. 
The acceptable values for this parameter are:


- Basic


- CredSSP


- Default


- Digest


- Kerberos


- Negotiate.




The default value is Default.


For more information about the values of this parameter, see AuthenticationMechanism 
Enumerationhttp://go.microsoft.com/fwlink/?LinkID=235230 (http://go.microsoft.com/fwlink/?LinkID=235230) in the MSDN 
library.


Caution: Credential Security Service Provider (CredSSP) authentication, in which the user credentials are passed to a 
remote computer to be authenticated, is designed for commands that require authentication on more than one resource, 
such as accessing a remote network share. This mechanism increases the security risk of the remote operation. If the 
remote computer is compromised, the credentials that are passed to it can be used to control the network session.

This parameter was introduced in Windows PowerShell 3.0.`, `String`),
        ],
        `Sends ICMP echo request packets ("pings") to one or more computers.`,
        `Test-Connection [-ComputerName] <String[]> [-AsJob] [-BufferSize <Int32>] [-Count <Int32>] [-DcomAuthentication 
{Default | None | Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Delay <Int32>] 
[-Impersonation {Default | Anonymous | Identify | Impersonate | Delegate}] [-Protocol {DCOM | WSMan}] [-ThrottleLimit 
<Int32>] [-TimeToLive <Int32>] [-WsmanAuthentication {Default | Basic | Negotiate | CredSSP | Digest | Kerberos}] 
[<CommonParameters>]

Test-Connection [-ComputerName] <String[]> [-Source] <String[]> [-AsJob] [-BufferSize <Int32>] [-Count <Int32>] 
[-Credential <PSCredential>] [-DcomAuthentication {Default | None | Connect | Call | Packet | PacketIntegrity | 
PacketPrivacy | Unchanged}] [-Delay <Int32>] [-Impersonation {Default | Anonymous | Identify | Impersonate | 
Delegate}] [-Protocol {DCOM | WSMan}] [-ThrottleLimit <Int32>] [-TimeToLive <Int32>] [-WsmanAuthentication {Default | 
Basic | Negotiate | CredSSP | Digest | Kerberos}] [<CommonParameters>]

Test-Connection [-ComputerName] <String[]> [-BufferSize <Int32>] [-Count <Int32>] [-DcomAuthentication {Default | None 
| Connect | Call | Packet | PacketIntegrity | PacketPrivacy | Unchanged}] [-Delay <Int32>] [-Impersonation {Default | 
Anonymous | Identify | Impersonate | Delegate}] [-Protocol {DCOM | WSMan}] [-Quiet] [-TimeToLive <Int32>] 
[-WsmanAuthentication {Default | Basic | Negotiate | CredSSP | Digest | Kerberos}] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-DscConfiguration`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-FileCatalog`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-KdsRootKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-ModuleManifest`,
        [
            new Parameter(`Path`, `Specifies a path and file name for the manifest file. Enter an optional path and name of the module manifest file that 
has the .psd1 file name extension. The default location is the current directory. Wildcard characters are supported, 
but must resolve to a single module manifest file. This parameter is required. You can also pipe a path to 
Test-ModuleManifest .`, `String`),
        ],
        `Verifies that a module manifest file accurately describes the contents of a module.`,
        `Test-ModuleManifest [-Path] <String> [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-Path`,
        [
            new Parameter(`OlderThan`, `Returns "True" when the LastWriteTime value of a file is less than the specified date. Otherwise, it returns "False". 
Enter a DateTime object, such as one that the Get-Date cmdlet returns, or a string that can be converted to a DateTime 
object, such as "August 10, 2011 2:00 PM".

OlderThan is a dynamic parameter that works only on file system paths. It was introduced in Windows PowerShell 3.0.`, `DateTime`),
new Parameter(`NewerThan`, `Returns "True" when the LastWriteTime value of a file is greater than the specified date. Otherwise, it returns 
"False". Enter a DateTime object, such as one that the Get-Date cmdlet returns, or a string that can be converted to a 
DateTime object, such as "August 10, 2011 2:00 PM".

NewerThan is a dynamic parameter that works only on file system paths. It was introduced in Windows PowerShell 3.0.`, `DateTime`),
new Parameter(`Credential`, `Specifies a user account that has permission to perform this action. The default is the current user.


Type a user name, such as User01 or Domain01\User01. Or, enter a PSCredential object, such as one generated by the 
Get-Credential cmdlet. If you type a user name, this cmdlet prompts you for a password.


This parameter is not supported by any providers installed with Windows PowerShell.`, `PSCredential`),
new Parameter(`Exclude`, `Specifies items that this cmdlet omits. The value of this parameter qualifies the Path parameter. Enter a path element 
or pattern, such as "*.txt". Wildcard characters are permitted.`, `String[]`),
new Parameter(`Filter`, `Specifies a filter in the format or language of the provider. The value of this parameter qualifies the Path 
parameter. The syntax of the filter, including the use of wildcard characters, depends on the provider. Filters are 
more efficient than other parameters, because the provider applies them when it retrieves the objects instead of 
having Windows PowerShell filter the objects after they are retrieved.`, `String`),
new Parameter(`Include`, `Specifies paths that this cmdlet tests. The value of this parameter qualifies the Path parameter. Enter a path element 
or pattern, such as "*.txt". Wildcard characters are permitted.`, `String[]`),
new Parameter(`IsValid`, `Indicates that this cmdlet tests the syntax of the path, regardless of whether the elements of the path exist. This 
cmdlet returns $True if the path syntax is valid and $False if it is not.`, `SwitchParameter`),
new Parameter(`LiteralPath`, `Specifies a path to be tested. Unlike Path , the value of the LiteralPath parameter is used exactly as it is typed. No 
characters are interpreted as wildcard characters. If the path includes escape characters, enclose it in single 
quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Path`, `Specifies a path to be tested. Wildcard characters are permitted. If the path includes spaces, enclose it in quotation 
marks.`, `String[]`),
new Parameter(`PathType`, `Specifies the type of the final element in the path. This cmdlet returns $True if the element is of the specified type 
and $False if it is not. The acceptable values for this parameter are:


- Container. An element that contains other elements, such as a directory or registry key. - Leaf. An element that 
does not contain other elements, such as a file. - Any. Either a container or a leaf. Tells whether the final element 
in the path is of a particular type.`, `TestPathType`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Determines whether all elements of a file or directory path exist.`,
        `Test-Path [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include <String[]>] [-IsValid] 
-LiteralPath <String[]> [-NewerThan <DateTime>] [-OlderThan <DateTime>] [-PathType {Any | Container | Leaf}] 
[-UseTransaction] [<CommonParameters>]

Test-Path [-Path] <String[]> [-Credential <PSCredential>] [-Exclude <String[]>] [-Filter <String>] [-Include 
<String[]>] [-IsValid] [-NewerThan <DateTime>] [-OlderThan <DateTime>] [-PathType {Any | Container | Leaf}] 
[-UseTransaction] [<CommonParameters>]

Test-Path [-NewerThan <DateTime>] [-OlderThan <DateTime>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-PSSessionConfigurationFile`,
        [
            new Parameter(`Path`, `Specifies the path and file name of a session configuration file (.pssc). If you omit the path, the default is the 
current folder. Wildcard characters are supported, but they must resolve to a single file. You can also pipe a session 
configuration file path to Test-PSSessionConfigurationFile .`, `String`),
        ],
        `Verifies the keys and values in a session configuration file.`,
        `Test-PSSessionConfigurationFile [-Path] <String> [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-UevTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Test-WSMan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Trace-Command`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unblock-File`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unblock-Tpm`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Undo-AzureKeyVaultKeyRemoval`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Undo-AzureKeyVaultSecretRemoval`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Undo-AzureRmKeyVaultRemoval`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Undo-DtcDiagnosticTransaction`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Undo-Transaction`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Rolls back the active transaction.`,
        `Undo-Transaction [-Confirm] [-WhatIf] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Uninstall-Package`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Uninstall-ProvisioningPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Uninstall-TrustedProvisioningCertificate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unprotect-CmsMessage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unpublish-AppvClientPackage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unpublish-AzureRemoteAppProgram`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unpublish-AzureRmCdnEndpointContent`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-AzureAutomationScheduledRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-AzureRmAutomationDscNode`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-AzureRmAutomationScheduledRunbook`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-AzureRmBackupContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-AzureRmRecoveryServicesBackupContainer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-AzureRmRecoveryServicesBackupManagementServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-AzureRmResourceProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-Event`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-PackageSource`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-PSSessionConfiguration`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Force`, `Indicates that the cmdlet does not prompt you for confirmation, and restarts the WinRM service without prompting. 
Restarting the service makes the configuration change effective.


To prevent a restart and suppress the restart prompt, use the NoServiceRestart parameter.`, `SwitchParameter`),
new Parameter(`Name`, `Specifies the names of the session configurations to delete. Enter one session configuration name or a configuration 
name pattern. Wildcard characters are permitted. This parameter is required.


You can also pipe a session configurations to Unregister-PSSessionConfiguration .`, `String`),
new Parameter(`NoServiceRestart`, `Indicates that this cmdlet does not restart the WinRM service, and suppresses the prompt to restart the service.


By default, when you run an Unregister-PSSessionConfiguration command, you are prompted to restart the WinRM service 
to make the change effective. Until the WinRM service is restarted, users can still use the unregistered session 
configuration, even though Get-PSSessionConfiguration does not find it.


To restart the WinRM service without prompting, specify the Force parameter. To restart the WinRM service manually, 
use the Restart-Service cmdlet.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Deletes registered session configurations from the computer.`,
        `Unregister-PSSessionConfiguration [-Name] <String> [-Confirm] [-Force] [-NoServiceRestart] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-ScheduledJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-UevTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Unregister-WindowsDeveloperLicense`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureApplicationGateway`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureKeyVaultManagedStorageAccount`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureKeyVaultManagedStorageAccountKey`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRemoteAppCollection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmApiManagementDeployment`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmApiManagementRegion`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmAvailabilitySet`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmContainerRegistry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmContainerRegistryCredential`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmContainerService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmDisk`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmMlCommitmentPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmMlWebService`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmServiceFabricDurability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmServiceFabricReliability`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmSiteRecoveryPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmSiteRecoveryProtectionDirection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmSiteRecoveryRecoveryPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmSiteRecoveryServer`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmSiteRecoveryServicesProvider`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmSnapshot`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmVmss`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureRmVmssInstance`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureSiteRecoveryProtectionDirection`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureSiteRecoveryProtectionEntity`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureSiteRecoveryRecoveryPlan`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureVM`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureVMImage`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-AzureWebsiteRepository`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-FormatData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-Help`,
        [
            new Parameter(`Confirm`, `Prompts you for confirmation before running the cmdlet.`, `SwitchParameter`),
new Parameter(`Credential`, `Specifies credentials of a user who has permission to access the file system location specified by SourcePath . This 
parameter is valid only when the SourcePath or LiteralPath parameter is used in the command.


This parameter enables you to run Update-Help commands that have SourcePath on remote computers. By providing explicit 
credentials, you can run the command on a remote computer and access a file share on a third computer without 
encountering an access denied error or using CredSSP authentication to delegate credentials.`, `PSCredential`),
new Parameter(`Force`, `Indicates that this cmdlet does not follow the once-per-day limitation, skips version checking, and downloads files 
that exceed the 1 GB limit.


Without this parameter, Update-Help runs only once in each 24-hour period, downloads are limited to 1 GB of 
uncompressed content per module and help files are installed only when they are newer than the files on the computer.


The once-per-day limit protects the servers that host the help files and makes it practical for you to add an 
Update-Help command to your Windows PowerShell profile without incurring the resource cost of repeated connections or 
downloads.


To update help for a module in multiple UI cultures without the Force parameter, include all UI cultures in the same 
command, such as: "Update-Help -Module PSScheduledJobs -UICulture en-US, fr-FR, pt-BR"`, `SwitchParameter`),
new Parameter(`FullyQualifiedModule`, `Specifies modules with names that are specified in the form of ModuleSpecification objects. These are described in the 
Remarks section of Module Specification Constructor 
(Hashtable)http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx 
(http://msdn.microsoft.com/library/windows/desktop/jj136290(v=vs.85).aspx) in the Microsoft Developer Network (MSDN). 
For example, the FullyQualifiedModule parameter accepts a module name that is specified in the format @{ModuleName = 
"modulename"; ModuleVersion = "version_number"} or @{ModuleName = "modulename"; ModuleVersion = "version_number"; Guid 
= "GUID"}. ModuleName and ModuleVersion are required, but Guid is optional.


You cannot specify the FullyQualifiedModule parameter in the same command as a Module parameter.`, `ModuleSpecification[]`),
new Parameter(`LiteralPath`, `Specifies the folder for updated help files instead of downloading them from the Internet. Use this parameter or 
SourcePath if you have used the Save-Help cmdlet to download help files to a directory.


You can also pipe a directory object, such as one from the Get-Item or Get-ChildItem cmdlets, to Update-Help .


Unlike the value of SourcePath , the value of LiteralPath is used exactly as it is typed. No characters are 
interpreted as wildcard characters. If the path includes escape characters, enclose it in single quotation marks. 
Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.`, `String[]`),
new Parameter(`Module`, `Specifies modules for which this cmdlet updates help. Enter one or more module names or name patters in a 
comma-separated list, or specify a file that lists one module name on each line. Wildcard characters are permitted. 
You can also pipe modules from the Get-Module cmdlet, to the Update-Help cmdlet.


The modules that you specify must be installed on the computer, but they do not have to be imported into the current 
session. You can specify any module in the session or any module that is installed in a location listed in the 
PSModulePath environment variable.


A value of * (all) attempts to update help for all modules that are installed on the computer. This includes modules 
that do not support Updatable Help. This value might generate errors when the command encounters modules that do not 
support Updatable Help. Instead, run Update-Help without parameters.


The Module parameter of the Update-Help cmdlet does not accept the full path of a module file or module manifest file. 
To update help for a module that is not in a PSModulePath location, import the module into the current session before 
you run the Update-Help command.`, `String[]`),
new Parameter(`Recurse`, `Searches recursively for help files in the specified directory. This parameter is valid only when SourcePath is used 
in the command.`, `SwitchParameter`),
new Parameter(`SourcePath`, `Specifies a file system folder from which this cmdlet gets updated help files, instead of downloading them from the 
Internet. Enter the path of a folder. Do not specify a file name or file name extension. You can also pipe a folder, 
such as one from the Get-Item or Get-ChildItem cmdlets, to Update-Help .


By default, Update-Help downloads updated help files from the Internet. Use this parameter when you have used the 
Save-Help cmdlet to download updated help files to a directory.


Administrators can use the Set the default source path for Update-Help Group Policy setting under Computer 
Configuration to specify a default value for SourcePath . This Group Policy setting prevents users from using 
Update-Help to download help files from the Internet. For more information, see about_Group_Policy_Settings 
(http://go.microsoft.com/fwlink/?LinkId=251696).`, `String[]`),
new Parameter(`UICulture`, `Specifies UI culture values for which this cmdlet gets updated help files. Enter one or more language codes, such as 
es-ES, a variable that contains culture objects, or a command that gets culture objects, such as a Get-Culture or 
Get-UICulture command. Wildcard characters are not permitted and you cannot submit a partial language code, such as 
"de".


By default, Update-Help gets help files in the UI culture set for Windows or its fallback culture. If you specify the 
UICulture parameter, Update-Help looks for help only for the specified UI culture, not in any fallback culture.


Commands that use the UICulture parameter succeed only when the module provides help files for the specified UI 
culture. If the command fails because the specified UI culture is not supported, the error message includes a list of 
UI cultures that the module supports.`, `CultureInfo[]`),
new Parameter(`UseDefaultCredentials`, `Indicates that this cmdlet runs the command, including the Internet download, by using the credentials of the current 
user. By default, the command runs without explicit credentials.


This parameter is effective only when the Web download uses NTLM, negotiate, or Kerberos-based authentication.`, `SwitchParameter`),
new Parameter(`WhatIf`, `Shows what would happen if the cmdlet runs. The cmdlet is not run.`, `SwitchParameter`),
        ],
        `Downloads and installs the newest help files on your computer.`,
        `Update-Help [[-Module] <String[]>] [[-UICulture] <CultureInfo[]>] [-Confirm] [-Credential <PSCredential>] [-Force] 
[-FullyQualifiedModule <ModuleSpecification[]>] [-LiteralPath <String[]>] [-Recurse] [-UseDefaultCredentials] 
[-WhatIf] [<CommonParameters>]

Update-Help [[-Module] <String[]>] [[-SourcePath] <String[]>] [[-UICulture] <CultureInfo[]>] [-Confirm] [-Credential 
<PSCredential>] [-Force] [-FullyQualifiedModule <ModuleSpecification[]>] [-Recurse] [-UseDefaultCredentials] [-WhatIf] 
[<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-List`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-TypeData`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-UevTemplate`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Update-WIMBootEntry`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Use-AzureRmHDInsightCluster`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Use-AzureRmSqlServerAuditingPolicy`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Use-Transaction`,
        [
            new Parameter(`TransactedScript`, `Specifies the script block that is run in the transaction. Enter any valid script block enclosed in braces ( { } ). 
This parameter is required.`, `ScriptBlock`),
new Parameter(`UseTransaction`, `Includes the command in the active transaction. This parameter is valid only when a transaction is in progress. For 
more information, see Includes the command in the active transaction. This parameter is valid only when a transaction 
is in progress. For more information, see`, `SwitchParameter`),
        ],
        `Adds the script block to the active transaction.`,
        `Use-Transaction [-TransactedScript] <ScriptBlock> [-UseTransaction] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Use-WindowsUnattend`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Wait-AzureRmBackupJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Wait-AzureRmDataLakeAnalyticsJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Wait-AzureRmHDInsightJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Wait-AzureRmRecoveryServicesBackupJob`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Wait-Debugger`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Wait-Event`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Wait-Job`,
        [
            new Parameter(`Any`, `Indicates that this cmdlet displays the command prompt, and returns the job object, when any job finishes. By default, 
Wait-Job waits until all of the specified jobs are complete before it displays the prompt.`, `SwitchParameter`),
new Parameter(`Filter`, `Specifies a hash table of conditions. This cmdlet waits for jobs that satisfy all of the conditions in the hash table. 
Enter a hash table where the keys are job properties and the values are job property values.


This parameter works only on custom job types, such as workflow jobs and scheduled jobs. It does not work on standard 
background jobs, such as those created by using the Start-Job cmdlet. For information about support for this 
parameter, see the help topic for the job type.


This parameter was introduced in Windows PowerShell 3.0.`, `Hashtable`),
new Parameter(`Force`, `Indicates that this cmdlet continues to wait for jobs in the Suspended or Disconnected state. By default, Wait-Job 
returns, or ends  the wait, when jobs are in one of the following states:


- Completed


- Failed


- Stopped


- Suspended


- Disconnected




This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Id`, `Specifies an array of IDs of jobs for which this cmdlet waits.


The ID is an integer that uniquely identifies the job in the current session. It is easier to remember and type than 
the instance ID, but it is unique only in the current session. You can type one or more IDs, separated by commas. To 
find the ID of a job, type "Get-Job".`, `Int32[]`),
new Parameter(`InstanceId`, `Specifies an array of instance IDs of jobs for which this cmdlet waits. The default is all jobs.


An instance ID is a GUID that uniquely identifies the job on the computer. To find the instance ID of a job, use 
Get-Job .`, `Guid[]`),
new Parameter(`Job`, `Specifies the jobs for which this cmdlet waits. Enter a variable that contains the job objects or a command that gets 
the job objects. You can also use a pipeline operator to send job objects to the Wait-Job cmdlet. By default, Wait-Job 
waits for all jobs created in the current session.`, `Job[]`),
new Parameter(`Name`, `Specifies friendly names of jobs for which this cmdlet waits.`, `String[]`),
new Parameter(`State`, `Specifies a job state. This cmdlet waits only for jobs in the specified state. The acceptable values for this 
parameter are:


- NotStarted


- Running


- Completed


- Failed


- Stopped


- Blocked


- Suspended


- Disconnected


- Suspending


- Stopping




For more information about job states, see JobState 
Enumerationhttp://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx 
(http://msdn.microsoft.com/en-us/library/windows/desktop/system.management.automation.jobstate(v=vs.85).aspx) in the 
Microsoft Developer Network (MSDN).`, `JobState`),
new Parameter(`Timeout`, `Specifies the maximum wait time for each background job, in seconds. The default value, -1, indicates that the cmdlet 
waits until the job finishes.  The timing starts when you submit the Wait-Job command, not the Start-Job command.


If this time is exceeded, the wait ends and the command prompt returns, even if the job is still running. The command 
does not display any error message.`, `Int32`),
        ],
        `Suppresses the command prompt until one or all of the Windows PowerShell background jobs running in the session are completed.`,
        `Wait-Job [-Filter] <Hashtable> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-Id] <Int32[]> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-InstanceId] <Guid[]> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-Job] <Job[]> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-Name] <String[]> [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]

Wait-Job [-State] {NotStarted | Running | Completed | Failed | Stopped | Blocked | Suspended | Disconnected | 
Suspending | Stopping | AtBreakpoint} [-Any] [-Force] [-Timeout <Int32>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Wait-Process`,
        [
            new Parameter(`Id`, `Specifies the process IDs of the processes. To specify multiple IDs, use commas to separate the IDs. To find the PID 
of a process, type "Get-Process".`, `Int32[]`),
new Parameter(`InputObject`, `Specifies the processes by submitting process objects. Enter a variable that contains the process objects, or type a 
command or expression that gets the process objects, such as the Get-Process cmdlet.`, `Process[]`),
new Parameter(`Name`, `Specifies the process names of the processes. To specify multiple names, use commas to separate the names. Wildcard 
characters are not supported.`, `String[]`),
new Parameter(`Timeout`, `Specifies the maximum time, in seconds, that this cmdlet waits for the specified processes to stop. When this interval 
expires, the command displays a non-terminating error that lists the processes that are still running, and ends the 
wait. By default, there is no time-out.`, `Int32`),
        ],
        `Waits for the processes to be stopped before accepting more input.`,
        `Wait-Process [-Id] <Int32[]> [[-Timeout] <Int32>] [<CommonParameters>]

Wait-Process [[-Timeout] <Int32>] -InputObject <Process[]> [<CommonParameters>]

Wait-Process [-Name] <String[]> [[-Timeout] <Int32>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Where-Object`,
        [
            new Parameter(`CContains`, `Indicates that this cmdlet gets objects from a collection if the property value of the object is an exact match for 
the specified value. This operation is case-sensitive.


For example: "Get-Process | where ProcessName -CContains "svchost"" CContains refers to a collection of values and is 
true if the collection contains an item that is an exact match for the specified value. If the input is a single 
object, Windows PowerShell converts it to a collection of one object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CEQ`, `Indicates that this cmdlet gets objects if the property value is the same as the specified value. This operation is 
case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CGE`, `Indicates that this cmdlet gets objects if the property value is greater than or equal to the specified value. This 
operation is case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CGT`, `Indicates that this cmdlet gets objects if the property value is greater than the specified value. This operation is 
case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CIn`, `Indicates that this cmdlet gets objects if the property value includes the specified value. This operation is 
case-sensitive.


For example: "Get-Process | where -Value "svchost" -CIn ProcessName" CIn resembles CContains , except that the 
property and value positions are reversed. For example, the following statements are both true.


"abc", "def" -CContains "abc"


"abc" -CIn "abc", "def"


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CLE`, `Indicates that this cmdlet gets objects if the property value is less-than or equal to the specified value. This 
operation is case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CLT`, `Indicates that this cmdlet gets objects if the property value is less-than the specified value. This operation is 
case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CLike`, `Indicates that this cmdlet gets objects if the property value matches a value that includes wildcard characters. This 
operation is case-sensitive.


For example: "Get-Process | where ProcessName -CLike "*host""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CMatch`, `Indicates that this cmdlet gets objects if the property value matches the specified regular expression. This operation 
is case-sensitive. When the input is scalar, the matched value is saved in $Matches automatic variable.


For example: "Get-Process | where ProcessName -CMatch "Shell""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CNE`, `Indicates that this cmdlet gets objects if the property value is different than the specified value. This operation is 
case-sensitive.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CNotContains`, `Indicates that this cmdlet gets objects if the property value of the object is not an exact match for the specified 
value. This operation is case-sensitive.


For example: "Get-Process | where ProcessName -CNotContains "svchost""


"NotContains" and "CNotContains refer to a collection of values and are true when the collection does not contains any 
items that are an exact match for the specified value. If the input is a single object, Windows PowerShell converts it 
to a collection of one object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CNotIn`, `Indicates that this cmdlet gets objects if the property value is not an exact match for the specified value. This 
operation is case-sensitive.


For example: "Get-Process | where -Value "svchost" -CNotIn -Property ProcessName" NotIn and CNotIn operators resemble 
NotContains and CNotContains , except that the property and value positions are reversed. For example, the following 
statements are true.


"abc", "def" -CNotContains "Abc"


"abc" -CNotIn "Abc", "def"`, `SwitchParameter`),
new Parameter(`CNotLike`, `Indicates that this cmdlet gets objects if the property value does not match a value that includes wildcard 
characters. This operation is case-sensitive.


For example: "Get-Process | where ProcessName -CNotLike "*host""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`CNotMatch`, `Indicates that this cmdlet gets objects if the property value does not match the specified regular expression. This 
operation is case-sensitive. When the input is scalar, the matched value is saved in $Matches automatic variable.


For example: "Get-Process | where ProcessName -CNotMatch "Shell""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Contains`, `Indicates that this cmdlet gets objects if any item in the property value of the object is an exact match for the 
specified value.


For example: "Get-Process | where ProcessName -Contains "Svchost""


If the property value contains a single object, Windows PowerShell converts it to a collection of one object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`EQ`, `Indicates that this cmdlet gets objects if the property value is the same as the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`FilterScript`, `Specifies the script block that is used to filter the objects. Enclose the script block in braces ( {} ).


The parameter name, FilterScript , is optional.`, `ScriptBlock`),
new Parameter(`GE`, `Indicates that this cmdlet gets objects if the property value is greater than or equal to the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`GT`, `Indicates that this cmdlet gets objects if the property value is greater than the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`In`, `Indicates that this cmdlet gets objects if the property value matches any of the specified values.


For example: "Get-Process | where -Property ProcessName -in -Value "Svchost", "TaskHost", "WsmProvHost""


If the value of the Value parameter is a single object, Windows PowerShell converts it to a collection of one object.


If the property value of an object is an array, Windows PowerShell uses reference equality to determine a match. 
Where-Object returns the object only if the value of the Property parameter and any value of Value are the same 
instance of an object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`InputObject`, `Specifies the objects to be filtered. You can also pipe the objects to Where-Object .


When you use the InputObject parameter with Where-Object , instead of piping command results to Where-Object , the 
InputObject value is treated as a single object. This is true even if the value is a collection that is the result of 
a command, such as "-InputObject (Get-Process)". Because InputObject cannot return individual properties from an array 
or collection of objects, we recommend that, if you use Where-Object to filter a collection of objects for those 
objects that have specific values in defined properties, you use Where-Object in the pipeline, as shown in the 
examples in this topic.`, `PSObject`),
new Parameter(`Is`, `Indicates that this cmdlet gets objects if the property value is an instance of the specified .NET Framework type. 
Enclose the type name in square brackets.


For example, "Get-Process | where StartTime -Is [DateTime]"


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`IsNot`, `Indicates that this cmdlet gets objects if the property value is not an instance of the specified .NET Framework type.


For example, "Get-Process | where StartTime -IsNot [System.String]"


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`LE`, `Indicates that this cmdlet gets objects if the property value is less than or equal to the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`LT`, `Indicates that this cmdlet gets objects if the property value is less than the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Like`, `Indicates that this cmdlet gets objects if the property value matches a value that includes wildcard characters.


For example: "Get-Process | where ProcessName -Like "*host""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Match`, `Indicates that this cmdlet gets objects if the property value matches the specified regular expression. When the input 
is scalar, the matched value is saved in $Matches automatic variable.


For example: "Get-Process | where ProcessName -Match "shell""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`NE`, `Indicates that this cmdlet gets objects if the property value is different than the specified value.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`NotContains`, `Indicates that this cmdlet gets objects if none of the items in the property value is an exact match for the specified 
value.


For example: "Get-Process | where ProcessName -NotContains "Svchost"" NotContains refers to a collection of values and 
is true if the collection does not contain any items that are an exact match for the specified value. If the input is 
a single object, Windows PowerShell converts it to a collection of one object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`NotIn`, `Indicates that this cmdlet gets objects if the property value is not an exact match for any of the specified values.


For example: "Get-Process | where -Value "svchost" -NotIn -Property ProcessName"


If the value of Value is a single object, Windows PowerShell converts it to a collection of one object.


If the property value of an object is an array, Windows PowerShell uses reference equality to determine a match. 
Where-Object returns the object only if the value of Property and any value of Value are not the same instance of an 
object.


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`NotLike`, `Indicates that this cmdlet gets objects if the property value does not match a value that includes wildcard characters.


For example: "Get-Process | where ProcessName -NotLike "*host""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`NotMatch`, `Indicates that this cmdlet gets objects when the property value does not match the specified regular expression. When 
the input is scalar, the matched value is saved in $Matches automatic variable.


For example: "Get-Process | where ProcessName -NotMatch "PowerShell""


This parameter was introduced in Windows PowerShell 3.0.`, `SwitchParameter`),
new Parameter(`Property`, `Specifies the name of an object property.


The parameter name, Property , is optional.


This parameter was introduced in Windows PowerShell 3.0.`, `String`),
new Parameter(`Value`, `Specifies a property value.


The parameter name, Value , is optional.


This parameter was introduced in Windows PowerShell 3.0.`, `Object`),
        ],
        `Selects objects from a collection based on their property values.`,
        `Where-Object [-Property] <String> [[-Value] <Object>] -CContains [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CEQ [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CGE [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CGT [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CIn [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CLE [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CLT [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CLike [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CMatch [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNE [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNotContains [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNotIn [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNotLike [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -CNotMatch [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -Contains [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-EQ] [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-FilterScript] <ScriptBlock> [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -GE [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -GT [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] -In [-InputObject <PSObject>] [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -Is [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -IsNot [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -LE [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -LT [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -Like [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -Match [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NE [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NotContains [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NotIn [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NotLike [<CommonParameters>]

Where-Object [-Property] <String> [[-Value] <Object>] [-InputObject <PSObject>] -NotMatch [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-Debug`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-Error`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-EventLog`,
        [
            new Parameter(`Category`, `Specifies a task category for the event. Enter an integer that is associated with the strings in the category message 
file for the event log.`, `Int16`),
new Parameter(`ComputerName`, `Specifies a remote computer. The default is the local computer.


Type the NetBIOS name, an IP address, or a fully qualified domain name of a remote computer.


This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of the 
Get-EventLog cmdlet even if your computer is not configured to run remote commands.`, `String`),
new Parameter(`EntryType`, `Specifies the entry type of the event. The acceptable values for this parameter are: Error, Warning, Information, 
SuccessAudit, and FailureAudit. The default value is Information.


For a description of the values, see System.Diagnostics.EventLogEntryTypehttp://go.microsoft.com/fwlink/?LinkId=143599 
(http://go.microsoft.com/fwlink/?LinkId=143599) in the Microsoft Developer Network (MSDN) library.`, `EventLogEntryType`),
new Parameter(`EventId`, `Specifies the event identifier. This parameter is required. The maximum value for the EventId parameter is 65535.`, `Int32`),
new Parameter(`LogName`, `Specifies the name of the log to which the event is written. Enter the log name. The log name is the value of the Log 
property, not the LogDisplayName . Wildcard characters are not permitted. This parameter is required.`, `String`),
new Parameter(`Message`, `Specifies the event message. This parameter is required.`, `String`),
new Parameter(`RawData`, `Specifies the binary data that is associated with the event, in bytes.`, `Byte[]`),
new Parameter(`Source`, `Specifies the event source, which is typically the name of the application that is writing the event to the log.`, `String`),
        ],
        `Writes an event to an event log.`,
        `Write-EventLog [-LogName] <String> [-Source] <String> [-EventId] <Int32> [[-EntryType] {Error | Information | 
FailureAudit | SuccessAudit | Warning}] [-Message] <String> [-Category <Int16>] [-ComputerName <String>] [-RawData 
<Byte[]>] [<CommonParameters>]`,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-Host`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-Information`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-Output`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-Progress`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-Verbose`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),
    new ConsoleCommand(
        `Write-Warning`,
        [
            
        ],
        `See help file for details.`,
        ``,
        "",
        (parameters, paramDictionary) => {
           
        }
    ),

];
export const WinPSCommands = commands;